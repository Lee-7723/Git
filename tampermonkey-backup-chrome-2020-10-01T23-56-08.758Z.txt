{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"网盘助手","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["newday.me","likestyle.cn"],"orig_excludes":[],"orig_includes":[],"orig_matches":["*://pan.baidu.com/*","*://yun.baidu.com/*","*://*.weiyun.com/*","*://*.lanzous.com/*","*://*.lanzoux.com/*","*://cloud.189.cn/*","*://*.newday.me/*","*://*.likestyle.cn/*"],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"$config":"o{\"uid\":\"2k8hedhk5qus33a7oig6boxw79qgq87e\",\"share_list\":{\"b00nm2rte\":{\"share_id\":\"b00nm2rte\",\"share_pwd\":\"0\",\"share_link\":\"https://lanzous.com/b00nm2rte\",\"share_source\":\"lanzous\",\"share_time\":1591774331659},\"b04y98kcd\":{\"share_id\":\"b04y98kcd\",\"share_pwd\":\"0\",\"share_link\":\"https://www.lanzous.com/b04y98kcd\",\"share_source\":\"lanzous\",\"share_time\":1590310216473},\"7zNkftjwu2ZVpcqQE7F-Hw\":{\"share_id\":\"7zNkftjwu2ZVpcqQE7F-Hw\",\"share_pwd\":\"siq5\",\"share_link\":\"https://pan.baidu.com/share/init?surl=7zNkftjwu2ZVpcqQE7F-Hw\",\"share_source\":\"baidu\",\"share_time\":1590583667216},\"b03aws0uj\":{\"share_id\":\"b03aws0uj\",\"share_pwd\":\"0\",\"share_link\":\"https://carrot.lanzous.com/b03aws0uj\",\"share_source\":\"lanzous\",\"share_time\":1591492166260},\"g3ydMVmI50L4shLLnS3WXQ\":{\"share_id\":\"g3ydMVmI50L4shLLnS3WXQ\",\"share_pwd\":\"bcox\",\"share_link\":\"https://pan.baidu.com/share/init?surl=g3ydMVmI50L4shLLnS3WXQ\",\"share_source\":\"baidu\",\"share_time\":1591792973394},\"b0gwopzc\":{\"share_id\":\"b0gwopzc\",\"share_pwd\":\"0\",\"share_link\":\"https://carrotchou.lanzous.com/b0gwopzc\",\"share_source\":\"lanzous\",\"share_time\":1594185504074},\"_ZNYHexEzd79d-VbgrOpvQ\":{\"share_id\":\"_ZNYHexEzd79d-VbgrOpvQ\",\"share_pwd\":\"8888\",\"share_link\":\"https://pan.baidu.com/share/init?surl=_ZNYHexEzd79d-VbgrOpvQ\",\"share_source\":\"baidu\",\"share_time\":1596023051567},\"a3bUK6aRfwh1efP4QAP0Ug\":{\"share_id\":\"a3bUK6aRfwh1efP4QAP0Ug\",\"share_pwd\":\"n47q\",\"share_link\":\"https://pan.baidu.com/share/init?surl=a3bUK6aRfwh1efP4QAP0Ug\",\"share_source\":\"baidu\",\"share_time\":1596368639166},\"b06jopyd\":{\"share_id\":\"b06jopyd\",\"share_pwd\":\"0\",\"share_link\":\"https://www.lanzoux.com/b06jopyd\",\"share_source\":\"lanzous\",\"share_time\":1596621240279},\"kmlpySctJF8J8CawRX3p_Q\":{\"share_id\":\"kmlpySctJF8J8CawRX3p_Q\",\"share_pwd\":\"q4h5\",\"share_link\":\"https://pan.baidu.com/share/init?surl=kmlpySctJF8J8CawRX3p_Q\",\"share_source\":\"baidu\",\"share_time\":1596688102691},\"vabp-HuDiSBQCqQOu9b0DA\":{\"share_id\":\"vabp-HuDiSBQCqQOu9b0DA\",\"share_pwd\":\"GZYS\",\"share_link\":\"https://pan.baidu.com/share/init?surl=vabp-HuDiSBQCqQOu9b0DA\",\"share_source\":\"baidu\",\"share_time\":1596936801945},\"b00taofti\":{\"share_id\":\"b00taofti\",\"share_pwd\":\"0\",\"share_link\":\"https://www.lanzous.com/b00taofti\",\"share_source\":\"lanzous\",\"share_time\":1597489965958}}}","$storage":"o{\"version_date\":\"20200822\",\"version_payload\":{\"version\":\"0.4.2\"},\"version_latest\":\"0.4.2\"}","config_json":"s{\"wpzs_version_date\":\"20200521\",\"wpzs_version_latest\":\"0.2.2\"}","uid":"saktjjzsgqa3ugi42mjum2l9v415t3a99"},"ts":1598055334430},"enabled":true,"position":1,"file_url":"https://greasyfork.org/scripts/378301-%E7%BD%91%E7%9B%98%E5%8A%A9%E6%89%8B/code/%E7%BD%91%E7%9B%98%E5%8A%A9%E6%89%8B.user.js","uuid":"3245716b-5d41-4f61-bbbb-bd51c0e2c39b","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICDnvZHnm5jliqnmiYsKLy8gQG5hbWVzcGFjZSAgICBodHRwOi8vZ28ubmV3ZGF5Lm1lL3MvcGFuLWhvbWUKLy8gQHZlcnNpb24gICAgICAwLjQuNAovLyBAaWNvbiAgICAgICAgIGh0dHA6Ly9jZG4ubmV3ZGF5Lm1lL2FkZG9uL3Bhbi9mYXZpY29uLmljbwovLyBAYXV0aG9yICAgICAgIOWTqeWRtQovLyBAZGVzY3JpcHRpb24gIOWkp+amguaYr+acgOS8mOmbheWlveeUqOeahOe9keebmOWKqeaJi+S6hu+8m+aPkuS7tuS4u+imgeWKn+iDveacie+8mlsxXeeZvuW6pue9keebmOOAgeiFvuiur+W+ruS6keOAgeiTneWlj+S6keOAgeWkqee/vOS6keebmOS4h+iDvemSpeWMmSBbMl3nmb7luqbnvZHnm5jnlJ/miJDlubblsZXnpLrkuIvovb3pk77mjqUgWzNd55m+5bqm572R55uY5YiG5Lqr5pe26Ieq5a6a5LmJ5o+Q5Y+W56CBCi8vIEBtYXRjaCAgICAgICAgKjovL3Bhbi5iYWlkdS5jb20vKgovLyBAbWF0Y2ggICAgICAgICo6Ly95dW4uYmFpZHUuY29tLyoKLy8gQG1hdGNoICAgICAgICAqOi8vKi53ZWl5dW4uY29tLyoKLy8gQG1hdGNoICAgICAgICAqOi8vKi5sYW56b3VzLmNvbS8qCi8vIEBtYXRjaCAgICAgICAgKjovLyoubGFuem91eC5jb20vKgovLyBAbWF0Y2ggICAgICAgICo6Ly9jbG91ZC4xODkuY24vKgovLyBAbWF0Y2ggICAgICAgICo6Ly8qLm5ld2RheS5tZS8qCi8vIEBtYXRjaCAgICAgICAgKjovLyoubGlrZXN0eWxlLmNuLyoKLy8gQGNvbm5lY3QgICAgICBuZXdkYXkubWUKLy8gQGNvbm5lY3QgICAgICBsaWtlc3R5bGUuY24KLy8gQHJlcXVpcmUgICAgICBodHRwczovL2Nkbi5zdGF0aWNmaWxlLm9yZy9qcXVlcnkvMy41LjAvanF1ZXJ5Lm1pbi5qcwovLyBAcmVxdWlyZSAgICAgIGh0dHBzOi8vY2RuLnN0YXRpY2ZpbGUub3JnL2RvbXB1cmlmeS8yLjAuMTAvcHVyaWZ5Lm1pbi5qcwovLyBAcmVxdWlyZSAgICAgIGh0dHBzOi8vY2RuLnN0YXRpY2ZpbGUub3JnL3NuYXAuc3ZnLzAuNS4xL3NuYXAuc3ZnLW1pbi5qcwovLyBAcnVuLWF0ICAgICAgIGRvY3VtZW50LXN0YXJ0Ci8vIEBncmFudCAgICAgICAgdW5zYWZlV2luZG93Ci8vIEBncmFudCAgICAgICAgR01fZ2V0VmFsdWUKLy8gQGdyYW50ICAgICAgICBHTV9zZXRWYWx1ZQovLyBAZ3JhbnQgICAgICAgIEdNX2RlbGV0ZVZhbHVlCi8vIEBncmFudCAgICAgICAgR01fbGlzdFZhbHVlcwovLyBAZ3JhbnQgICAgICAgIEdNX29wZW5JblRhYgovLyBAZ3JhbnQgICAgICAgIEdNX25vdGlmaWNhdGlvbgovLyBAZ3JhbnQgICAgICAgIEdNX3htbGh0dHBSZXF1ZXN0Ci8vID09L1VzZXJTY3JpcHQ9PQoKKGZ1bmN0aW9uICgpIHsKICAgICd1c2Ugc3RyaWN0JzsKCiAgICB2YXIgbWFuaWZlc3QgPSB7CiAgICAgICAgIm5hbWUiOiAid3B6cyIsCiAgICAgICAgInVybHMiOiB7fSwKICAgICAgICAiYXBpcyI6IHsKICAgICAgICAgICAgInZlcnNpb24iOiAiaHR0cHM6Ly9hcGkubmV3ZGF5Lm1lL3NoYXJlL2Rpc2svdmVyc2lvbiIsCiAgICAgICAgICAgICJvcmlnaW4iOiAiaHR0cHM6Ly9hcGkubmV3ZGF5Lm1lL3NoYXJlL2Rpc2svb3JpZ2luIiwKICAgICAgICAgICAgInF1ZXJ5IjogImh0dHBzOi8vYXBpLm5ld2RheS5tZS9zaGFyZS9kaXNrL3F1ZXJ5IiwKICAgICAgICAgICAgInN0b3JlIjogImh0dHBzOi8vYXBpLm5ld2RheS5tZS9zaGFyZS9kaXNrL3N0b3JlIiwKICAgICAgICAgICAgImxpc3RzIjogImh0dHBzOi8vYXBpLm5ld2RheS5tZS9zaGFyZS9kaXNrL2xpc3RzIiwKICAgICAgICAgICAgImRlbGV0ZSI6ICJodHRwczovL2FwaS5uZXdkYXkubWUvc2hhcmUvZGlzay9kZWxldGUiCiAgICAgICAgfSwKICAgICAgICAibG9nZ2VyX2xldmVsIjogMywKICAgICAgICAib3B0aW9uc19wYWdlIjogImh0dHA6Ly9nby5uZXdkYXkubWUvcy9wYW4tb3B0aW9uIgogICAgfTsKCiAgICB2YXIgY29udGFpbmVyID0gKGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIgb2JqID0gewogICAgICAgICAgICBkZWZpbmVzOiB7fSwKICAgICAgICAgICAgbW9kdWxlczoge30KICAgICAgICB9OwoKICAgICAgICBvYmouZGVmaW5lID0gZnVuY3Rpb24gKG5hbWUsIHJlcXVpcmVzLCBjYWxsYmFjaykgewogICAgICAgICAgICBuYW1lID0gb2JqLnByb2Nlc3NOYW1lKG5hbWUpOwogICAgICAgICAgICBvYmouZGVmaW5lc1tuYW1lXSA9IHsKICAgICAgICAgICAgICAgIHJlcXVpcmVzOiByZXF1aXJlcywKICAgICAgICAgICAgICAgIGNhbGxiYWNrOiBjYWxsYmFjawogICAgICAgICAgICB9OwogICAgICAgIH07CgogICAgICAgIG9iai5yZXF1aXJlID0gZnVuY3Rpb24gKG5hbWUsIGNhY2hlKSB7CiAgICAgICAgICAgIGlmICh0eXBlb2YgY2FjaGUgPT0gInVuZGVmaW5lZCIpIHsKICAgICAgICAgICAgICAgIGNhY2hlID0gdHJ1ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgbmFtZSA9IG9iai5wcm9jZXNzTmFtZShuYW1lKTsKICAgICAgICAgICAgaWYgKGNhY2hlICYmIG9iai5tb2R1bGVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gb2JqLm1vZHVsZXNbbmFtZV07CiAgICAgICAgICAgIH0gZWxzZSBpZiAob2JqLmRlZmluZXMuaGFzT3duUHJvcGVydHkobmFtZSkpIHsKICAgICAgICAgICAgICAgIHZhciByZXF1aXJlcyA9IG9iai5kZWZpbmVzW25hbWVdLnJlcXVpcmVzOwogICAgICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gb2JqLmRlZmluZXNbbmFtZV0uY2FsbGJhY2s7CgogICAgICAgICAgICAgICAgdmFyIG1vZHVsZSA9IG9iai51c2UocmVxdWlyZXMsIGNhbGxiYWNrKTsKICAgICAgICAgICAgICAgIGNhY2hlICYmIG9iai5yZWdpc3RlcihuYW1lLCBtb2R1bGUpOwogICAgICAgICAgICAgICAgcmV0dXJuIG1vZHVsZTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIG9iai51c2UgPSBmdW5jdGlvbiAocmVxdWlyZXMsIGNhbGxiYWNrKSB7CiAgICAgICAgICAgIHZhciBtb2R1bGUgPSB7CiAgICAgICAgICAgICAgICBleHBvcnRzOiB1bmRlZmluZWQKICAgICAgICAgICAgfTsKICAgICAgICAgICAgdmFyIHBhcmFtcyA9IG9iai5idWlsZFBhcmFtcyhyZXF1aXJlcywgbW9kdWxlKTsKICAgICAgICAgICAgdmFyIHJlc3VsdCA9IGNhbGxiYWNrLmFwcGx5KHRoaXMsIHBhcmFtcyk7CiAgICAgICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0OwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIG1vZHVsZS5leHBvcnRzOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnJlZ2lzdGVyID0gZnVuY3Rpb24gKG5hbWUsIG1vZHVsZSkgewogICAgICAgICAgICBuYW1lID0gb2JqLnByb2Nlc3NOYW1lKG5hbWUpOwogICAgICAgICAgICBvYmoubW9kdWxlc1tuYW1lXSA9IG1vZHVsZTsKICAgICAgICB9OwoKICAgICAgICBvYmouYnVpbGRQYXJhbXMgPSBmdW5jdGlvbiAocmVxdWlyZXMsIG1vZHVsZSkgewogICAgICAgICAgICB2YXIgcGFyYW1zID0gW107CiAgICAgICAgICAgIHJlcXVpcmVzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHsKICAgICAgICAgICAgICAgIHBhcmFtcy5wdXNoKG9iai5yZXF1aXJlKG5hbWUpKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHBhcmFtcy5wdXNoKG9iai5yZXF1aXJlKTsKICAgICAgICAgICAgcGFyYW1zLnB1c2gobW9kdWxlLmV4cG9ydHMpOwogICAgICAgICAgICBwYXJhbXMucHVzaChtb2R1bGUpOwogICAgICAgICAgICByZXR1cm4gcGFyYW1zOwogICAgICAgIH07CgogICAgICAgIG9iai5wcm9jZXNzTmFtZSA9IGZ1bmN0aW9uIChuYW1lKSB7CiAgICAgICAgICAgIHJldHVybiBuYW1lLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgfTsKCiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgZGVmaW5lOiBvYmouZGVmaW5lLAogICAgICAgICAgICB1c2U6IG9iai51c2UsCiAgICAgICAgICAgIHJlZ2lzdGVyOiBvYmoucmVnaXN0ZXIsCiAgICAgICAgICAgIG1vZHVsZXM6IG9iai5tb2R1bGVzCiAgICAgICAgfTsKICAgIH0pKCk7CgogICAgY29udGFpbmVyLmRlZmluZSgiZ20iLCBbXSwgZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBvYmogPSB7fTsKCiAgICAgICAgb2JqLnJlYWR5ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7CiAgICAgICAgICAgIGlmICh0eXBlb2YgR01fZ2V0VmFsdWUgIT0gInVuZGVmaW5lZCIpIHsKICAgICAgICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICBvYmoucmVhZHkoY2FsbGJhY2spOwogICAgICAgICAgICAgICAgfSwgMTAwKTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIHJldHVybiBvYmo7CiAgICB9KTsKCiAgICAvKiogY29tbW9uICoqLwogICAgY29udGFpbmVyLmRlZmluZSgiZ21EYW8iLCBbXSwgZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBvYmogPSB7CiAgICAgICAgICAgIGl0ZW1zOiB7fQogICAgICAgIH07CgogICAgICAgIG9iai5nZXQgPSBmdW5jdGlvbiAobmFtZSkgewogICAgICAgICAgICByZXR1cm4gR01fZ2V0VmFsdWUobmFtZSk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmdldEJhdGNoID0gZnVuY3Rpb24gKG5hbWVzKSB7CiAgICAgICAgICAgIHZhciBpdGVtcyA9IHt9OwogICAgICAgICAgICBuYW1lcy5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7CiAgICAgICAgICAgICAgICBpdGVtc1tuYW1lXSA9IG9iai5nZXQobmFtZSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICByZXR1cm4gaXRlbXM7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmdldEFsbCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIG9iai5nZXRCYXRjaChHTV9saXN0VmFsdWVzKCkpOwogICAgICAgIH07CgogICAgICAgIG9iai5zZXQgPSBmdW5jdGlvbiAobmFtZSwgaXRlbSkgewogICAgICAgICAgICBHTV9zZXRWYWx1ZShuYW1lLCBpdGVtKTsKICAgICAgICB9OwoKICAgICAgICBvYmouc2V0QmF0Y2ggPSBmdW5jdGlvbiAoaXRlbXMpIHsKICAgICAgICAgICAgZm9yICh2YXIgbmFtZSBpbiBpdGVtcykgewogICAgICAgICAgICAgICAgb2JqLnNldChuYW1lLCBpdGVtc1tuYW1lXSk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBvYmouc2V0QWxsID0gZnVuY3Rpb24gKGl0ZW1zKSB7CiAgICAgICAgICAgIHZhciBuYW1lcyA9IEdNX2xpc3RWYWx1ZXMoKTsKICAgICAgICAgICAgbmFtZXMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkgewogICAgICAgICAgICAgICAgaWYgKCFpdGVtcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkgewogICAgICAgICAgICAgICAgICAgIG9iai5yZW1vdmUobmFtZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBvYmouc2V0QmF0Y2goaXRlbXMpOwogICAgICAgIH07CgogICAgICAgIG9iai5yZW1vdmUgPSBmdW5jdGlvbiAobmFtZSkgewogICAgICAgICAgICBHTV9kZWxldGVWYWx1ZShuYW1lKTsKICAgICAgICB9OwoKICAgICAgICBvYmoucmVtb3ZlQmF0Y2ggPSBmdW5jdGlvbiAobmFtZXMpIHsKICAgICAgICAgICAgbmFtZXMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkgewogICAgICAgICAgICAgICAgb2JqLnJlbW92ZShuYW1lKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnJlbW92ZUFsbCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgb2JqLnJlbW92ZUJhdGNoKEdNX2xpc3RWYWx1ZXMoKSk7CiAgICAgICAgfTsKCiAgICAgICAgcmV0dXJuIG9iajsKICAgIH0pOwoKICAgIGNvbnRhaW5lci5kZWZpbmUoIlNjb3BlRGFvIiwgW10sIGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGRhbywgc2NvcGUpIHsKICAgICAgICAgICAgdmFyIG9iaiA9IHsKICAgICAgICAgICAgICAgIGl0ZW1zOiB7fQogICAgICAgICAgICB9OwoKICAgICAgICAgICAgb2JqLmdldCA9IGZ1bmN0aW9uIChuYW1lKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gb2JqLml0ZW1zW25hbWVdOwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgb2JqLmdldEJhdGNoID0gZnVuY3Rpb24gKG5hbWVzKSB7CiAgICAgICAgICAgICAgICB2YXIgaXRlbXMgPSB7fTsKICAgICAgICAgICAgICAgIG5hbWVzLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHsKICAgICAgICAgICAgICAgICAgICBpZiAob2JqLml0ZW1zLmhhc093blByb3BlcnR5KG5hbWUpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zW25hbWVdID0gb2JqLml0ZW1zW25hbWVdOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW1zOwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgb2JqLmdldEFsbCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBvYmouaXRlbXM7CiAgICAgICAgICAgIH07CgogICAgICAgICAgICBvYmouc2V0ID0gZnVuY3Rpb24gKG5hbWUsIGl0ZW0pIHsKICAgICAgICAgICAgICAgIG9iai5pdGVtc1tuYW1lXSA9IGl0ZW07CgogICAgICAgICAgICAgICAgb2JqLnN5bmMoKTsKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIG9iai5zZXRCYXRjaCA9IGZ1bmN0aW9uIChpdGVtcykgewogICAgICAgICAgICAgICAgb2JqLml0ZW1zID0gT2JqZWN0LmFzc2lnbihvYmouaXRlbXMsIGl0ZW1zKTsKCiAgICAgICAgICAgICAgICBvYmouc3luYygpOwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgb2JqLnNldEFsbCA9IGZ1bmN0aW9uIChpdGVtcykgewogICAgICAgICAgICAgICAgb2JqLml0ZW1zID0gT2JqZWN0LmFzc2lnbih7fSwgaXRlbXMpOwoKICAgICAgICAgICAgICAgIG9iai5zeW5jKCk7CiAgICAgICAgICAgIH07CgogICAgICAgICAgICBvYmoucmVtb3ZlID0gZnVuY3Rpb24gKG5hbWUpIHsKICAgICAgICAgICAgICAgIGRlbGV0ZSBvYmouaXRlbXNbbmFtZV07CgogICAgICAgICAgICAgICAgb2JqLnN5bmMoKTsKICAgICAgICAgICAgfTsKCiAgICAgICAgICAgIG9iai5yZW1vdmVCYXRjaCA9IGZ1bmN0aW9uIChuYW1lcykgewogICAgICAgICAgICAgICAgbmFtZXMuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkgewogICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBvYmouaXRlbXNbbmFtZV07CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICBvYmouc3luYygpOwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgb2JqLnJlbW92ZUFsbCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIG9iai5pdGVtcyA9IHt9OwoKICAgICAgICAgICAgICAgIG9iai5nZXREYW8oKS5yZW1vdmUob2JqLmdldFNjb3BlKCkpOwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgb2JqLmluaXQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB2YXIgaXRlbXMgPSBvYmouZ2V0RGFvKCkuZ2V0KG9iai5nZXRTY29wZSgpKTsKICAgICAgICAgICAgICAgIGlmIChpdGVtcyBpbnN0YW5jZW9mIE9iamVjdCkgewogICAgICAgICAgICAgICAgICAgIG9iai5pdGVtcyA9IGl0ZW1zOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwoKICAgICAgICAgICAgb2JqLnN5bmMgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBvYmouZ2V0RGFvKCkuc2V0KG9iai5nZXRTY29wZSgpLCBvYmouaXRlbXMpOwogICAgICAgICAgICB9OwoKICAgICAgICAgICAgb2JqLmdldERhbyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBkYW87CiAgICAgICAgICAgIH07CgogICAgICAgICAgICBvYmouZ2V0U2NvcGUgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gc2NvcGU7CiAgICAgICAgICAgIH07CgogICAgICAgICAgICByZXR1cm4gb2JqLmluaXQoKSwgb2JqOwogICAgICAgIH07CiAgICB9KTsKCiAgICBjb250YWluZXIuZGVmaW5lKCJjb25maWciLCBbImZhY3RvcnkiXSwgZnVuY3Rpb24gKGZhY3RvcnkpIHsKICAgICAgICB2YXIgb2JqID0ge307CgogICAgICAgIG9iai5nZXRDb25maWcgPSBmdW5jdGlvbiAobmFtZSkgewogICAgICAgICAgICByZXR1cm4gb2JqLmdldERhbygpLmdldChuYW1lKTsKICAgICAgICB9OwoKICAgICAgICBvYmouc2V0Q29uZmlnID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7CiAgICAgICAgICAgIG9iai5nZXREYW8oKS5zZXQobmFtZSwgdmFsdWUpOwogICAgICAgIH07CgogICAgICAgIG9iai5nZXRBbGwgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiBvYmouZ2V0RGFvKCkuZ2V0QWxsKCk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmdldERhbyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIGZhY3RvcnkuZ2V0Q29uZmlnRGFvKCk7CiAgICAgICAgfTsKCiAgICAgICAgcmV0dXJuIG9iajsKICAgIH0pOwoKICAgIGNvbnRhaW5lci5kZWZpbmUoInN0b3JhZ2UiLCBbImZhY3RvcnkiXSwgZnVuY3Rpb24gKGZhY3RvcnkpIHsKICAgICAgICB2YXIgb2JqID0ge307CgogICAgICAgIG9iai5nZXRWYWx1ZSA9IGZ1bmN0aW9uIChuYW1lKSB7CiAgICAgICAgICAgIHJldHVybiBvYmouZ2V0RGFvKCkuZ2V0KG5hbWUpOwogICAgICAgIH07CgogICAgICAgIG9iai5zZXRWYWx1ZSA9IGZ1bmN0aW9uIChuYW1lLCB2YWx1ZSkgewogICAgICAgICAgICBvYmouZ2V0RGFvKCkuc2V0KG5hbWUsIHZhbHVlKTsKICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0QWxsID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gb2JqLmdldERhbygpLmdldEFsbCgpOwogICAgICAgIH07CgogICAgICAgIG9iai5nZXREYW8gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiBmYWN0b3J5LmdldFN0b3JhZ2VEYW8oKTsKICAgICAgICB9OwoKICAgICAgICByZXR1cm4gb2JqOwogICAgfSk7CgogICAgY29udGFpbmVyLmRlZmluZSgib3B0aW9uIiwgWyJjb25maWciLCAiY29uc3RhbnQiXSwgZnVuY3Rpb24gKGNvbmZpZywgY29uc3RhbnQpIHsKICAgICAgICB2YXIgb2JqID0gewogICAgICAgICAgICBuYW1lOiAib3B0aW9uIiwKICAgICAgICAgICAgY29uc3RhbnQ6IGNvbnN0YW50Lm9wdGlvbgogICAgICAgIH07CgogICAgICAgIG9iai5pc09wdGlvbkFjdGl2ZSA9IGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgIHZhciBuYW1lID0gaXRlbS5uYW1lOwogICAgICAgICAgICB2YXIgb3B0aW9uID0gb2JqLmdldE9wdGlvbigpOwogICAgICAgICAgICByZXR1cm4gb3B0aW9uLmluZGV4T2YobmFtZSkgPj0gMCA/IHRydWUgOiBmYWxzZTsKICAgICAgICB9OwoKICAgICAgICBvYmouc2V0T3B0aW9uQWN0aXZlID0gZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgdmFyIG5hbWUgPSBpdGVtLm5hbWU7CiAgICAgICAgICAgIHZhciBvcHRpb24gPSBvYmouZ2V0T3B0aW9uKCk7CiAgICAgICAgICAgIGlmIChvcHRpb24uaW5kZXhPZihuYW1lKSA8IDApIHsKICAgICAgICAgICAgICAgIG9wdGlvbi5wdXNoKG5hbWUpOwogICAgICAgICAgICAgICAgb2JqLnNldE9wdGlvbihvcHRpb24pOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnNldE9wdGlvblVuQWN0aXZlID0gZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgdmFyIG5hbWUgPSBpdGVtLm5hbWU7CiAgICAgICAgICAgIHZhciBvcHRpb24gPSBvYmouZ2V0T3B0aW9uKCk7CiAgICAgICAgICAgIHZhciBpbmRleCA9IG9wdGlvbi5pbmRleE9mKG5hbWUpOwogICAgICAgICAgICBpZiAoaW5kZXggPj0gMCkgewogICAgICAgICAgICAgICAgZGVsZXRlIG9wdGlvbltpbmRleF07CiAgICAgICAgICAgICAgICBvYmouc2V0T3B0aW9uKG9wdGlvbik7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0T3B0aW9uID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgb3B0aW9uID0gW107CiAgICAgICAgICAgIHZhciBvcHRpb25MaXN0ID0gb2JqLmdldE9wdGlvbkxpc3QoKTsKICAgICAgICAgICAgT2JqZWN0LnZhbHVlcyhvYmouY29uc3RhbnQpLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICAgIHZhciBuYW1lID0gaXRlbS5uYW1lOwogICAgICAgICAgICAgICAgaWYgKG9wdGlvbkxpc3QuaGFzT3duUHJvcGVydHkobmFtZSkpIHsKICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9uTGlzdFtuYW1lXSAhPSAibm8iKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbi5wdXNoKG5hbWUpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKGl0ZW0udmFsdWUgIT0gIm5vIikgewogICAgICAgICAgICAgICAgICAgIG9wdGlvbi5wdXNoKG5hbWUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuIG9wdGlvbjsKICAgICAgICB9OwoKICAgICAgICBvYmouc2V0T3B0aW9uID0gZnVuY3Rpb24gKG9wdGlvbikgewogICAgICAgICAgICB2YXIgb3B0aW9uTGlzdCA9IHt9OwogICAgICAgICAgICBPYmplY3QudmFsdWVzKG9iai5jb25zdGFudCkuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICAgICAgdmFyIG5hbWUgPSBpdGVtLm5hbWU7CiAgICAgICAgICAgICAgICBpZiAob3B0aW9uLmluZGV4T2YobmFtZSkgPj0gMCkgewogICAgICAgICAgICAgICAgICAgIG9wdGlvbkxpc3RbbmFtZV0gPSAieWVzIjsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgb3B0aW9uTGlzdFtuYW1lXSA9ICJubyI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBvYmouc2V0T3B0aW9uTGlzdChvcHRpb25MaXN0KTsKICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0T3B0aW9uTGlzdCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIG9wdGlvbkxpc3QgPSBjb25maWcuZ2V0Q29uZmlnKG9iai5uYW1lKTsKICAgICAgICAgICAgcmV0dXJuIG9wdGlvbkxpc3QgPyBvcHRpb25MaXN0IDoge307CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnNldE9wdGlvbkxpc3QgPSBmdW5jdGlvbiAob3B0aW9uTGlzdCkgewogICAgICAgICAgICBjb25maWcuc2V0Q29uZmlnKG9iai5uYW1lLCBvcHRpb25MaXN0KTsKICAgICAgICB9OwoKICAgICAgICByZXR1cm4gb2JqOwogICAgfSk7CgogICAgY29udGFpbmVyLmRlZmluZSgibWFuaWZlc3QiLCBbXSwgZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBvYmogPSB7CiAgICAgICAgICAgIG1hbmlmZXN0OiBtYW5pZmVzdAogICAgICAgIH07CgogICAgICAgIG9iai5nZXRJdGVtID0gZnVuY3Rpb24gKG5hbWUpIHsKICAgICAgICAgICAgcmV0dXJuIG9iai5tYW5pZmVzdFtuYW1lXTsKICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0TWFuaWZlc3QgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiBvYmoubWFuaWZlc3Q7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmdldE5hbWUgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiBvYmouZ2V0SXRlbSgibmFtZSIpOwogICAgICAgIH07CgogICAgICAgIG9iai5nZXRBcHBOYW1lID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gb2JqLmdldEl0ZW0oImFwcF9uYW1lIik7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmdldFVybCA9IGZ1bmN0aW9uIChuYW1lKSB7CiAgICAgICAgICAgIHZhciB1cmxzID0gb2JqLmdldEl0ZW0oInVybHMiKTsKICAgICAgICAgICAgKHVybHMgaW5zdGFuY2VvZiBPYmplY3QpIHx8ICh1cmxzID0ge30pOwogICAgICAgICAgICByZXR1cm4gdXJsc1tuYW1lXTsKICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0QXBpID0gZnVuY3Rpb24gKG5hbWUpIHsKICAgICAgICAgICAgdmFyIGFwaXMgPSBvYmouZ2V0SXRlbSgiYXBpcyIpOwogICAgICAgICAgICAoYXBpcyBpbnN0YW5jZW9mIE9iamVjdCkgfHwgKGFwaXMgPSB7fSk7CiAgICAgICAgICAgIHJldHVybiBhcGlzW25hbWVdOwogICAgICAgIH07CgogICAgICAgIG9iai5nZXRPcHRpb25zUGFnZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgaWYgKEdNX2luZm8uc2NyaXB0Lm9wdGlvblVybCkgewogICAgICAgICAgICAgICAgcmV0dXJuIEdNX2luZm8uc2NyaXB0Lm9wdGlvblVybDsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiBvYmouZ2V0SXRlbSgib3B0aW9uc19wYWdlIik7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICByZXR1cm4gb2JqOwogICAgfSk7CgogICAgY29udGFpbmVyLmRlZmluZSgiZW52IiwgWyJjb25maWciLCAibWFuaWZlc3QiXSwgZnVuY3Rpb24gKGNvbmZpZywgbWFuaWZlc3QpIHsKICAgICAgICB2YXIgb2JqID0gewogICAgICAgICAgICBtb2RlczogewogICAgICAgICAgICAgICAgQURET046ICJhZGRvbiIsCiAgICAgICAgICAgICAgICBTQ1JJUFQ6ICJzY3JpcHQiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGJyb3dzZXJzOiB7CiAgICAgICAgICAgICAgICBGSVJFRk9YOiAiZmlyZWZveCIsCiAgICAgICAgICAgICAgICBFREc6ICJlZGciLAogICAgICAgICAgICAgICAgRURHRTogImVkZ2UiLAogICAgICAgICAgICAgICAgQkFJRFU6ICJiYWlkdSIsCiAgICAgICAgICAgICAgICBMSUVCQU86ICJsaWViYW8iLAogICAgICAgICAgICAgICAgVUM6ICJ1YyIsCiAgICAgICAgICAgICAgICBRUTogInFxIiwKICAgICAgICAgICAgICAgIFNPR09VOiAic29nb3UiLAogICAgICAgICAgICAgICAgT1BFUkE6ICJvcGVyYSIsCiAgICAgICAgICAgICAgICBNQVhUSE9OOiAibWF4dGhvbiIsCiAgICAgICAgICAgICAgICBJRTIzNDU6ICIyMzQ1IiwKICAgICAgICAgICAgICAgIFNFMzYwOiAiMzYwIiwKICAgICAgICAgICAgICAgIENIUk9NRTogImNocm9tZSIsCiAgICAgICAgICAgICAgICBTQUZJUkk6ICJzYWZhcmkiLAogICAgICAgICAgICAgICAgT1RIRVI6ICJvdGhlciIKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIG9iai5nZXROYW1lID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gbWFuaWZlc3QuZ2V0TmFtZSgpOwogICAgICAgIH07CgogICAgICAgIG9iai5nZXRNb2RlID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICBpZiAoR01faW5mby5tb2RlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gR01faW5mby5tb2RlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIG9iai5tb2Rlcy5TQ1JJUFQ7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0QWlkID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICBpZiAoR01faW5mby5zY3JpcHRIYW5kbGVyKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gR01faW5mby5zY3JpcHRIYW5kbGVyLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gInVua25vd24iOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmdldFVpZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIHVpZCA9IGNvbmZpZy5nZXRDb25maWcoInVpZCIpOwogICAgICAgICAgICBpZiAoIXVpZCkgewogICAgICAgICAgICAgICAgdWlkID0gb2JqLnJhbmRTdHJpbmcoMzIpOwogICAgICAgICAgICAgICAgY29uZmlnLnNldENvbmZpZygidWlkIiwgdWlkKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gdWlkOwogICAgICAgIH07CgogICAgICAgIG9iai5nZXRCcm93c2VyID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICBpZiAoIW9iai5fYnJvd3NlcikgewogICAgICAgICAgICAgICAgb2JqLl9icm93c2VyID0gb2JqLm1hdGNoQnJvd3NlclR5cGUobmF2aWdhdG9yLnVzZXJBZ2VudCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIG9iai5fYnJvd3NlcjsKICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0VmVyc2lvbiA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIEdNX2luZm8uc2NyaXB0LnZlcnNpb247CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmdldEVkaXRpb24gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiBHTV9pbmZvLnZlcnNpb247CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmdldEluZm8gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBtb2RlOiBvYmouZ2V0TW9kZSgpLAogICAgICAgICAgICAgICAgYWlkOiBvYmouZ2V0QWlkKCksCiAgICAgICAgICAgICAgICB1aWQ6IG9iai5nZXRVaWQoKSwKICAgICAgICAgICAgICAgIGJyb3dzZXI6IG9iai5nZXRCcm93c2VyKCksCiAgICAgICAgICAgICAgICB2ZXJzaW9uOiBvYmouZ2V0VmVyc2lvbigpLAogICAgICAgICAgICAgICAgZWRpdGlvbjogb2JqLmdldEVkaXRpb24oKQogICAgICAgICAgICB9OwogICAgICAgIH07CgogICAgICAgIG9iai5tYXRjaEJyb3dzZXJUeXBlID0gZnVuY3Rpb24gKHVzZXJBZ2VudCkgewogICAgICAgICAgICB2YXIgYnJvd3NlciA9IG9iai5icm93c2Vycy5PVEhFUjsKICAgICAgICAgICAgdXNlckFnZW50ID0gdXNlckFnZW50LnRvTG93ZXJDYXNlKCk7CiAgICAgICAgICAgIGlmICh1c2VyQWdlbnQubWF0Y2goL2ZpcmVmb3gvKSAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICBicm93c2VyID0gb2JqLmJyb3dzZXJzLkZJUkVGT1g7CiAgICAgICAgICAgIH0gZWxzZSBpZiAodXNlckFnZW50Lm1hdGNoKC9lZGdlLykgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgYnJvd3NlciA9IG9iai5icm93c2Vycy5FREdFOwogICAgICAgICAgICB9IGVsc2UgaWYgKHVzZXJBZ2VudC5tYXRjaCgvZWRnLykgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgYnJvd3NlciA9IG9iai5icm93c2Vycy5FREc7CiAgICAgICAgICAgIH0gZWxzZSBpZiAodXNlckFnZW50Lm1hdGNoKC9iaWR1YnJvd3Nlci8pICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIGJyb3dzZXIgPSBvYmouYnJvd3NlcnMuQkFJRFU7CiAgICAgICAgICAgIH0gZWxzZSBpZiAodXNlckFnZW50Lm1hdGNoKC9sYmJyb3dzZXIvKSAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICBicm93c2VyID0gb2JqLmJyb3dzZXJzLkxJRUJBTzsKICAgICAgICAgICAgfSBlbHNlIGlmICh1c2VyQWdlbnQubWF0Y2goL3Vicm93c2VyLykgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgYnJvd3NlciA9IG9iai5icm93c2Vycy5VQzsKICAgICAgICAgICAgfSBlbHNlIGlmICh1c2VyQWdlbnQubWF0Y2goL3FxYnJvd3NlLykgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgYnJvd3NlciA9IG9iai5icm93c2Vycy5RUTsKICAgICAgICAgICAgfSBlbHNlIGlmICh1c2VyQWdlbnQubWF0Y2goL21ldGFzci8pICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIGJyb3dzZXIgPSBvYmouYnJvd3NlcnMuU09HT1U7CiAgICAgICAgICAgIH0gZWxzZSBpZiAodXNlckFnZW50Lm1hdGNoKC9vcHIvKSAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICBicm93c2VyID0gb2JqLmJyb3dzZXJzLk9QRVJBOwogICAgICAgICAgICB9IGVsc2UgaWYgKHVzZXJBZ2VudC5tYXRjaCgvbWF4dGhvbi8pICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIGJyb3dzZXIgPSBvYmouYnJvd3NlcnMuTUFYVEhPTjsKICAgICAgICAgICAgfSBlbHNlIGlmICh1c2VyQWdlbnQubWF0Y2goLzIzNDVleHBsb3Jlci8pICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIGJyb3dzZXIgPSBvYmouYnJvd3NlcnMuSUUyMzQ1OwogICAgICAgICAgICB9IGVsc2UgaWYgKHVzZXJBZ2VudC5tYXRjaCgvY2hyb21lLykgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgaWYgKG5hdmlnYXRvci5taW1lVHlwZXMubGVuZ3RoID4gMTApIHsKICAgICAgICAgICAgICAgICAgICBicm93c2VyID0gb2JqLmJyb3dzZXJzLlNFMzYwOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBicm93c2VyID0gb2JqLmJyb3dzZXJzLkNIUk9NRTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIGlmICh1c2VyQWdlbnQubWF0Y2goL3NhZmFyaS8pICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIGJyb3dzZXIgPSBvYmouYnJvd3NlcnMuU0FGSVJJOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBicm93c2VyOwogICAgICAgIH07CgogICAgICAgIG9iai5yYW5kU3RyaW5nID0gZnVuY3Rpb24gKGxlbmd0aCkgewogICAgICAgICAgICB2YXIgcG9zc2libGUgPSAiYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5IjsKICAgICAgICAgICAgdmFyIHRleHQgPSAiIjsKICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgdGV4dCArPSBwb3NzaWJsZS5jaGFyQXQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcG9zc2libGUubGVuZ3RoKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIHRleHQ7CiAgICAgICAgfTsKCiAgICAgICAgcmV0dXJuIG9iajsKICAgIH0pOwoKICAgIGNvbnRhaW5lci5kZWZpbmUoImh0dHAiLCBbXSwgZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBvYmogPSB7fTsKCiAgICAgICAgb2JqLmFqYXggPSBmdW5jdGlvbiAob3B0aW9uKSB7CiAgICAgICAgICAgIHZhciBkZXRhaWxzID0gewogICAgICAgICAgICAgICAgbWV0aG9kOiBvcHRpb24udHlwZSwKICAgICAgICAgICAgICAgIHVybDogb3B0aW9uLnVybCwKICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogb3B0aW9uLmRhdGFUeXBlLAogICAgICAgICAgICAgICAgb25sb2FkOiBmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXN1bHQuc3RhdHVzIHx8IHBhcnNlSW50KHJlc3VsdC5zdGF0dXMgLyAxMDApID09IDIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uLnN1Y2Nlc3MgJiYgb3B0aW9uLnN1Y2Nlc3MocmVzdWx0LnJlc3BvbnNlKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbi5lcnJvciAmJiBvcHRpb24uZXJyb3IoIiIpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBvbmVycm9yOiBmdW5jdGlvbiAocmVzdWx0KSB7CiAgICAgICAgICAgICAgICAgICAgb3B0aW9uLmVycm9yICYmIG9wdGlvbi5lcnJvcihyZXN1bHQuZXJyb3IpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwoKICAgICAgICAgICAgLy8g5o+Q5Lqk5pWw5o2uCiAgICAgICAgICAgIGlmIChvcHRpb24uZGF0YSBpbnN0YW5jZW9mIE9iamVjdCkgewogICAgICAgICAgICAgICAgaWYgKG9wdGlvbi5kYXRhIGluc3RhbmNlb2YgRm9ybURhdGEpIHsKICAgICAgICAgICAgICAgICAgICBkZXRhaWxzLmRhdGEgPSBvcHRpb24uZGF0YTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIHZhciBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpOwogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgaW4gb3B0aW9uLmRhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKGksIG9wdGlvbi5kYXRhW2ldKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZGV0YWlscy5kYXRhID0gZm9ybURhdGE7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIOiHquWumuS5ieWktAogICAgICAgICAgICBpZiAob3B0aW9uLmhlYWRlcnMpIHsKICAgICAgICAgICAgICAgIGRldGFpbHMuaGVhZGVycyA9IG9wdGlvbi5oZWFkZXJzOwogICAgICAgICAgICB9CgogICAgICAgICAgICAvLyDotoXml7YKICAgICAgICAgICAgaWYgKG9wdGlvbi50aW1lb3V0KSB7CiAgICAgICAgICAgICAgICBkZXRhaWxzLnRpbWVvdXQgPSBvcHRpb24udGltZW91dDsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgR01feG1saHR0cFJlcXVlc3QoZGV0YWlscyk7CiAgICAgICAgfTsKCiAgICAgICAgcmV0dXJuIG9iajsKICAgIH0pOwoKICAgIGNvbnRhaW5lci5kZWZpbmUoInJvdXRlciIsIFtdLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgdmFyIG9iaiA9IHt9OwoKICAgICAgICBvYmouZ2V0VXJsID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gbG9jYXRpb24uaHJlZjsKICAgICAgICB9OwoKICAgICAgICBvYmouZ29VcmwgPSBmdW5jdGlvbiAodXJsKSB7CiAgICAgICAgICAgIGxvY2F0aW9uLmhyZWYgPSB1cmw7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLm9wZW5VcmwgPSBmdW5jdGlvbiAodXJsKSB7CiAgICAgICAgICAgIHdpbmRvdy5vcGVuKHVybCk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLm9wZW5UYWIgPSBmdW5jdGlvbiAodXJsLCBhY3RpdmUpIHsKICAgICAgICAgICAgR01fb3BlbkluVGFiKHVybCwgIWFjdGl2ZSk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmp1bXBMaW5rID0gZnVuY3Rpb24gKGp1bXBVcmwsIGp1bXBNb2RlKSB7CiAgICAgICAgICAgIHN3aXRjaCAoanVtcE1vZGUpIHsKICAgICAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICAgICAgICAvLyBzZWxmCiAgICAgICAgICAgICAgICAgICAgb2JqLmdvVXJsKGp1bXBVcmwpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgICAgIC8vIG5ldwogICAgICAgICAgICAgICAgICAgIG9iai5vcGVuVXJsKGp1bXBVcmwpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgICAgIC8vIG5ldyAmIG5vdCBhY3RpdmUKICAgICAgICAgICAgICAgICAgICBvYmoub3BlblRhYihqdW1wVXJsLCBmYWxzZSk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgICAgICAgLy8gbmV3ICYgYWN0aXZlCiAgICAgICAgICAgICAgICAgICAgb2JqLm9wZW5UYWIoanVtcFVybCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0VXJsUGFyYW0gPSBmdW5jdGlvbiAobmFtZSkgewogICAgICAgICAgICB2YXIgcGFyYW0gPSBvYmoucGFyc2VVcmxQYXJhbShvYmouZ2V0VXJsKCkpOwogICAgICAgICAgICBpZiAobmFtZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIHBhcmFtLmhhc093blByb3BlcnR5KG5hbWUpID8gcGFyYW1bbmFtZV0gOiBudWxsOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIHBhcmFtOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnBhcnNlVXJsUGFyYW0gPSBmdW5jdGlvbiAodXJsKSB7CiAgICAgICAgICAgIGlmICh1cmwuaW5kZXhPZigiPyIpKSB7CiAgICAgICAgICAgICAgICB1cmwgPSB1cmwuc3BsaXQoIj8iKVsxXTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgcmVnID0gLyhbXj0mXHNdKylbPVxzXSooW149JlxzXSopL2c7CiAgICAgICAgICAgIHZhciBvYmogPSB7fTsKICAgICAgICAgICAgd2hpbGUgKHJlZy5leGVjKHVybCkpIHsKICAgICAgICAgICAgICAgIG9ialtSZWdFeHAuJDFdID0gUmVnRXhwLiQyOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBvYmo7CiAgICAgICAgfTsKCiAgICAgICAgcmV0dXJuIG9iajsKICAgIH0pOwoKICAgIGNvbnRhaW5lci5kZWZpbmUoImxvZ2dlciIsIFsiZW52IiwgIm1hbmlmZXN0Il0sIGZ1bmN0aW9uIChlbnYsIG1hbmlmZXN0KSB7CiAgICAgICAgdmFyIG9iaiA9IHsKICAgICAgICAgICAgY29uc3RhbnQ6IHsKICAgICAgICAgICAgICAgIERFQlVHOiAwLAogICAgICAgICAgICAgICAgSU5GTzogMSwKICAgICAgICAgICAgICAgIFdBUk46IDIsCiAgICAgICAgICAgICAgICBFUlJPUjogMywKICAgICAgICAgICAgICAgIE5PTkU6IDQKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIG9iai5kZWJ1ZyA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7CiAgICAgICAgICAgIG9iai5sb2cobWVzc2FnZSwgb2JqLmNvbnN0YW50LkRFQlVHKTsKICAgICAgICB9OwoKICAgICAgICBvYmouaW5mbyA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7CiAgICAgICAgICAgIG9iai5sb2cobWVzc2FnZSwgb2JqLmNvbnN0YW50LklORk8pOwogICAgICAgIH07CgogICAgICAgIG9iai53YXJuID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHsKICAgICAgICAgICAgb2JqLmxvZyhtZXNzYWdlLCBvYmouY29uc3RhbnQuV0FSTik7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmVycm9yID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHsKICAgICAgICAgICAgb2JqLmxvZyhtZXNzYWdlLCBvYmouY29uc3RhbnQuRVJST1IpOwogICAgICAgIH07CgogICAgICAgIG9iai5sb2cgPSBmdW5jdGlvbiAobWVzc2FnZSwgbGV2ZWwpIHsKICAgICAgICAgICAgaWYgKGxldmVsIDwgbWFuaWZlc3QuZ2V0SXRlbSgibG9nZ2VyX2xldmVsIikpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgY29uc29sZS5ncm91cCgiWyIgKyBlbnYuZ2V0TmFtZSgpICsgIl0iICsgZW52LmdldE1vZGUoKSk7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UpOwogICAgICAgICAgICBjb25zb2xlLmdyb3VwRW5kKCk7CiAgICAgICAgfTsKCiAgICAgICAgcmV0dXJuIG9iajsKICAgIH0pOwoKICAgIGNvbnRhaW5lci5kZWZpbmUoIm1ldGEiLCBbImVudiIsICIkIl0sIGZ1bmN0aW9uIChlbnYsICQpIHsKICAgICAgICB2YXIgb2JqID0ge307CgogICAgICAgIG9iai5leGlzdE1ldGEgPSBmdW5jdGlvbiAobmFtZSkgewogICAgICAgICAgICBuYW1lID0gb2JqLnByb2Nlc3NOYW1lKG5hbWUpOwogICAgICAgICAgICBpZiAoJCgibWV0YVtuYW1lPSciICsgbmFtZSArICInXSIpLmxlbmd0aCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBvYmouYXBwZW5kTWV0YSA9IGZ1bmN0aW9uIChuYW1lLCBjb250ZW50KSB7CiAgICAgICAgICAgIG5hbWUgPSBvYmoucHJvY2Vzc05hbWUobmFtZSk7CiAgICAgICAgICAgIGNvbnRlbnQgfHwgKGNvbnRlbnQgPSAib24iKTsKICAgICAgICAgICAgJCgnPG1ldGEgbmFtZT0iJyArIG5hbWUgKyAnIiBjb250ZW50PSJvbiI+JykuYXBwZW5kVG8oJCgiaGVhZCIpKTsKICAgICAgICB9OwoKICAgICAgICBvYmoucHJvY2Vzc05hbWUgPSBmdW5jdGlvbiAobmFtZSkgewogICAgICAgICAgICByZXR1cm4gZW52LmdldE5hbWUoKSArICI6OiIgKyBuYW1lOwogICAgICAgIH07CgogICAgICAgIHJldHVybiBvYmo7CiAgICB9KTsKCiAgICBjb250YWluZXIuZGVmaW5lKCJ1bnNhZmVXaW5kb3ciLCBbXSwgZnVuY3Rpb24gKCkgewogICAgICAgIGlmICh0eXBlb2YgdW5zYWZlV2luZG93ID09ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgICAgIHJldHVybiB3aW5kb3c7CiAgICAgICAgfQogICAgICAgIGVsc2UgewogICAgICAgICAgICByZXR1cm4gdW5zYWZlV2luZG93OwogICAgICAgIH0KICAgIH0pOwoKICAgIGNvbnRhaW5lci5kZWZpbmUoInN2Z0NyeXB0IiwgWyJTbmFwIl0sIGZ1bmN0aW9uIChTbmFwKSB7CiAgICAgICAgdmFyIG9iaiA9IHt9OwoKICAgICAgICBvYmouZ2V0UmVxRGF0YSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIHJlcVRpbWUgPSBNYXRoLnJvdW5kKG5ldyBEYXRlKCkuZ2V0VGltZSgpIC8gMTAwMCk7CiAgICAgICAgICAgIHZhciByZXFQb2ludCA9IG9iai5nZXRTdHJQb2ludCgidGltZXN0YW1wOiIgKyByZXFUaW1lKTsKICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgIHJlcV90aW1lOiByZXFUaW1lLAogICAgICAgICAgICAgICAgcmVxX3BvaW50OiByZXFQb2ludAogICAgICAgICAgICB9OwogICAgICAgIH07CgogICAgICAgIG9iai5nZXRTdHJQb2ludCA9IGZ1bmN0aW9uIChzdHIpIHsKICAgICAgICAgICAgaWYgKHN0ci5sZW5ndGggPCAyKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gIjA6MCI7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBwYXRoID0gIiI7CiAgICAgICAgICAgIHZhciBjdXJyZW50LCBsYXN0ID0gc3RyWzBdLmNoYXJDb2RlQXQoKTsKICAgICAgICAgICAgdmFyIHN1bSA9IGxhc3Q7CiAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICBjdXJyZW50ID0gc3RyW2ldLmNoYXJDb2RlQXQoKTsKICAgICAgICAgICAgICAgIGlmIChpID09IDEpIHsKICAgICAgICAgICAgICAgICAgICBwYXRoID0gcGF0aCArICJNIjsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgcGF0aCA9IHBhdGggKyAiIEwiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgcGF0aCA9IHBhdGggKyBjdXJyZW50ICsgIiAiICsgbGFzdDsKICAgICAgICAgICAgICAgIGxhc3QgPSBjdXJyZW50OwogICAgICAgICAgICAgICAgc3VtID0gc3VtICsgY3VycmVudDsKICAgICAgICAgICAgfQogICAgICAgICAgICBwYXRoID0gcGF0aCArICIgWiI7CiAgICAgICAgICAgIHZhciBpbmRleCA9IHN1bSAlIHN0ci5sZW5ndGg7CiAgICAgICAgICAgIHZhciBkYXRhID0gU25hcC5wYXRoLmdldFBvaW50QXRMZW5ndGgocGF0aCwgc3RyW2luZGV4XS5jaGFyQ29kZUF0KCkpOwogICAgICAgICAgICByZXR1cm4gZGF0YS5tLnggKyAiOiIgKyBkYXRhLm4ueTsKICAgICAgICB9OwoKICAgICAgICByZXR1cm4gb2JqOwogICAgfSk7CgogICAgY29udGFpbmVyLmRlZmluZSgiY2FsZW5kYXIiLCBbXSwgZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBvYmogPSB7fTsKCiAgICAgICAgb2JqLmdldFRpbWUgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiAobmV3IERhdGUoKSkuZ2V0VGltZSgpOwogICAgICAgIH07CgogICAgICAgIG9iai5mb3JtYXRUaW1lID0gZnVuY3Rpb24gKGZvcm1hdCwgdGltZXN0YW1wKSB7CiAgICAgICAgICAgIGZvcm1hdCB8fCAoZm9ybWF0ID0gIlktbS1kIEg6aTpzIik7CiAgICAgICAgICAgIHRpbWVzdGFtcCB8fCAodGltZXN0YW1wID0gb2JqLmdldFRpbWUoKSk7CiAgICAgICAgICAgIHZhciBkYXRlID0gbmV3IERhdGUodGltZXN0YW1wKTsKICAgICAgICAgICAgdmFyIHllYXIgPSAxOTAwICsgZGF0ZS5nZXRZZWFyKCk7CiAgICAgICAgICAgIHZhciBtb250aCA9ICIwIiArIChkYXRlLmdldE1vbnRoKCkgKyAxKTsKICAgICAgICAgICAgdmFyIGRheSA9ICIwIiArIGRhdGUuZ2V0RGF0ZSgpOwogICAgICAgICAgICB2YXIgaG91ciA9ICIwIiArIGRhdGUuZ2V0SG91cnMoKTsKICAgICAgICAgICAgdmFyIG1pbnV0ZSA9ICIwIiArIGRhdGUuZ2V0TWludXRlcygpOwogICAgICAgICAgICB2YXIgc2Vjb25kID0gIjAiICsgZGF0ZS5nZXRTZWNvbmRzKCk7CiAgICAgICAgICAgIHZhciB2YXJzID0gewogICAgICAgICAgICAgICAgIlkiOiB5ZWFyLAogICAgICAgICAgICAgICAgIm0iOiBtb250aC5zdWJzdHJpbmcobW9udGgubGVuZ3RoIC0gMiwgbW9udGgubGVuZ3RoKSwKICAgICAgICAgICAgICAgICJkIjogZGF5LnN1YnN0cmluZyhkYXkubGVuZ3RoIC0gMiwgZGF5Lmxlbmd0aCksCiAgICAgICAgICAgICAgICAiSCI6IGhvdXIuc3Vic3RyaW5nKGhvdXIubGVuZ3RoIC0gMiwgaG91ci5sZW5ndGgpLAogICAgICAgICAgICAgICAgImkiOiBtaW51dGUuc3Vic3RyaW5nKG1pbnV0ZS5sZW5ndGggLSAyLCBtaW51dGUubGVuZ3RoKSwKICAgICAgICAgICAgICAgICJzIjogc2Vjb25kLnN1YnN0cmluZyhzZWNvbmQubGVuZ3RoIC0gMiwgc2Vjb25kLmxlbmd0aCkKICAgICAgICAgICAgfTsKICAgICAgICAgICAgcmV0dXJuIG9iai5yZXBsYWNlVmFycyh2YXJzLCBmb3JtYXQpOwogICAgICAgIH07CgogICAgICAgIG9iai5yZXBsYWNlVmFycyA9IGZ1bmN0aW9uICh2YXJzLCB2YWx1ZSkgewogICAgICAgICAgICBPYmplY3Qua2V5cyh2YXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZShrZXksIHZhcnNba2V5XSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgICAgfTsKCiAgICAgICAgcmV0dXJuIG9iajsKICAgIH0pOwoKICAgIGNvbnRhaW5lci5kZWZpbmUoIm9uZURhdGEiLCBbImVudiIsICJodHRwIl0sIGZ1bmN0aW9uIChlbnYsIGh0dHApIHsKICAgICAgICB2YXIgb2JqID0ge307CgogICAgICAgIG9iai5yZXF1ZXN0T25lQXBpID0gZnVuY3Rpb24gKHVybCwgZGF0YSwgY2FsbGJhY2spIHsKICAgICAgICAgICAgaHR0cC5hamF4KHsKICAgICAgICAgICAgICAgIHR5cGU6ICJwb3N0IiwKICAgICAgICAgICAgICAgIHVybDogdXJsLAogICAgICAgICAgICAgICAgZGF0YVR5cGU6ICJqc29uIiwKICAgICAgICAgICAgICAgIGRhdGE6IE9iamVjdC5hc3NpZ24oZW52LmdldEluZm8oKSwgZGF0YSksCiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhyZXNwb25zZSk7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygiIik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgIHJldHVybiBvYmo7CiAgICB9KTsKCiAgICBjb250YWluZXIuZGVmaW5lKCIkZXh0ZW5kIiwgWyIkIiwgIkRPTVB1cmlmeSIsICJsb2dnZXIiXSwgZnVuY3Rpb24gKCQsIERPTVB1cmlmeSwgbG9nZ2VyKSB7CiAgICAgICAgdmFyIG9iaiA9IHt9OwoKICAgICAgICBvYmouaW5pdCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgaWYgKERPTVB1cmlmeSAmJiBET01QdXJpZnkgaW5zdGFuY2VvZiBGdW5jdGlvbikgewogICAgICAgICAgICAgICAgdmFyIGRvbVB1cmlmeSA9IERPTVB1cmlmeSh3aW5kb3cpOwogICAgICAgICAgICAgICAgJC5mbi5zYWZlSHRtbCA9IGZ1bmN0aW9uIChodG1sKSB7CiAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5odG1sKGRvbVB1cmlmeS5zYW5pdGl6ZShodG1sKSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKGVycik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICQuZm4uc2FmZUh0bWwgPSBmdW5jdGlvbiAoaHRtbCkgewogICAgICAgICAgICAgICAgICAgIHRoaXMuaHRtbChodG1sKTsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICByZXR1cm4gb2JqLmluaXQoKSwgb2JqOwogICAgfSk7CgogICAgY29udGFpbmVyLmRlZmluZSgiYXBwUnVubmVyIiwgWyJyb3V0ZXIiLCAibG9nZ2VyIiwgIm1ldGEiLCAiJCJdLCBmdW5jdGlvbiAocm91dGVyLCBsb2dnZXIsIG1ldGEsICQsIHJlcXVpcmUpIHsKICAgICAgICB2YXIgb2JqID0ge307CgogICAgICAgIG9iai5ydW4gPSBmdW5jdGlvbiAoYXBwTGlzdCkgewogICAgICAgICAgICB2YXIgbWV0YU5hbWUgPSAic3RhdHVzIjsKICAgICAgICAgICAgaWYgKG1ldGEuZXhpc3RNZXRhKG1ldGFOYW1lKSkgewogICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oInNldHVwIGFscmVhZHkiKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIC8vIOa3u+WKoG1ldGEKICAgICAgICAgICAgICAgIG1ldGEuYXBwZW5kTWV0YShtZXRhTmFtZSk7CgogICAgICAgICAgICAgICAgLy8g6L+Q6KGM5bqU55SoCiAgICAgICAgICAgICAgICAkKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICBvYmoucnVuQXBwTGlzdChhcHBMaXN0KTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnJ1bkFwcExpc3QgPSBmdW5jdGlvbiAoYXBwTGlzdCkgewogICAgICAgICAgICB2YXIgdXJsID0gcm91dGVyLmdldFVybCgpOwogICAgICAgICAgICBmb3IgKHZhciBpIGluIGFwcExpc3QpIHsKICAgICAgICAgICAgICAgIHZhciBhcHAgPSBhcHBMaXN0W2ldOwoKICAgICAgICAgICAgICAgIHZhciBtYXRjaCA9IG9iai5tYXRjaEFwcCh1cmwsIGFwcCk7CiAgICAgICAgICAgICAgICBpZiAobWF0Y2ggPT0gZmFsc2UpIHsKICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICBpZiAocmVxdWlyZShhcHAubmFtZSkucnVuKCkgPT0gdHJ1ZSkgewogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgb2JqLm1hdGNoQXBwID0gZnVuY3Rpb24gKHVybCwgYXBwKSB7CiAgICAgICAgICAgIHZhciBtYXRjaCA9IGZhbHNlOwogICAgICAgICAgICBhcHAubWF0Y2hzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICAgIGlmICh1cmwuaW5kZXhPZihpdGVtKSA+IDAgfHwgaXRlbSA9PSAiKiIpIHsKICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IHRydWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICByZXR1cm4gbWF0Y2g7CiAgICAgICAgfTsKCiAgICAgICAgcmV0dXJuIG9iajsKICAgIH0pOwoKICAgIC8qKiBjdXN0b20gKiovCiAgICBjb250YWluZXIuZGVmaW5lKCJmYWN0b3J5IiwgWyJnbURhbyIsICJTY29wZURhbyJdLCBmdW5jdGlvbiAoZ21EYW8sIFNjb3BlRGFvKSB7CiAgICAgICAgdmFyIG9iaiA9IHsKICAgICAgICAgICAgZGFvczoge30KICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0Q29uZmlnRGFvID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gb2JqLmdldERhbygiY29uZmlnIiwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIFNjb3BlRGFvKGdtRGFvLCAiJGNvbmZpZyIpOwogICAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0U3RvcmFnZURhbyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIG9iai5nZXREYW8oInN0b3JhZ2UiLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gU2NvcGVEYW8oZ21EYW8sICIkc3RvcmFnZSIpOwogICAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0RGFvID0gZnVuY3Rpb24gKGtleSwgY3JlYXRlRnVuYykgewogICAgICAgICAgICBpZiAoIW9iai5kYW9zLmhhc093blByb3BlcnR5KGtleSkpIHsKICAgICAgICAgICAgICAgIG9iai5kYW9zW2tleV0gPSBjcmVhdGVGdW5jKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIG9iai5kYW9zW2tleV07CiAgICAgICAgfTsKCiAgICAgICAgcmV0dXJuIG9iajsKICAgIH0pOwoKICAgIGNvbnRhaW5lci5kZWZpbmUoImNvbnN0YW50IiwgW10sIGZ1bmN0aW9uICgpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgICBzb3VyY2U6IHsKICAgICAgICAgICAgICAgIGJhaWR1OiAiYmFpZHUiLAogICAgICAgICAgICAgICAgd2VpeXVuOiAid2VpeXVuIiwKICAgICAgICAgICAgICAgIGxhbnpvdXM6ICJsYW56b3VzIiwKICAgICAgICAgICAgICAgIHR5MTg5OiAiMTg5IgogICAgICAgICAgICB9LAogICAgICAgICAgICBvcHRpb246IHsKICAgICAgICAgICAgICAgIGJhaWR1X3BhZ2VfaG9tZTogewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJiYWlkdV9wYWdlX2hvbWUiLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiAieWVzIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGJhaWR1X3BhZ2Vfc2hhcmU6IHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiAiYmFpZHVfcGFnZV9zaGFyZSIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJ5ZXMiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgYmFpZHVfcGFnZV92ZXJpZnk6IHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiAiYmFpZHVfcGFnZV92ZXJpZnkiLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiAieWVzIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGJhaWR1X3NoYXJlX3N0YXR1czogewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJiYWlkdV9zaGFyZV9zdGF0dXMiLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiAieWVzIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGJhaWR1X2N1c3RvbV9wYXNzd29yZDogewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJiYWlkdV9jdXN0b21fcGFzc3dvcmQiLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiAieWVzIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGJhaWR1X3Nob3dfb3JpZ2luOiB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogImJhaWR1X3Nob3dfb3JpZ2luIiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogInllcyIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBiYWlkdV9hdXRvX2p1bXA6IHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiAiYmFpZHVfYXV0b19qdW1wIiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIm5vIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHdlaXl1bl9wYWdlX2hvbWU6IHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiAid2VpeXVuX3BhZ2VfaG9tZSIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJ5ZXMiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgd2VpeXVuX3BhZ2Vfc2hhcmU6IHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiAid2VpeXVuX3BhZ2Vfc2hhcmUiLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiAieWVzIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHdlaXl1bl9wYWdlX3ZlcmlmeTogewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJ3ZWl5dW5fcGFnZV92ZXJpZnkiLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiAieWVzIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHdlaXl1bl9zaGFyZV9zdGF0dXM6IHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiAid2VpeXVuX3NoYXJlX3N0YXR1cyIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJ5ZXMiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgd2VpeXVuX2F1dG9fanVtcDogewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJ3ZWl5dW5fYXV0b19qdW1wIiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIm5vIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGxhbnpvdXNfcGFnZV92ZXJpZnk6IHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiAibGFuem91c19wYWdlX3ZlcmlmeSIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJ5ZXMiCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgbGFuem91c19zaGFyZV9zdGF0dXM6IHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiAibGFuem91c19zaGFyZV9zdGF0dXMiLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiAieWVzIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGxhbnpvdXNfYXV0b19qdW1wOiB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogImxhbnpvdXNfYXV0b19qdW1wIiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogIm5vIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHR5MTg5X3BhZ2VfaG9tZTogewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICIxODlfcGFnZV9ob21lIiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogInllcyIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB0eTE4OV9wYWdlX3NoYXJlOiB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogIjE4OV9wYWdlX3NoYXJlIiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogInllcyIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB0eTE4OV9wYWdlX3ZlcmlmeTogewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICIxODlfcGFnZV92ZXJpZnkiLAogICAgICAgICAgICAgICAgICAgIHZhbHVlOiAieWVzIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHR5MTg5X3NoYXJlX3N0YXR1czogewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICIxODlfc2hhcmVfc3RhdHVzIiwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogInllcyIKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB0eTE4OV9hdXRvX2p1bXA6IHsKICAgICAgICAgICAgICAgICAgICBuYW1lOiAiMTg5X2F1dG9fanVtcCIsCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICJubyIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH07CiAgICB9KTsKCiAgICBjb250YWluZXIuZGVmaW5lKCJhcGkiLCBbIm1hbmlmZXN0IiwgIm9uZURhdGEiLCAic3ZnQ3J5cHQiXSwgZnVuY3Rpb24gKG1hbmlmZXN0LCBvbmVEYXRhLCBzdmdDcnlwdCkgewogICAgICAgIHZhciBvYmogPSB7fTsKCiAgICAgICAgb2JqLnZlcnNpb25RdWVyeSA9IGZ1bmN0aW9uIChjYWxsYmFjaykgewogICAgICAgICAgICBvbmVEYXRhLnJlcXVlc3RPbmVBcGkobWFuaWZlc3QuZ2V0QXBpKCJ2ZXJzaW9uIiksIHt9LCBjYWxsYmFjayk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnF1ZXJ5U2hhcmVPcmlnaW4gPSBmdW5jdGlvbiAoc2hhcmVTb3VyY2UsIHNoYXJlSWQsIHNoYXJlTGluaywgY2FsbGJhY2spIHsKICAgICAgICAgICAgdmFyIGRhdGEgPSB7CiAgICAgICAgICAgICAgICBzaGFyZV9pZDogc2hhcmVJZCwKICAgICAgICAgICAgICAgIHNoYXJlX3NvdXJjZTogc2hhcmVTb3VyY2UsCiAgICAgICAgICAgICAgICBzaGFyZV9wb2ludDogc3ZnQ3J5cHQuZ2V0U3RyUG9pbnQoc2hhcmVJZCksCiAgICAgICAgICAgICAgICBzaGFyZV9saW5rOiBzaGFyZUxpbmsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgb25lRGF0YS5yZXF1ZXN0T25lQXBpKG1hbmlmZXN0LmdldEFwaSgib3JpZ2luIiksIGRhdGEsIGNhbGxiYWNrKTsKICAgICAgICB9OwoKICAgICAgICBvYmoucXVlcnlTaGFyZVB3ZCA9IGZ1bmN0aW9uIChzaGFyZVNvdXJjZSwgc2hhcmVJZCwgc2hhcmVMaW5rLCBjYWxsYmFjaykgewogICAgICAgICAgICB2YXIgZGF0YSA9IHsKICAgICAgICAgICAgICAgIHNoYXJlX2lkOiBzaGFyZUlkLAogICAgICAgICAgICAgICAgc2hhcmVfc291cmNlOiBzaGFyZVNvdXJjZSwKICAgICAgICAgICAgICAgIHNoYXJlX3BvaW50OiBzdmdDcnlwdC5nZXRTdHJQb2ludChzaGFyZUlkKSwKICAgICAgICAgICAgICAgIHNoYXJlX2xpbms6IHNoYXJlTGluawogICAgICAgICAgICB9OwogICAgICAgICAgICBvbmVEYXRhLnJlcXVlc3RPbmVBcGkobWFuaWZlc3QuZ2V0QXBpKCJxdWVyeSIpLCBkYXRhLCBjYWxsYmFjayk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnN0b3JlU2hhcmVQd2QgPSBmdW5jdGlvbiAoc2hhcmVJZCwgc2hhcmVQd2QsIHNoYXJlTGluaywgc2hhcmVTb3VyY2UsIGNhbGxiYWNrKSB7CiAgICAgICAgICAgIHZhciBkYXRhID0gewogICAgICAgICAgICAgICAgc2hhcmVfaWQ6IHNoYXJlSWQsCiAgICAgICAgICAgICAgICBzaGFyZV9wd2Q6IHNoYXJlUHdkLAogICAgICAgICAgICAgICAgc2hhcmVfc291cmNlOiBzaGFyZVNvdXJjZSwKICAgICAgICAgICAgICAgIHNoYXJlX3BvaW50OiBzdmdDcnlwdC5nZXRTdHJQb2ludChzaGFyZUlkKSwKICAgICAgICAgICAgICAgIHNoYXJlX2xpbms6IHNoYXJlTGluawogICAgICAgICAgICB9OwogICAgICAgICAgICBvbmVEYXRhLnJlcXVlc3RPbmVBcGkobWFuaWZlc3QuZ2V0QXBpKCJzdG9yZSIpLCBkYXRhLCBjYWxsYmFjayk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnF1ZXJ5U2hhcmVMaXN0ID0gZnVuY3Rpb24gKHNoYXJlU291cmNlLCBjYWxsYmFjaykgewogICAgICAgICAgICB2YXIgZGF0YSA9IHsKICAgICAgICAgICAgICAgIHNoYXJlX3NvdXJjZTogc2hhcmVTb3VyY2UKICAgICAgICAgICAgfTsKICAgICAgICAgICAgb25lRGF0YS5yZXF1ZXN0T25lQXBpKG1hbmlmZXN0LmdldEFwaSgibGlzdHMiKSwgZGF0YSwgY2FsbGJhY2spOwogICAgICAgIH07CgogICAgICAgIG9iai5kZWxldGVTaGFyZSA9IGZ1bmN0aW9uIChzaGFyZUlkLCBjYWxsYmFjaykgewogICAgICAgICAgICB2YXIgZGF0YSA9IHsKICAgICAgICAgICAgICAgIHNoYXJlX2lkOiBzaGFyZUlkLAogICAgICAgICAgICAgICAgc2hhcmVfcG9pbnQ6IHN2Z0NyeXB0LmdldFN0clBvaW50KHNoYXJlSWQpCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIG9uZURhdGEucmVxdWVzdE9uZUFwaShtYW5pZmVzdC5nZXRBcGkoImRlbGV0ZSIpLCBkYXRhLCBjYWxsYmFjayk7CiAgICAgICAgfTsKCiAgICAgICAgcmV0dXJuIG9iajsKICAgIH0pOwoKICAgIGNvbnRhaW5lci5kZWZpbmUoInNoYXJlTG9nIiwgWyJjb25maWciLCAiY2FsZW5kYXIiLCAiY29uc3RhbnQiLCAiYXBpIl0sIGZ1bmN0aW9uIChjb25maWcsIGNhbGVuZGFyLCBjb25zdGFudCwgYXBpKSB7CiAgICAgICAgdmFyIG9iaiA9IHsKICAgICAgICAgICAgbmFtZTogInNoYXJlX2xpc3QiLAogICAgICAgICAgICBtb2RlczogewogICAgICAgICAgICAgICAgTE9DQUw6ICJsb2NhbCIsCiAgICAgICAgICAgICAgICBPTkxJTkU6ICJvbmxpbmUiCiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0U2hhcmVNb2RlID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgc2hhcmVNb2RlID0gY29uZmlnLmdldENvbmZpZygic2hhcmVfbW9kZSIpOwogICAgICAgICAgICByZXR1cm4gc2hhcmVNb2RlID09IG9iai5tb2Rlcy5MT0NBTCA/IG9iai5tb2Rlcy5MT0NBTCA6IG9iai5tb2Rlcy5PTkxJTkU7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnNldFNoYXJlTW9kZSA9IGZ1bmN0aW9uIChzaGFyZU1vZGUpIHsKICAgICAgICAgICAgY29uZmlnLnNldENvbmZpZygic2hhcmVfbW9kZSIsIHNoYXJlTW9kZSA9PSBvYmoubW9kZXMuTE9DQUwgPyBvYmoubW9kZXMuTE9DQUwgOiBvYmoubW9kZXMuT05MSU5FKTsKICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0U2hhcmVMb2dMaXN0ID0gZnVuY3Rpb24gKHNoYXJlU291cmNlLCBjYWxsYmFjaykgewogICAgICAgICAgICBpZiAob2JqLmdldFNoYXJlTW9kZSgpID09IG9iai5tb2Rlcy5MT0NBTCkgewogICAgICAgICAgICAgICAgY2FsbGJhY2sob2JqLmdldExvY2FsU2hhcmVMb2dMaXN0KCkpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgb2JqLmdldE9ubGluZVNoYXJlTG9nTGlzdChzaGFyZVNvdXJjZSwgY2FsbGJhY2spOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmdldE9ubGluZVNoYXJlTG9nTGlzdCA9IGZ1bmN0aW9uIChzaGFyZVNvdXJjZSwgY2FsbGJhY2spIHsKICAgICAgICAgICAgYXBpLnF1ZXJ5U2hhcmVMaXN0KHNoYXJlU291cmNlLCBmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSBpbnN0YW5jZW9mIE9iamVjdCAmJiByZXNwb25zZS5jb2RlID09IDEpIHsKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhyZXNwb25zZS5kYXRhLmxpc3QpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soW10pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0TG9jYWxTaGFyZUxvZ0xpc3QgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBzaGFyZUxpc3QgPSBjb25maWcuZ2V0Q29uZmlnKG9iai5uYW1lKTsKICAgICAgICAgICAgcmV0dXJuIHNoYXJlTGlzdCA/IHNoYXJlTGlzdCA6IHt9OwogICAgICAgIH07CgogICAgICAgIG9iai5hZGRTaGFyZUxvZyA9IGZ1bmN0aW9uIChzaGFyZUlkLCBzaGFyZVB3ZCwgc2hhcmVMaW5rLCBzaGFyZVNvdXJjZSkgewogICAgICAgICAgICBhcGkuc3RvcmVTaGFyZVB3ZChzaGFyZUlkLCBzaGFyZVB3ZCwgc2hhcmVMaW5rLCBzaGFyZVNvdXJjZSk7CgogICAgICAgICAgICB2YXIgc2hhcmVMaXN0ID0gb2JqLmdldExvY2FsU2hhcmVMb2dMaXN0KCk7CiAgICAgICAgICAgIHNoYXJlTGlzdFtzaGFyZUlkXSA9IHsKICAgICAgICAgICAgICAgIHNoYXJlX2lkOiBzaGFyZUlkLAogICAgICAgICAgICAgICAgc2hhcmVfcHdkOiBzaGFyZVB3ZCwKICAgICAgICAgICAgICAgIHNoYXJlX2xpbms6IHNoYXJlTGluaywKICAgICAgICAgICAgICAgIHNoYXJlX3NvdXJjZTogc2hhcmVTb3VyY2UsCiAgICAgICAgICAgICAgICBzaGFyZV90aW1lOiAobmV3IERhdGUoKSkuZ2V0VGltZSgpCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGNvbmZpZy5zZXRDb25maWcob2JqLm5hbWUsIHNoYXJlTGlzdCk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnJlbW92ZVNoYXJlTG9nID0gZnVuY3Rpb24gKHNoYXJlSWQsIGNhbGxiYWNrKSB7CiAgICAgICAgICAgIHZhciBzaGFyZUxpc3QgPSBvYmouZ2V0TG9jYWxTaGFyZUxvZ0xpc3QoKTsKICAgICAgICAgICAgZGVsZXRlIHNoYXJlTGlzdFtzaGFyZUlkXTsKICAgICAgICAgICAgY29uZmlnLnNldENvbmZpZyhvYmoubmFtZSwgc2hhcmVMaXN0KTsKCiAgICAgICAgICAgIGFwaS5kZWxldGVTaGFyZShzaGFyZUlkLCBjYWxsYmFjayk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmJ1aWxkU2hhcmVMaW5rID0gZnVuY3Rpb24gKHNoYXJlSWQsIHNoYXJlU291cmNlLCBzaGFyZUxpbmspIHsKICAgICAgICAgICAgaWYgKHNoYXJlU291cmNlID09IGNvbnN0YW50LnNvdXJjZS5iYWlkdSkgewogICAgICAgICAgICAgICAgc2hhcmVMaW5rID0gImh0dHBzOi8vcGFuLmJhaWR1LmNvbS9zLzEiICsgc2hhcmVJZDsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIGlmIChzaGFyZVNvdXJjZSA9PSBjb25zdGFudC5zb3VyY2UuYmFpZHUpIHsKICAgICAgICAgICAgICAgIHNoYXJlTGluayA9ICJodHRwczovL3NoYXJlLndlaXl1bi5jb20vIiArIHNoYXJlSWQ7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2hhcmVTb3VyY2UgPT0gY29uc3RhbnQuc291cmNlLmJhaWR1KSB7CiAgICAgICAgICAgICAgICBzaGFyZUxpbmsgPSAiaHR0cHM6Ly93d3cubGFuem91cy5jb20vIiArIHNoYXJlSWQ7CiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2hhcmVTb3VyY2UgPT0gY29uc3RhbnQuc291cmNlLnR5MTg5KSB7CiAgICAgICAgICAgICAgICBzaGFyZUxpbmsgPSAiaHR0cHM6Ly9jbG91ZC4xODkuY24vdC8iICsgc2hhcmVJZDsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gc2hhcmVMaW5rOwogICAgICAgIH07CgogICAgICAgIG9iai5idWlsZFNoYXJlVGltZSA9IGZ1bmN0aW9uIChzaGFyZVRpbWUpIHsKICAgICAgICAgICAgcmV0dXJuIGNhbGVuZGFyLmZvcm1hdFRpbWUoIlktbS1kIEg6aTpzIiwgc2hhcmVUaW1lKTsKICAgICAgICB9OwoKICAgICAgICByZXR1cm4gb2JqOwogICAgfSk7CgogICAgY29udGFpbmVyLmRlZmluZSgicnVudGltZSIsIFsicm91dGVyIiwgIm1hbmlmZXN0IiwgImNhbGVuZGFyIiwgInN0b3JhZ2UiLCAiYXBpIl0sIGZ1bmN0aW9uIChyb3V0ZXIsIG1hbmlmZXN0LCBjYWxlbmRhciwgc3RvcmFnZSwgYXBpKSB7CiAgICAgICAgdmFyIG9iaiA9IHt9OwoKICAgICAgICBvYmoub3Blbk9wdGlvbnNQYWdlID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICByb3V0ZXIub3BlblRhYihtYW5pZmVzdC5nZXRPcHRpb25zUGFnZSgpLCB0cnVlKTsKICAgICAgICB9OwoKICAgICAgICBvYmouaW5pdFZlcnNpb24gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciB2ZXJzaW9uRGF0ZSA9IHBhcnNlSW50KHN0b3JhZ2UuZ2V0VmFsdWUoInZlcnNpb25fZGF0ZSIpKTsKICAgICAgICAgICAgdmFyIGN1cnJlbnREYXRlID0gY2FsZW5kYXIuZm9ybWF0VGltZSgiWW1kIik7CiAgICAgICAgICAgIGlmICghdmVyc2lvbkRhdGUgfHwgdmVyc2lvbkRhdGUgPCBjdXJyZW50RGF0ZSkgewogICAgICAgICAgICAgICAgYXBpLnZlcnNpb25RdWVyeShmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgICBzdG9yYWdlLnNldFZhbHVlKCJ2ZXJzaW9uX2RhdGUiLCBjdXJyZW50RGF0ZSk7CgogICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSAmJiByZXNwb25zZS5jb2RlID09IDEgJiYgcmVzcG9uc2UuZGF0YSBpbnN0YW5jZW9mIE9iamVjdCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmVyc2lvblBheWxvYWQgPSByZXNwb25zZS5kYXRhOwogICAgICAgICAgICAgICAgICAgICAgICBzdG9yYWdlLnNldFZhbHVlKCJ2ZXJzaW9uX3BheWxvYWQiLCB2ZXJzaW9uUGF5bG9hZCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHN0b3JhZ2Uuc2V0VmFsdWUoInZlcnNpb25fbGF0ZXN0IiwgdmVyc2lvblBheWxvYWQudmVyc2lvbik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBvYmouaW5pdFJ1bnRpbWUgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIG9iai5pbml0VmVyc2lvbigpOwogICAgICAgIH07CgogICAgICAgIHJldHVybiBvYmo7CiAgICB9KTsKCiAgICBjb250YWluZXIuZGVmaW5lKCJjb3JlIiwgWyJydW50aW1lIiwgIiRleHRlbmQiXSwgZnVuY3Rpb24gKHJ1bnRpbWUpIHsKICAgICAgICB2YXIgb2JqID0ge307CgogICAgICAgIG9iai5yZWFkeSA9IGZ1bmN0aW9uIChjYWxsYmFjaykgewogICAgICAgICAgICBydW50aW1lLmluaXRSdW50aW1lKCk7CgogICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpOwogICAgICAgIH07CgogICAgICAgIHJldHVybiBvYmo7CiAgICB9KTsKCiAgICAvKiogYXBwICoqLwogICAgY29udGFpbmVyLmRlZmluZSgiYXBwX2JhaWR1IiwgWyJjb25maWciLCAib3B0aW9uIiwgInJvdXRlciIsICJsb2dnZXIiLCAidW5zYWZlV2luZG93IiwgImNvbnN0YW50IiwgInJ1bnRpbWUiLCAiYXBpIiwgInNoYXJlTG9nIiwgIiQiXSwgZnVuY3Rpb24gKGNvbmZpZywgb3B0aW9uLCByb3V0ZXIsIGxvZ2dlciwgdW5zYWZlV2luZG93LCBjb25zdGFudCwgcnVudGltZSwgYXBpLCBzaGFyZUxvZywgJCkgewogICAgICAgIHZhciBvYmogPSB7CiAgICAgICAgICAgIGFwcF9pZDogNzc4NzUwLAogICAgICAgICAgICB0ZW1wX3BhdGg6ICIvb25ldG1wIiwKICAgICAgICAgICAgeXVuX2RhdGE6IG51bGwsCiAgICAgICAgICAgIHZlcmlmeV9wYWdlOiB7CiAgICAgICAgICAgICAgICBzaGFyZV9wd2Q6IG51bGwsCiAgICAgICAgICAgICAgICBzZXRQd2Q6IG51bGwsCiAgICAgICAgICAgICAgICBiYWNrdXBQd2Q6IG51bGwsCiAgICAgICAgICAgICAgICByZXN0b3JlUHdkOiBudWxsLAogICAgICAgICAgICAgICAgc3VibWl0X3B3ZDogbnVsbAogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnJ1biA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIHVybCA9IHJvdXRlci5nZXRVcmwoKTsKICAgICAgICAgICAgaWYgKHVybC5pbmRleE9mKCIuYmFpZHUuY29tL3MvIikgPiAwKSB7CiAgICAgICAgICAgICAgICBvcHRpb24uaXNPcHRpb25BY3RpdmUob3B0aW9uLmNvbnN0YW50LmJhaWR1X3BhZ2Vfc2hhcmUpICYmIG9iai5pbml0U2hhcmVQYWdlKCk7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIGlmICh1cmwuaW5kZXhPZigiLmJhaWR1LmNvbS9kaXNrL2hvbWUiKSA+IDApIHsKICAgICAgICAgICAgICAgIG9wdGlvbi5pc09wdGlvbkFjdGl2ZShvcHRpb24uY29uc3RhbnQuYmFpZHVfcGFnZV9ob21lKSAmJiBvYmouaW5pdEhvbWVQYWdlKCk7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfSBlbHNlIGlmICh1cmwuaW5kZXhPZigiLmJhaWR1LmNvbS9kaXNrL3RpbWVsaW5lIikgPiAwKSB7CiAgICAgICAgICAgICAgICBvcHRpb24uaXNPcHRpb25BY3RpdmUob3B0aW9uLmNvbnN0YW50LmJhaWR1X3BhZ2VfaG9tZSkgJiYgb2JqLmluaXRUaW1lTGluZVBhZ2UoKTsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9IGVsc2UgaWYgKHVybC5pbmRleE9mKCIuYmFpZHUuY29tL3NoYXJlL2luaXQiKSA+IDApIHsKICAgICAgICAgICAgICAgIG9wdGlvbi5pc09wdGlvbkFjdGl2ZShvcHRpb24uY29uc3RhbnQuYmFpZHVfcGFnZV92ZXJpZnkpICYmIG9iai5pbml0VmVyaWZ5UGFnZSgpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBvYmouaW5pdFNoYXJlUGFnZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgb2JqLnJlbW92ZVZpZGVvTGltaXQoKTsKCiAgICAgICAgICAgIG9iai5wcmV0dHlTaW5nbGVTaGFyZVBhZ2UoKTsKCiAgICAgICAgICAgIG9iai5pbml0QnV0dG9uU2hhcmUoKTsKCiAgICAgICAgICAgIG9iai5pbml0QnV0dG9uRXZlbnQoKTsKCiAgICAgICAgICAgIGlmIChvcHRpb24uaXNPcHRpb25BY3RpdmUob3B0aW9uLmNvbnN0YW50LmJhaWR1X3Nob3dfb3JpZ2luKSkgewogICAgICAgICAgICAgICAgb2JqLnNob3dTaGFyZU9yaWdpbigpOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmluaXRIb21lUGFnZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgb2JqLnJlZ2lzdGVyQ3VzdG9tU2hhcmVQd2QoKTsKCiAgICAgICAgICAgIG9iai5pbml0QnV0dG9uSG9tZSgpOwoKICAgICAgICAgICAgb2JqLmluaXRCdXR0b25FdmVudCgpOwogICAgICAgIH07CgogICAgICAgIG9iai5pbml0VGltZUxpbmVQYWdlID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICBvYmoucmVnaXN0ZXJDdXN0b21TaGFyZVB3ZCgpOwoKICAgICAgICAgICAgb2JqLmluaXRCdXR0b25UaW1lTGluZSgpOwoKICAgICAgICAgICAgb2JqLmluaXRCdXR0b25FdmVudCgpOwogICAgICAgIH07CgogICAgICAgIG9iai5pbml0VmVyaWZ5UGFnZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgb2JqLnJlZ2lzdGVyU3RvcmVTaGFyZVB3ZCgpOwoKICAgICAgICAgICAgaWYgKG9iai5pbml0VmVyaWZ5UGFnZUVsZW1lbnQoKSkgewogICAgICAgICAgICAgICAgb2JqLmF1dG9QYWRkaW5nU2hhcmVQd2QoKTsKCiAgICAgICAgICAgICAgICBvYmoucmVnaXN0ZXJQd2RTaGFyZVN3aXRjaCgpOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmluaXRWZXJpZnlQYWdlRWxlbWVudCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIHNoYXJlSWQgPSBvYmouZ2V0U2hhcmVJZCgpOwogICAgICAgICAgICB2YXIgJHB3ZCA9ICQoIi5pbnB1dC1hcmVhIGlucHV0Iik7CiAgICAgICAgICAgIGlmIChzaGFyZUlkICYmICRwd2QubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAvLyDorr7nva7mj5Dlj5bnoIEKICAgICAgICAgICAgICAgIG9iai52ZXJpZnlfcGFnZS5zZXRQd2QgPSBmdW5jdGlvbiAocHdkKSB7CiAgICAgICAgICAgICAgICAgICAgJHB3ZC52YWwocHdkKTsKICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgLy8g5aSH5Lu95o+Q5Y+W56CBCiAgICAgICAgICAgICAgICBvYmoudmVyaWZ5X3BhZ2UuYmFja3VwUHdkID0gZnVuY3Rpb24gKHB3ZCkgewogICAgICAgICAgICAgICAgICAgICRwd2QuYXR0cigiZGF0YS1wd2QiLCBwd2QpOwogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAvLyDov5jljp/mj5Dlj5bnoIEKICAgICAgICAgICAgICAgIG9iai52ZXJpZnlfcGFnZS5yZXN0b3JlUHdkID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICRwd2QudmFsKCRwd2QuYXR0cigiZGF0YS1wd2QiKSk7CiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIC8vIOaPkOS6pOaPkOWPlueggQogICAgICAgICAgICAgICAgdmFyICRidXR0b24gPSAkKCIuaW5wdXQtYXJlYSAuZy1idXR0b24tcmlnaHQiKTsKICAgICAgICAgICAgICAgIGlmICgkYnV0dG9uLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIG9iai52ZXJpZnlfcGFnZS5zdWJtaXRfcHdkID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAkYnV0dG9uLmNsaWNrKCk7CiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIG9iai5hdXRvUGFkZGluZ1NoYXJlUHdkID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgc2hhcmVJZCA9IG9iai5nZXRTaGFyZUlkKCk7CiAgICAgICAgICAgIHZhciBzaGFyZUxpbmsgPSByb3V0ZXIuZ2V0VXJsKCk7CiAgICAgICAgICAgIGFwaS5xdWVyeVNoYXJlUHdkKGNvbnN0YW50LnNvdXJjZS5iYWlkdSwgc2hhcmVJZCwgc2hhcmVMaW5rLCBmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSAmJiByZXNwb25zZS5jb2RlID09IDEpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgc2hhcmVQd2QgPSByZXNwb25zZS5kYXRhLnNoYXJlX3B3ZDsKICAgICAgICAgICAgICAgICAgICBvYmoudmVyaWZ5X3BhZ2Uuc2hhcmVfcHdkID0gc2hhcmVQd2Q7CiAgICAgICAgICAgICAgICAgICAgb2JqLnZlcmlmeV9wYWdlLnNldFB3ZChzaGFyZVB3ZCk7CiAgICAgICAgICAgICAgICAgICAgb2JqLnNob3dUaXBTdWNjZXNzKCLloavlhYXmj5Dlj5bnoIHmiJDlip8iKTsKCiAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbi5pc09wdGlvbkFjdGl2ZShvcHRpb24uY29uc3RhbnQuYmFpZHVfYXV0b19qdW1wKSkgewogICAgICAgICAgICAgICAgICAgICAgICBvYmoudmVyaWZ5X3BhZ2Uuc3VibWl0X3B3ZCAmJiBvYmoudmVyaWZ5X3BhZ2Uuc3VibWl0X3B3ZCgpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIG9iai5zaG93VGlwRXJyb3IoIuaaguaXoOS6uuWIhuS6q+aPkOWPlueggSIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICBvYmoucmVnaXN0ZXJQd2RTaGFyZVN3aXRjaCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgLy8g5re75Yqg5byA5YWzCiAgICAgICAgICAgICQoIi5waWNrcHciKS5hZnRlcignPGRsIGNsYXNzPSJjbGVhcmZpeCI+PGR0PuaPkOWPlueggeWIhuS6q+iuvue9rjxzcGFuIHN0eWxlPSJmbG9hdDpyaWdodCI+PGlucHV0IHR5cGU9ImNoZWNrYm94IiBjaGVja2VkIGlkPSJuZC1zaGFyZS1jaGVjayIgc3R5bGU9InZlcnRpY2FsLWFsaWduOiBtaWRkbGU7Ij4gPGEgY2xhc3M9Im5kLW9wZW4tcGFnZS1vcHRpb24iIGhyZWY9ImphdmFzY3JpcHQ6OyIgdGl0bGU9IueCueWHu+afpeeci+abtOWkmuiEmuacrOmFjee9riI+5YWx5Lqr5o+Q5Y+W56CBPC9hPjwvc3Bhbj48L2R0PjwvZGw+Jyk7CiAgICAgICAgICAgIG9iai5pc1B3ZFNoYXJlT3BlbigpIHx8ICQoIiNuZC1zaGFyZS1jaGVjayIpLnJlbW92ZUF0dHIoImNoZWNrZWQiKTsKCiAgICAgICAgICAgIC8vIOW8gOWFsy3kuovku7YKICAgICAgICAgICAgJCgiI25kLXNoYXJlLWNoZWNrIikub24oImNoYW5nZSIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLmlzKCc6Y2hlY2tlZCcpKSB7CiAgICAgICAgICAgICAgICAgICAgb3B0aW9uLnNldE9wdGlvbkFjdGl2ZShvcHRpb24uY29uc3RhbnQuYmFpZHVfc2hhcmVfc3RhdHVzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIG9wdGlvbi5zZXRPcHRpb25VbkFjdGl2ZShvcHRpb24uY29uc3RhbnQuYmFpZHVfc2hhcmVfc3RhdHVzKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAvLyDmiZPlvIDphY3nva7pobUKICAgICAgICAgICAgJCgiLm5kLW9wZW4tcGFnZS1vcHRpb24iKS5jbGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBydW50aW1lLm9wZW5PcHRpb25zUGFnZSgpOwogICAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICBvYmoucmVnaXN0ZXJTdG9yZVNoYXJlUHdkID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICBvYmouZ2V0SnF1ZXJ5KCkoZG9jdW1lbnQpLmFqYXhDb21wbGV0ZShmdW5jdGlvbiAoZXZlbnQsIHhociwgb3B0aW9ucykgewogICAgICAgICAgICAgICAgdmFyIHJlcXVlc3RVcmwgPSBvcHRpb25zLnVybDsKICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0VXJsLmluZGV4T2YoIi9zaGFyZS92ZXJpZnkiKSA+PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gb3B0aW9ucy5kYXRhLm1hdGNoKC9wd2Q9KFthLXowLTldKykvaSk7CiAgICAgICAgICAgICAgICAgICAgaWYgKCFtYXRjaCkgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbG9nZ2VyLndhcm4oInB3ZCBzaGFyZSBub3QgbWF0Y2giKTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIC8vIOaLkue7nSrlj7cKICAgICAgICAgICAgICAgICAgICBpZiAob2JqLnZlcmlmeV9wYWdlLmJhY2t1cFB3ZCkgewogICAgICAgICAgICAgICAgICAgICAgICBvYmoudmVyaWZ5X3BhZ2UuYmFja3VwUHdkKG1hdGNoWzFdKTsKICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChvYmoudmVyaWZ5X3BhZ2UucmVzdG9yZVB3ZCwgNTAwKTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHZhciByZXNwb25zZSA9IHhoci5yZXNwb25zZUpTT047CiAgICAgICAgICAgICAgICAgICAgaWYgKCEocmVzcG9uc2UgJiYgcmVzcG9uc2UuZXJybm8gPT0gMCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxvZ2dlci53YXJuKCJwd2Qgc2hhcmUgZXJyb3IiKTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIHZhciBzaGFyZVB3ZCA9IG1hdGNoWzFdOwogICAgICAgICAgICAgICAgICAgIGlmIChzaGFyZVB3ZCA9PSBvYmoudmVyaWZ5X3BhZ2Uuc2hhcmVfcHdkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2dnZXIud2FybigicHdkIHNoYXJlIG5vdCBjaGFuZ2UiKTsKICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIGlmICghb2JqLmlzUHdkU2hhcmVPcGVuKCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxvZ2dlci53YXJuKCJwd2Qgc2hhcmUgY2xvc2VkIik7CiAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICB2YXIgc2hhcmVJZCA9IG9iai5nZXRTaGFyZUlkKCk7CiAgICAgICAgICAgICAgICAgICAgdmFyIHNoYXJlTGluayA9IHJvdXRlci5nZXRVcmwoKTsKICAgICAgICAgICAgICAgICAgICBzaGFyZUxvZy5hZGRTaGFyZUxvZyhzaGFyZUlkLCBzaGFyZVB3ZCwgc2hhcmVMaW5rLCBjb25zdGFudC5zb3VyY2UuYmFpZHUpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICBvYmoucmVnaXN0ZXJDdXN0b21TaGFyZVB3ZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgLy8g5Yqf6IO95byA5YWzCiAgICAgICAgICAgIGlmICghb3B0aW9uLmlzT3B0aW9uQWN0aXZlKG9wdGlvbi5jb25zdGFudC5iYWlkdV9jdXN0b21fcGFzc3dvcmQpKSB7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIG9iai5sb2FkUGx1Z2luKCLnvZHnm5jliIbkuqsiLCAiY29tLmJhaWR1LnBhbiIpOwoKICAgICAgICAgICAgb2JqLm9uTW9kdWxlUmVhZHkoImZ1bmN0aW9uLXdpZGdldC0xOnNoYXJlL3V0aWwvc2hhcmVEaWFsb2cuanMiLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAvLyDliIbkuqvkuovku7YKICAgICAgICAgICAgICAgIG9iai5hc3luYygiZnVuY3Rpb24td2lkZ2V0LTE6c2hhcmUvdXRpbC9zaGFyZURpYWxvZy5qcyIsIGZ1bmN0aW9uIChzaGFyZURpYWxvZykgewogICAgICAgICAgICAgICAgICAgIHNoYXJlRGlhbG9nLnByb3RvdHlwZS5vblZpc2liaWxpdHlDaGFuZ2VPcmlnaW4gPSBzaGFyZURpYWxvZy5wcm90b3R5cGUub25WaXNpYmlsaXR5Q2hhbmdlOwogICAgICAgICAgICAgICAgICAgIHNoYXJlRGlhbG9nLnByb3RvdHlwZS5vblZpc2liaWxpdHlDaGFuZ2UgPSBmdW5jdGlvbiAoc3RhdHVzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkKCIubmQtaW5wdXQtc2hhcmUtcHdkIikubGVuZ3RoID09IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzaGFyZVB3ZCA9IGNvbmZpZy5nZXRDb25maWcoInNoYXJlX3B3ZCIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGh0bWwgPSAnPHRyPjx0ZCBjbGFzcz0iZmlyc3QtY2hpbGQiPjxsYWJlbD7mj5Dlj5bnoIE8L2xhYmVsPjwvdGQ+PHRkPjxpbnB1dCB0eXBlPSJ0ZXh0IiBjbGFzcz0ibmQtaW5wdXQtc2hhcmUtcHdkIiB2YWx1ZT0iJyArIChzaGFyZVB3ZCA/IHNoYXJlUHdkIDogIiIpICsgJyIgcGxhY2Vob2xkZXI9IuS4uuepuuWImemaj+acuuWbm+S9jSIgc3R5bGU9InBhZGRpbmc6IDZweDsgd2lkdGg6IDEwMHB4O2JvcmRlcjogMXB4IHNvbGlkICNlOWU5ZTk7Ij48L3RkPjwvdHI+JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoIiNzaGFyZSAuZGlhbG9nLWJvZHkgdGFibGUiKS5hcHBlbmQoaHRtbCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vblZpc2liaWxpdHlDaGFuZ2VPcmlnaW4oc3RhdHVzKTsKICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgLy8g55Sf5oiQ5o+Q5Y+W56CBCiAgICAgICAgICAgICAgICBvYmouYXN5bmMoImZ1bmN0aW9uLXdpZGdldC0xOnNoYXJlL3V0aWwvc2hhcmVGcmllbmQvY3JlYXRlTGlua1NoYXJlLmpzIiwgZnVuY3Rpb24gKHNoYXJlTGluaykgewogICAgICAgICAgICAgICAgICAgIHNoYXJlTGluay5wcm90b3R5cGUubWFrZVByaXZhdGVQYXNzd29yZE9yaWdpbiA9IHNoYXJlTGluay5wcm90b3R5cGUubWFrZVByaXZhdGVQYXNzd29yZDsKICAgICAgICAgICAgICAgICAgICBzaGFyZUxpbmsucHJvdG90eXBlLm1ha2VQcml2YXRlUGFzc3dvcmQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzaGFyZVB3ZCA9IGNvbmZpZy5nZXRDb25maWcoInNoYXJlX3B3ZCIpOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2hhcmVQd2QgPyBzaGFyZVB3ZCA6IHRoaXMubWFrZVByaXZhdGVQYXNzd29yZE9yaWdpbigpOwogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAvLyDmj5Dlj5bnoIHmm7TmlLnkuovku7YKICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKCJjaGFuZ2UiLCAiLm5kLWlucHV0LXNoYXJlLXB3ZCIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnZhbHVlOwogICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAmJiAhdmFsdWUubWF0Y2goL15bMC05YS16XXs0fSQvaSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnNob3dUaXBFcnJvcigi5o+Q5Y+W56CB5Y+q6IO95piv5Zub5L2N5pWw5a2X5oiW5a2X5q+NIik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGNvbmZpZy5zZXRDb25maWcoInNoYXJlX3B3ZCIsIHZhbHVlKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICBvYmoubG9hZFBsdWdpbiA9IGZ1bmN0aW9uIChuYW1lLCBncm91cCkgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgdmFyIHBsdWdpbiA9IG9iai5yZXF1aXJlKCJzeXN0ZW0tY29yZTpwbHVnaW5IdWIvZGF0YS9SZWdpc3RyeS5qcyIpLmdldFBsdWdpbkJ5TmFtZUFuZEdyb3VwKG5hbWUsIGdyb3VwKTsKICAgICAgICAgICAgICAgIG9iai5yZXF1aXJlKCJzeXN0ZW0tY29yZTpwbHVnaW5IdWIvaW52b2tlci9sb2FkUGx1Z2luQXNzZXRzLmpzIikocGx1Z2luKTsKICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7IH0KICAgICAgICB9OwoKICAgICAgICBvYmoub25Nb2R1bGVSZWFkeSA9IGZ1bmN0aW9uIChuYW1lLCBjYWxsYmFjaykgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgb2JqLnJlcXVpcmUobmFtZSk7CiAgICAgICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIG9iai5vbk1vZHVsZVJlYWR5KG5hbWUsIGNhbGxiYWNrKTsKICAgICAgICAgICAgICAgIH0sIDUwMCk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBvYmoucmVtb3ZlVmlkZW9MaW1pdCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSBvYmouZ2V0U3lzdGVtQ29udGV4dCgpLm1lc3NhZ2U7CiAgICAgICAgICAgIGlmIChtZXNzYWdlKSB7CiAgICAgICAgICAgICAgICBtZXNzYWdlLmNhbGxTeXN0ZW0oInNoYXJlLXZpZGVvLWFmdGVyLXRyYW5zZmVyIik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBsb2dnZXIud2Fybigid2FpdCByZW1vdmVWaWRlb0xpbWl0Li4uIik7CiAgICAgICAgICAgICAgICBvYmouc2V0VGltZW91dChvYmoucmVtb3ZlVmlkZW9MaW1pdCwgNTAwKTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIG9iai5wcmV0dHlTaW5nbGVTaGFyZVBhZ2UgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGlmICghb2JqLmlzU2hhcmVQYWdlTXVsdGkoKSkgewogICAgICAgICAgICAgICAgJCgiI2xheW91dE1haW4iKS5jc3MoewogICAgICAgICAgICAgICAgICAgICJ3aWR0aCI6ICJhdXRvIiwKICAgICAgICAgICAgICAgICAgICAibWluLXdpZHRoIjogIjExODBweCIsCiAgICAgICAgICAgICAgICAgICAgIm1hcmdpbiI6ICI4OHB4IDMwcHgiCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIG9iai5zaG93U2hhcmVPcmlnaW4gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGFwaS5xdWVyeVNoYXJlT3JpZ2luKGNvbnN0YW50LnNvdXJjZS5iYWlkdSwgb2JqLmdldFNoYXJlSWQoKSwgcm91dGVyLmdldFVybCgpLCBmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSAmJiByZXNwb25zZS5jb2RlID09IDEpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHJlc3BvbnNlLmRhdGE7CiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEubGlzdCAmJiBkYXRhLmxpc3QubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBodG1sID0gJzxkaXYgc3R5bGU9InBhZGRpbmc6IDEwcHggNXB4OyBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2Y2ZjZmNjsgbGluZS1oZWlnaHQ6IDMwcHg7Ij4nOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IGRhdGEubGlzdFswXTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEubGlzdC5sZW5ndGggPiAxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sICs9ICc8cD7liIbkuqvmnaXmupDvvJo8YSB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iJyArIGl0ZW0udXJsICsgJyI+JyArIGl0ZW0udGl0bGUgKyAnPC9hPiBbPGEgY2xhc3M9InNob3ctb3JpZ2luLWRpYWxvZyIgaHJlZj0iamF2YXNjcmlwdDo7IiBzdHlsZT0iY29sb3I6I2ZmMDAwMDsiPiDmn6XnnIvmm7TlpJogPC9hPl08L3A+JzsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0bWwgKz0gJzxwPuWIhuS6q+adpea6kO+8mjxhIHRhcmdldD0iX2JsYW5rIiBocmVmPSInICsgaXRlbS51cmwgKyAnIj4nICsgaXRlbS50aXRsZSArICc8L2E+PC9wPic7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgaHRtbCArPSAnPC9kaXY+JzsKICAgICAgICAgICAgICAgICAgICAgICAgJCgiLm1vZHVsZS1zaGFyZS1oZWFkZXIiKS5hZnRlcihodG1sKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKCJjbGljayIsICIuc2hvdy1vcmlnaW4tZGlhbG9nIiwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRpdGxlID0gIuWIhuS6q+adpea6kCI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYm9keSA9ICc8ZGl2IHN0eWxlPSJwYWRkaW5nOiAyMHB4IDIwcHg7bWluLWhlaWdodDogMTIwcHg7IG1heC1oZWlnaHQ6IDMwMHB4OyBvdmVyZmxvdy15OiBhdXRvOyI+JzsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmxpc3QuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSwgaW5kZXgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib2R5ICs9ICc8cD4nICsgKCsraW5kZXgpICsgJ++8mjxhIHRhcmdldD0iX2JsYW5rIiBocmVmPSInICsgaXRlbS51cmwgKyAnIj4nICsgaXRlbS50aXRsZSArICc8L2E+PC9wPic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib2R5ICs9ICc8L2Rpdj4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZvb3RlciA9IG9iai5yZW5kZXJGb290ZXJBcHBJZCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnNob3dEaWFsb2codGl0bGUsIGJvZHksIGZvb3Rlcik7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgLy8gb2JqLnNob3dUaXBFcnJvcigi5pqC5pyq5p+l6K+i5Yiw5YiG5Lqr55qE5p2l5rqQIik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICBvYmouaW5pdEJ1dHRvblNoYXJlID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICBpZiAoJCgiLngtYnV0dG9uLWJveCIpLmxlbmd0aCkgewogICAgICAgICAgICAgICAgdmFyIGh0bWwgPSAnPGEgY2xhc3M9ImctYnV0dG9uIG5kLWJ1dHRvbi1idWlsZCI+PHNwYW4gY2xhc3M9ImctYnV0dG9uLXJpZ2h0Ij48ZW0gY2xhc3M9Imljb24gaWNvbi1kaXNrIiB0aXRsZT0i5LiL6L29Ij48L2VtPjxzcGFuIGNsYXNzPSJ0ZXh0Ij7nlJ/miJDpk77mjqU8L3NwYW4+PC9zcGFuPjwvYT4nOwogICAgICAgICAgICAgICAgJCgiLngtYnV0dG9uLWJveCIpLmFwcGVuZChodG1sKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuKCJ3YWl0IGluaXRCdXR0b25TaGFyZS4uLiIpOwogICAgICAgICAgICAgICAgc2V0VGltZW91dChvYmouaW5pdEJ1dHRvblNoYXJlLCA1MDApOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmluaXRCdXR0b25Ib21lID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgbGlzdFRvb2xzID0gb2JqLmdldFN5c3RlbUNvbnRleHQoKS5Ccm9rZXIuZ2V0QnV0dG9uQnJva2VyKCJsaXN0VG9vbHMiKTsKICAgICAgICAgICAgaWYgKGxpc3RUb29scyAmJiBsaXN0VG9vbHMuJGJveCkgewogICAgICAgICAgICAgICAgdmFyIGh0bWwgPSAnPGEgY2xhc3M9ImctYnV0dG9uIG5kLWJ1dHRvbi1idWlsZCI+PHNwYW4gY2xhc3M9ImctYnV0dG9uLXJpZ2h0Ij48ZW0gY2xhc3M9Imljb24gaWNvbi1kaXNrIiB0aXRsZT0i5LiL6L29Ij48L2VtPjxzcGFuIGNsYXNzPSJ0ZXh0Ij7nlJ/miJDpk77mjqU8L3NwYW4+PC9zcGFuPjwvYT4nOwogICAgICAgICAgICAgICAgJChsaXN0VG9vbHMuJGJveCkucHJlcGVuZChodG1sKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuKCJ3YWl0IGluaXRCdXR0b25Ib21lLi4uIik7CiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KG9iai5pbml0QnV0dG9uSG9tZSwgNTAwKTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIG9iai5pbml0QnV0dG9uVGltZUxpbmUgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGlmICgkKCIubW9kdWxlLW9wZXJhdGVCdG4gLmdyb3VwLWJ1dHRvbiIpLmxlbmd0aCkgewogICAgICAgICAgICAgICAgdmFyIGh0bWwgPSAnPHNwYW4gY2xhc3M9ImJ1dHRvbiI+PGEgY2xhc3M9Imctdi1idXR0b24gZy12LWJ1dHRvbi1taWRkbGUgbmQtYnV0dG9uLWJ1aWxkIj48c3BhbiBjbGFzcz0iZy12LWJ1dHRvbi1yaWdodCI+PGVtIGNsYXNzPSJpY29uIGljb24tZGlzayI+PC9lbT48c3BhbiBjbGFzcz0idGV4dCI+55Sf5oiQ6ZO+5o6lPC9zcGFuPjwvc3Bhbj48L2E+PC9zcGFuPic7CiAgICAgICAgICAgICAgICAkKCIubW9kdWxlLW9wZXJhdGVCdG4gLmdyb3VwLWJ1dHRvbiIpLnByZXBlbmQoaHRtbCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBsb2dnZXIud2Fybigid2FpdCBpbml0QnV0dG9uVGltZUxpbmUuLi4iKTsKICAgICAgICAgICAgICAgIHNldFRpbWVvdXQob2JqLmluaXRCdXR0b25UaW1lTGluZSwgNTAwKTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIG9iai5pbml0QnV0dG9uRXZlbnQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIC8vIOeUn+aIkOmTvuaOpQogICAgICAgICAgICAkKGRvY3VtZW50KS5vbigiY2xpY2siLCAiLm5kLWJ1dHRvbi1idWlsZCIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHZhciB5dW5EYXRhID0gb2JqLmdldFl1bkRhdGEoKTsKICAgICAgICAgICAgICAgIGlmICh5dW5EYXRhLk1ZVUsgfHwgb2JqLmlzSG9tZVBhZ2UoKSkgewogICAgICAgICAgICAgICAgICAgIHZhciBmaWxlTGlzdCA9IG9iai5nZXRTZWxlY3RlZEZpbGVMaXN0KCk7CiAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGVTdGF0ID0gb2JqLmdldEZpbGVMaXN0U3RhdChmaWxlTGlzdCk7CiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVMaXN0Lmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZUxpc3QubGVuZ3RoID4gMSAmJiBmaWxlU3RhdC5maWxlX251bSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnNob3dEb3dubG9hZFNlbGVjdChmaWxlTGlzdCwgZmlsZVN0YXQpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGZpbGVTdGF0LmZpbGVfbnVtID09IDEgJiYgIW9iai5pc0hvbWVQYWdlKCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5zaG93RG93bmxvYWRTaW5nbGUoZmlsZUxpc3QsIGZpbGVTdGF0KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYWNrID0gZmlsZVN0YXQuZmlsZV9udW0gPyBmYWxzZSA6IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob2JqLmlzSG9tZVBhZ2UoKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9iai5zaG93RG93bmxvYWRJbmZvSG9tZShmaWxlTGlzdCwgcGFjayk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmouc2hvd0Rvd25sb2FkSW5mb1NoYXJlT2ZmaWNhbChmaWxlTGlzdCwgcGFjayk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG9iai5zaG93VGlwRXJyb3IoIuivt+iHs+WwkemAieaLqeS4gOS4quaWh+S7tuaIluaWh+S7tuWkuSIpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIG9iai5zaG93TG9naW4oKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAvLyDljovnvKnljIUKICAgICAgICAgICAgJChkb2N1bWVudCkub24oImNsaWNrIiwgIi5uZC1idXR0b24tcGFjayIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHZhciBmaWxlTGlzdCA9IG9iai5nZXRTZWxlY3RlZEZpbGVMaXN0KCk7CiAgICAgICAgICAgICAgICBpZiAob2JqLmlzSG9tZVBhZ2UoKSkgewogICAgICAgICAgICAgICAgICAgIG9iai5zaG93RG93bmxvYWRJbmZvSG9tZShmaWxlTGlzdCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBvYmouc2hvd0Rvd25sb2FkSW5mb1NoYXJlT2ZmaWNhbChmaWxlTGlzdCwgdHJ1ZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgLy8g5aSa5paH5Lu2CiAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKCJjbGljayIsICIubmQtYnV0dG9uLW11bHRpIiwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgdmFyIGZpbGVMaXN0ID0gb2JqLmdldFNlbGVjdGVkRmlsZUxpc3QoKTsKCiAgICAgICAgICAgICAgICAvLyDov4fmu6Tmlofku7blpLkKICAgICAgICAgICAgICAgIGZpbGVMaXN0ID0gb2JqLmZpbHRlckZpbGVMaXN0RGlyKGZpbGVMaXN0KTsKCiAgICAgICAgICAgICAgICBpZiAob2JqLmlzSG9tZVBhZ2UoKSkgewogICAgICAgICAgICAgICAgICAgIG9iai5zaG93RG93bmxvYWRJbmZvSG9tZShmaWxlTGlzdCwgZmFsc2UpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgb2JqLnNob3dEb3dubG9hZEluZm9TaGFyZU9mZmljYWwoZmlsZUxpc3QsIGZhbHNlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAvLyDovazlrZjlpJrmlofku7YKICAgICAgICAgICAgJChkb2N1bWVudCkub24oImNsaWNrIiwgIi5uZC1idXR0b24tZGlzayIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHZhciBmaWxlTGlzdCA9IG9iai5nZXRTZWxlY3RlZEZpbGVMaXN0KCk7CgogICAgICAgICAgICAgICAgLy8g6L+H5ruk5paH5Lu25aS5CiAgICAgICAgICAgICAgICBmaWxlTGlzdCA9IG9iai5maWx0ZXJGaWxlTGlzdERpcihmaWxlTGlzdCk7CgogICAgICAgICAgICAgICAgaWYgKG9iai5pc0hvbWVQYWdlKCkpIHsKICAgICAgICAgICAgICAgICAgICBvYmouc2hvd0Rvd25sb2FkSW5mb0hvbWUoZmlsZUxpc3QsIGZhbHNlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIG9iai5zaG93RG93bmxvYWRJbmZvU2hhcmVUcmFuc2ZlcihmaWxlTGlzdCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgLy8g5bqU55SoSUQKICAgICAgICAgICAgJChkb2N1bWVudCkub24oImNsaWNrIiwgIi5uZC1jaGFuZ2UtYXBwLWlkIiwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgb2JqLnNob3dBcHBJZENoYW5nZSgpOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgJChkb2N1bWVudCkub24oImNoYW5nZSIsICIubmQtaW5wdXQtYXBwLWlkIiwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgb2JqLnNldEFwcElkKHRoaXMudmFsdWUpOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIC8vIOaJk+W8gOmFjee9rumhtQogICAgICAgICAgICAkKGRvY3VtZW50KS5vbigiY2xpY2siLCAiLm5kLW9wZW4tcGFnZS1vcHRpb24iLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBydW50aW1lLm9wZW5PcHRpb25zUGFnZSgpOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIC8vIOaJk+W8gOS4tOaXtumhtemdogogICAgICAgICAgICAkKGRvY3VtZW50KS5vbigiY2xpY2siLCAiLm5kLW9wZW4tcGFnZS10ZW1wIiwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgcm91dGVyLm9wZW5UYWIoImh0dHBzOi8vcGFuLmJhaWR1LmNvbS9kaXNrL2hvbWUjL2FsbD92bW9kZT1saXN0JnBhdGg9IiArIGVuY29kZVVSSUNvbXBvbmVudChvYmouZ2V0VGVtcFBhdGgoKSksIHRydWUpOwogICAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICBvYmouc2hvd0xvZ2luID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICBvYmouZ2V0SnF1ZXJ5KCkoIltub2RlLXR5cGU9J2hlYWRlci1sb2dpbi1idG4nXSIpLmNsaWNrKCk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnNob3dEb3dubG9hZEluZm9TaGFyZVRyYW5zZmVyID0gZnVuY3Rpb24gKGZpbGVMaXN0KSB7CiAgICAgICAgICAgIGxvZ2dlci5pbmZvKGZpbGVMaXN0KTsKICAgICAgICAgICAgb2JqLmFwcGx5VHJhbnNmZXJGaWxlKGZpbGVMaXN0LCBvYmouZ2V0VGVtcFBhdGgoKSwgZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UgJiYgcmVzcG9uc2UuZXh0cmEgJiYgcmVzcG9uc2UuZXh0cmEubGlzdCkgewogICAgICAgICAgICAgICAgICAgIHZhciBsaXN0TWFwID0ge307CiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UuZXh0cmEubGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RNYXBbaXRlbS5mcm9tX2ZzX2lkXSA9IGl0ZW07CiAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgIHZhciBkb3duTGlzdCA9IFtdOwogICAgICAgICAgICAgICAgICAgIGZpbGVMaXN0LmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpc3RNYXAuaGFzT3duUHJvcGVydHkoaXRlbS5mc19pZCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0uZGxpbmsgPSBvYmouYnVpbGREb3dubG9hZFVybChsaXN0TWFwW2l0ZW0uZnNfaWRdLnRvLCBpdGVtLnNlcnZlcl9maWxlbmFtZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb3duTGlzdC5wdXNoKGl0ZW0pOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgb2JqLnNob3dEb3dubG9hZExpbmtGaWxlKGRvd25MaXN0KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnNob3dEb3dubG9hZEluZm9TaGFyZU9mZmljYWwgPSBmdW5jdGlvbiAoZmlsZUxpc3QsIHBhY2spIHsKICAgICAgICAgICAgb2JqLmdldERvd25sb2FkU2hhcmUoZmlsZUxpc3QsIHBhY2ssIGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgb2JqLmhpZGVUaXAoKTsKICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKHJlc3BvbnNlKTsKCiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UubGlzdCAmJiByZXNwb25zZS5saXN0Lmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIC8vIOaWh+S7tgogICAgICAgICAgICAgICAgICAgIG9iai5zaG93RG93bmxvYWRMaW5rRmlsZShyZXNwb25zZS5saXN0KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgaWYgKHJlc3BvbnNlLmRsaW5rKSB7CiAgICAgICAgICAgICAgICAgICAgLy8g5Y6L57yp5YyFCiAgICAgICAgICAgICAgICAgICAgb2JqLnNob3dEb3dubG9hZExpbmtQYWNrKGZpbGVMaXN0LCB7CiAgICAgICAgICAgICAgICAgICAgICAgIGRsaW5rOiByZXNwb25zZS5kbGluawogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgLy8g5YW25LuWCiAgICAgICAgICAgICAgICAgICAgb2JqLnNob3dEaWFsb2dVbktub3duUmVzcG9uc2UocmVzcG9uc2UpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICBvYmouc2hvd0Rvd25sb2FkSW5mb0hvbWUgPSBmdW5jdGlvbiAoZmlsZUxpc3QsIHBhY2spIHsKICAgICAgICAgICAgbG9nZ2VyLmluZm8oZmlsZUxpc3QpOwogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgb2JqLmdldERvd25sb2FkSG9tZShmaWxlTGlzdCwgcGFjaywgZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAgICAgb2JqLmhpZGVUaXAoKTsKICAgICAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyhyZXNwb25zZSk7CgogICAgICAgICAgICAgICAgICAgIGlmIChwYWNrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kbGluayAmJiB0eXBlb2YgcmVzcG9uc2UuZGxpbmsgPT0gInN0cmluZyIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOWOi+e8qeWMhQogICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnNob3dEb3dubG9hZExpbmtQYWNrKGZpbGVMaXN0LCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGxpbms6IHJlc3BvbnNlLmRsaW5rCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIOWFtuS7lgogICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnNob3dEaWFsb2dVbktub3duUmVzcG9uc2UocmVzcG9uc2UpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGxpbmsgaW5zdGFuY2VvZiBBcnJheSAmJiByZXNwb25zZS5kbGluay5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkbGlua01hcHBpbmcgPSB7fTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmRsaW5rLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkbGlua01hcHBpbmdbaXRlbS5mc19pZF0gPSBpdGVtLmRsaW5rOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5kbGluayA9IGRsaW5rTWFwcGluZ1tpdGVtLmZzX2lkXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmRsaW5rQXBpID0gb2JqLmJ1aWxkRG93bmxvYWRVcmwoaXRlbS5wYXRoLCBpdGVtLnNlcnZlcl9maWxlbmFtZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVMaXN0LmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLmRsaW5rID0gb2JqLmJ1aWxkRG93bmxvYWRVcmwoaXRlbS5wYXRoLCBpdGVtLnNlcnZlcl9maWxlbmFtZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICBvYmouc2hvd0Rvd25sb2FkTGlua0ZpbGUoZmlsZUxpc3QpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIChlcnIpIHsKICAgICAgICAgICAgICAgIGZpbGVMaXN0LmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICAgICAgICBpdGVtLmRsaW5rID0gb2JqLmJ1aWxkRG93bmxvYWRVcmwoaXRlbS5wYXRoLCBpdGVtLnNlcnZlcl9maWxlbmFtZSk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIG9iai5zaG93RG93bmxvYWRMaW5rRmlsZShmaWxlTGlzdCk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBvYmouc2hvd0Rvd25sb2FkTGlua0ZpbGUgPSBmdW5jdGlvbiAoZmlsZUxpc3QpIHsKICAgICAgICAgICAgdmFyIHRpdGxlID0gIuaWh+S7tuS4i+i9vSI7CiAgICAgICAgICAgIHZhciBib2R5ID0gJzxkaXYgc3R5bGU9InBhZGRpbmc6IDIwcHggMjBweDttaW4taGVpZ2h0OiAxMjBweDsgbWF4LWhlaWdodDogMzAwcHg7IG92ZXJmbG93LXk6IGF1dG87ICI+JzsKCiAgICAgICAgICAgIHZhciByb3dTdHlsZSA9ICJkaXNwbGF5OmJsb2NrOyBvdmVyZmxvdzpoaWRkZW47IHdoaXRlLXNwYWNlOm5vd3JhcDsgdGV4dC1vdmVyZmxvdzplbGxpcHNpczsiOwogICAgICAgICAgICBmaWxlTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkgewogICAgICAgICAgICAgICAgYm9keSArPSAnPGRpdiBzdHlsZT0ibWFyZ2luLWJvdHRvbTogMTBweDsiPic7CiAgICAgICAgICAgICAgICBib2R5ICs9ICc8ZGl2PicgKyAoaW5kZXggKyAxKSArICfvvJonICsgaXRlbS5zZXJ2ZXJfZmlsZW5hbWUgKyAnPC9kaXY+JzsKICAgICAgICAgICAgICAgIGlmIChpdGVtLmRsaW5rQXBpKSB7CiAgICAgICAgICAgICAgICAgICAgYm9keSArPSAnPGRpdj48YSBocmVmPSInICsgaXRlbS5kbGluayArICcmZmlsZW5hbWU9JyArIGVuY29kZVVSSUNvbXBvbmVudChpdGVtLnNlcnZlcl9maWxlbmFtZSkgKyAnIiB0aXRsZT0iJyArIGl0ZW0uZGxpbmsgKyAnIiBzdHlsZT0iJyArIHJvd1N0eWxlICsgJyI+5a6Y5pa577yaJyArIGl0ZW0uZGxpbmsgKyAnPC9hPjwvZGl2Pic7CiAgICAgICAgICAgICAgICAgICAgYm9keSArPSAnPGRpdj48YSBocmVmPSInICsgaXRlbS5kbGlua0FwaSArICcmZmlsZW5hbWU9JyArIGVuY29kZVVSSUNvbXBvbmVudChpdGVtLnNlcnZlcl9maWxlbmFtZSkgKyAnIiB0aXRsZT0iJyArIGl0ZW0uZGxpbmtBcGkgKyAnIiBzdHlsZT0iJyArIHJvd1N0eWxlICsgJyI+55u06ZO+77yaJyArIGl0ZW0uZGxpbmtBcGkgKyAnPC9hPjwvZGl2Pic7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBib2R5ICs9ICc8ZGl2PjxhIGhyZWY9IicgKyBpdGVtLmRsaW5rICsgJyZmaWxlbmFtZT0nICsgZW5jb2RlVVJJQ29tcG9uZW50KGl0ZW0uc2VydmVyX2ZpbGVuYW1lKSArICciIHRpdGxlPSInICsgaXRlbS5kbGluayArICciIHN0eWxlPSInICsgcm93U3R5bGUgKyAnIj4nICsgaXRlbS5kbGluayArICc8L2E+PC9kaXY+JzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGJvZHkgKz0gJzwvZGl2Pic7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgYm9keSArPSAnPC9kaXY+JzsKICAgICAgICAgICAgdmFyIGZvb3RlciA9IG9iai5yZW5kZXJGb290ZXJBcHBJZCgpOwogICAgICAgICAgICBvYmouc2hvd0RpYWxvZyh0aXRsZSwgYm9keSwgZm9vdGVyKTsKICAgICAgICB9OwoKICAgICAgICBvYmouc2hvd0Rvd25sb2FkTGlua1BhY2sgPSBmdW5jdGlvbiAoZmlsZUxpc3QsIGRhdGEpIHsKICAgICAgICAgICAgdmFyIHRpdGxlID0gIuaWh+S7tuS4i+i9vSI7CiAgICAgICAgICAgIHZhciBib2R5ID0gJzxkaXYgc3R5bGU9InBhZGRpbmc6IDIwcHggMjBweDttaW4taGVpZ2h0OiAxMjBweDsgbWF4LWhlaWdodDogMzAwcHg7IG92ZXJmbG93LXk6IGF1dG87ICI+JzsKCiAgICAgICAgICAgIHZhciBwYWNrTmFtZSA9IG9iai5nZXREb3dubG9hZFBhY2tOYW1lKGZpbGVMaXN0KTsKICAgICAgICAgICAgYm9keSArPSAnPGRpdj4nICsgcGFja05hbWUgKyAnPC9kaXY+PGRpdj48YSBocmVmPSInICsgZGF0YS5kbGluayArICcmemlwbmFtZT0nICsgZW5jb2RlVVJJQ29tcG9uZW50KHBhY2tOYW1lKSArICciIHRpdGxlPSInICsgZGF0YS5kbGluayArICciIHN0eWxlPSJkaXNwbGF5OmJsb2NrOyBvdmVyZmxvdzpoaWRkZW47IHdoaXRlLXNwYWNlOm5vd3JhcDsgdGV4dC1vdmVyZmxvdzplbGxpcHNpczsiPicgKyBkYXRhLmRsaW5rICsgJzwvYT48L2Rpdj4nOwoKICAgICAgICAgICAgYm9keSArPSAnPGRpdiBzdHlsZT0ibWFyZ2luLXRvcDogMTVweDsiPuaJk+WMheeahOaWh+S7ti/mlofku7blpLnliJfooag8L2Rpdj4nOwogICAgICAgICAgICBmaWxlTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkgewogICAgICAgICAgICAgICAgYm9keSArPSAnPGRpdiB0aXRsZT0iJyArIGl0ZW0ucGF0aCArICciIHN0eWxlPSJjb2xvcjogJyArIChpdGVtLmlzZGlyID8gImJsdWUiIDogImluaGVyaXQiKSArICc7Ij5bJyArIChpbmRleCArIDEpICsgJ10gJyArIGl0ZW0uc2VydmVyX2ZpbGVuYW1lICsgJzwvZGl2Pic7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgYm9keSArPSAnPC9kaXY+JzsKICAgICAgICAgICAgdmFyIGZvb3RlciA9IG9iai5yZW5kZXJGb290ZXJBcHBJZCgpOwogICAgICAgICAgICBvYmouc2hvd0RpYWxvZyh0aXRsZSwgYm9keSwgZm9vdGVyKTsKICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0RG93bmxvYWRQYWNrTmFtZSA9IGZ1bmN0aW9uIChmaWxlTGlzdCkgewogICAgICAgICAgICByZXR1cm4gZmlsZUxpc3RbMF0uc2VydmVyX2ZpbGVuYW1lICsgIiDnrYkiICsgZmlsZUxpc3QubGVuZ3RoICsgIuS4quaWh+S7ti56aXAiOwogICAgICAgIH07CgogICAgICAgIG9iai5idWlsZERvd25sb2FkVXJsID0gZnVuY3Rpb24gKHBhdGgsIG5hbWUpIHsKICAgICAgICAgICAgcmV0dXJuICJodHRwczovL3Bjcy5iYWlkdS5jb20vcmVzdC8yLjAvcGNzL2ZpbGU/bWV0aG9kPWRvd25sb2FkJmFwcF9pZD0iICsgb2JqLmdldEFwcElkKCkgKyAiJmZpbGVuYW1lPSIgKyBlbmNvZGVVUklDb21wb25lbnQobmFtZSkgKyAiJnBhdGg9IiArIGVuY29kZVVSSUNvbXBvbmVudChwYXRoKTsKICAgICAgICB9OwoKICAgICAgICBvYmouc2hvd0Rvd25sb2FkU2luZ2xlID0gZnVuY3Rpb24gKGZpbGVMaXN0LCBmaWxlU3RhdCkgewogICAgICAgICAgICB2YXIgdGl0bGUgPSAi6ZO+5o6l57G75Z6LIjsKICAgICAgICAgICAgdmFyIGJvZHkgPSAnPGRpdiBzdHlsZT0icGFkZGluZzogNDBweCAyMHB4OyBtYXgtaGVpZ2h0OiAzMDBweDsgb3ZlcmZsb3cteTogYXV0bzsiPic7CgogICAgICAgICAgICBib2R5ICs9ICc8ZGl2IGNsYXNzPSJub3JtYWxCdG5Cb3ggZy1jZW50ZXIiPic7CiAgICAgICAgICAgIGJvZHkgKz0gJzxhIGNsYXNzPSJnLWJ1dHRvbiBnLWJ1dHRvbi1sYXJnZSBnLWJ1dHRvbi1ncmF5LWxhcmdlIG5kLWJ1dHRvbi1tdWx0aSIgdGl0bGU9Iuiwg+eUqOWumOaWueaOpeWPo+eUn+aIkOmTvuaOpSI+PHNwYW4gY2xhc3M9ImctYnV0dG9uLXJpZ2h0Ij48ZW0gY2xhc3M9Imljb24gaWNvbi1kb3dubG9hZCI+PC9lbT4g5a6Y5pa56ZO+5o6lPC9zcGFuPjwvYT4nOwogICAgICAgICAgICBib2R5ICs9ICc8YSBjbGFzcz0iZy1idXR0b24gZy1idXR0b24tbGFyZ2UgZy1idXR0b24tZ3JheS1sYXJnZSBuZC1idXR0b24tZGlzayIgc3R5bGU9Im1hcmdpbi1sZWZ0OjUwcHg7IiB0aXRsZT0i6L2s5a2Y5paH5Lu254S25ZCO55Sf5oiQ5paH5Lu255u06ZO+Ij48c3BhbiBjbGFzcz0iZy1idXR0b24tcmlnaHQiPjxlbSBjbGFzcz0iaWNvbiBpY29uLXNhdmUtZGlzayI+PC9lbT4g6L2s5a2Y55u06ZO+PC9zcGFuPjwvYT4nOwogICAgICAgICAgICBib2R5ICs9ICc8L2Rpdj4nOwoKICAgICAgICAgICAgaWYgKGZpbGVTdGF0LmRpcl9udW0pIHsKICAgICAgICAgICAgICAgIGJvZHkgKz0gJzxkaXYgc3R5bGU9Im1hcmdpbi10b3A6IDQwcHg7IHBhZGRpbmctdG9wOiAxMHB4OyBtYXJnaW4tYm90dG9tOiAtMjBweDsgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNEMERGRTc7Ij48cCBjbGFzcz0iZy1jZW50ZXIiPumAieaLqSBb5aSa5paH5Lu2XSDkvJrov4fmu6TlvZPliY3pgInkuK3nmoQgPHNwYW4gc3R5bGU9ImNvbG9yOiByZWQiPicgKyBmaWxlU3RhdC5kaXJfbnVtICsgJzwvc3Bhbj4g5Liq5paH5Lu25aS5PC9wPic7CgogICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gMTsKICAgICAgICAgICAgICAgIGZpbGVMaXN0LmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5pc2RpcikgewogICAgICAgICAgICAgICAgICAgICAgICBib2R5ICs9ICc8cCB0aXRsZT0iJyArIGl0ZW0ucGF0aCArICciIHN0eWxlPSJjb2xvcjogYmx1ZTsiPlsnICsgaW5kZXggKyAnXSAnICsgaXRlbS5zZXJ2ZXJfZmlsZW5hbWUgKyAnPC9wPic7CiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4Kys7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBib2R5ICs9ICc8L2Rpdj4nOwogICAgICAgICAgICB9CgogICAgICAgICAgICBib2R5ICs9ICc8L2Rpdj4nOwogICAgICAgICAgICB2YXIgZm9vdGVyID0gb2JqLnJlbmRlckZvb3RlckFwcElkKCk7CiAgICAgICAgICAgIG9iai5zaG93RGlhbG9nKHRpdGxlLCBib2R5LCBmb290ZXIpOwogICAgICAgIH07CgogICAgICAgIG9iai5zaG93RG93bmxvYWRTZWxlY3QgPSBmdW5jdGlvbiAoZmlsZUxpc3QsIGZpbGVTdGF0KSB7CiAgICAgICAgICAgIHZhciB0aXRsZSA9ICLpk77mjqXnsbvlnosiOwogICAgICAgICAgICB2YXIgYm9keSA9ICc8ZGl2IHN0eWxlPSJwYWRkaW5nOiA0MHB4IDIwcHg7IG1heC1oZWlnaHQ6IDMwMHB4OyBvdmVyZmxvdy15OiBhdXRvOyI+JzsKCiAgICAgICAgICAgIGJvZHkgKz0gJzxkaXYgY2xhc3M9Im5vcm1hbEJ0bkJveCBnLWNlbnRlciI+JzsKICAgICAgICAgICAgaWYgKG9iai5pc0hvbWVQYWdlKCkpIHsKICAgICAgICAgICAgICAgIGJvZHkgKz0gJzxhIGNsYXNzPSJnLWJ1dHRvbiBnLWJ1dHRvbi1sYXJnZSBnLWJ1dHRvbi1ncmF5LWxhcmdlIG5kLWJ1dHRvbi1kaXNrIiB0aXRsZT0i5ZCI5bm25a6Y5pa56ZO+5o6l5ZKM5paH5Lu255u06ZO+Ij48c3BhbiBjbGFzcz0iZy1idXR0b24tcmlnaHQiPjxlbSBjbGFzcz0iaWNvbiBpY29uLXNhdmUtZGlzayI+PC9lbT4g5aSa5paH5Lu2PC9zcGFuPjwvYT4nOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgYm9keSArPSAnPGEgY2xhc3M9ImctYnV0dG9uIGctYnV0dG9uLWxhcmdlIGctYnV0dG9uLWdyYXktbGFyZ2UgbmQtYnV0dG9uLW11bHRpIj48c3BhbiBjbGFzcz0iZy1idXR0b24tcmlnaHQiIHRpdGxlPSLosIPnlKjlrpjmlrnmjqXlj6PnlJ/miJDmlofku7bpk77mjqUiPjxlbSBjbGFzcz0iaWNvbiBpY29uLWRvd25sb2FkIj48L2VtPiDlrpjmlrnlpJrmlofku7Y8L3NwYW4+PC9hPic7CiAgICAgICAgICAgICAgICBib2R5ICs9ICc8YSBjbGFzcz0iZy1idXR0b24gZy1idXR0b24tbGFyZ2UgZy1idXR0b24tZ3JheS1sYXJnZSBuZC1idXR0b24tZGlzayIgc3R5bGU9Im1hcmdpbi1sZWZ0OjUwcHg7IiB0aXRsZT0i6L2s5a2Y5paH5Lu254S25ZCO55Sf5oiQ5paH5Lu255u06ZO+Ij48c3BhbiBjbGFzcz0iZy1idXR0b24tcmlnaHQiPjxlbSBjbGFzcz0iaWNvbiBpY29uLXNhdmUtZGlzayI+PC9lbT4g6L2s5a2Y5aSa5paH5Lu2PC9zcGFuPjwvYT4nOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGJvZHkgKz0gJzxhIGNsYXNzPSJnLWJ1dHRvbiBnLWJ1dHRvbi1sYXJnZSBnLWJ1dHRvbi1ncmF5LWxhcmdlIG5kLWJ1dHRvbi1wYWNrIiBzdHlsZT0ibWFyZ2luLWxlZnQ6NTBweDsiIHRpdGxlPSLosIPnlKjlrpjmlrnmjqXlj6PnlJ/miJDljovnvKnljIXpk77mjqUiPjxzcGFuIGNsYXNzPSJnLWJ1dHRvbi1yaWdodCI+PGVtIGNsYXNzPSJpY29uIGljb24tcG9seSI+PC9lbT4g5Y6L57yp5YyFPC9zcGFuPjwvYT4nOwogICAgICAgICAgICBib2R5ICs9ICc8L2Rpdj4nOwoKICAgICAgICAgICAgaWYgKGZpbGVTdGF0LmRpcl9udW0pIHsKICAgICAgICAgICAgICAgIGJvZHkgKz0gJzxkaXYgc3R5bGU9Im1hcmdpbi10b3A6IDQwcHg7IHBhZGRpbmctdG9wOiAxMHB4OyBtYXJnaW4tYm90dG9tOiAtMjBweDsgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNEMERGRTc7Ij48cCBjbGFzcz0iZy1jZW50ZXIiPumAieaLqSBb5aSa5paH5Lu2XSDkvJrov4fmu6TlvZPliY3pgInkuK3nmoQgPHNwYW4gc3R5bGU9ImNvbG9yOiByZWQiPicgKyBmaWxlU3RhdC5kaXJfbnVtICsgJzwvc3Bhbj4g5Liq5paH5Lu25aS5PC9wPic7CiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSAxOwogICAgICAgICAgICAgICAgZmlsZUxpc3QuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICAgICAgICAgIGlmIChpdGVtLmlzZGlyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkgKz0gJzxwIHRpdGxlPSInICsgaXRlbS5wYXRoICsgJyIgc3R5bGU9ImNvbG9yOiBibHVlOyI+WycgKyBpbmRleCArICddICcgKyBpdGVtLnNlcnZlcl9maWxlbmFtZSArICc8L3A+JzsKICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXgrKzsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIGJvZHkgKz0gJzwvZGl2Pic7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGJvZHkgKz0gJzwvZGl2Pic7CiAgICAgICAgICAgIHZhciBmb290ZXIgPSBvYmoucmVuZGVyRm9vdGVyQXBwSWQoKTsKICAgICAgICAgICAgb2JqLnNob3dEaWFsb2codGl0bGUsIGJvZHksIGZvb3Rlcik7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnNob3dBcHBJZENoYW5nZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIHRpdGxlID0gIuW6lOeUqElEIjsKICAgICAgICAgICAgdmFyIGJvZHkgPSAnPGRpdiBzdHlsZT0icGFkZGluZzogNjBweCAyMHB4OyBtYXgtaGVpZ2h0OiAzMDBweDsgb3ZlcmZsb3cteTogYXV0bzsiPjxkaXYgY2xhc3M9ImctY2VudGVyIiBzdHlsZT0ibWFyZ2luLWJvdHRvbTogMTBweDsiPuW9k+WJjeW6lOeUqElE77yaPGlucHV0IHR5cGU9InRleHQiIGNsYXNzPSJuZC1pbnB1dC1hcHAtaWQiIHN0eWxlPSJib3JkZXI6IDFweCBzb2xpZCAjZjJmMmYyOyBwYWRkaW5nOiA0cHggNXB4OyIgdmFsdWU9IicgKyBvYmouZ2V0QXBwSWQoKSArICciPjwvZGl2PjxkaXYgY2xhc3M9ImctY2VudGVyIj48cD7nlKjkuo7mnoTpgKDkuKrkurrnvZHnm5jmlofku7bnmoTkuIvovb3nm7Tpk77vvIzmm7TlpJrlupTnlKhJROivt+afpeecizxhIHRhcmdldD0iX2JsYW5rIiBocmVmPSJodHRwOi8vZ28ubmV3ZGF5Lm1lL3MvcGFuLXNjcmlwdCI+IOiEmuacrOS4u+mhtSA8L2E+PC9wPjwvZGl2PjwvZGl2Pic7CiAgICAgICAgICAgIHZhciBmb290ZXIgPSAnJzsKICAgICAgICAgICAgb2JqLnNob3dEaWFsb2codGl0bGUsIGJvZHksIGZvb3Rlcik7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnNob3dEaWFsb2dVbktub3duUmVzcG9uc2UgPSBmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgdmFyIHRpdGxlID0gIuacquefpee7k+aenCI7CiAgICAgICAgICAgIHZhciBib2R5ID0gJzxkaXYgc3R5bGU9InBhZGRpbmc6IDIwcHggMjBweDsgbWF4LWhlaWdodDogMzAwcHg7IG92ZXJmbG93LXk6IGF1dG87Ij48cHJlIHN0eWxlPSJ3aGl0ZS1zcGFjZTogcHJlLXdyYXA7IHdvcmQtd3JhcDogYnJlYWstd29yZDsgd29yZC1icmVhazogYnJlYWstYWxsOyI+JyArIEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlLCBudWxsLCA0KSArICc8L3ByZT48L2Rpdj4nOwogICAgICAgICAgICB2YXIgZm9vdGVyID0gb2JqLnJlbmRlckZvb3RlckFwcElkKCk7CiAgICAgICAgICAgIG9iai5zaG93RGlhbG9nKHRpdGxlLCBib2R5LCBmb290ZXIpOwogICAgICAgIH07CgogICAgICAgIG9iai5yZW5kZXJGb290ZXJBcHBJZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuICc8cCBzdHlsZT0icGFkZGluZy10b3A6IDEwcHg7IGJvcmRlci10b3A6IDFweCBzb2xpZCAjRDBERkU3OyI+5bqU55SoSUTvvJonICsgb2JqLmdldEFwcElkKCkgKyAnIDxhIGhyZWY9ImphdmFzY3JpcHQ6OyIgY2xhc3M9Im5kLWNoYW5nZS1hcHAtaWQiPuS/ruaUuTwvYT7vvIzlhbbku5bpobXpnaLvvJogPGEgY2xhc3M9Im5kLW9wZW4tcGFnZS1vcHRpb24iIGhyZWY9ImphdmFzY3JpcHQ6OyI+6YWN572u6aG16Z2iPC9hPiDjgIE8YSBjbGFzcz0ibmQtb3Blbi1wYWdlLXRlbXAiIGhyZWY9ImphdmFzY3JpcHQ6OyI+5Li05pe25paH5Lu2PC9hPjwvcD4nOwogICAgICAgIH07CgogICAgICAgIG9iai5zaG93RGlhbG9nID0gZnVuY3Rpb24gKHRpdGxlLCBib2R5LCBmb290ZXIpIHsKICAgICAgICAgICAgdmFyIGRpYWxvZyA9IG9iai5yZXF1aXJlKCJzeXN0ZW0tY29yZTpzeXN0ZW0vdWlTZXJ2aWNlL2RpYWxvZy9kaWFsb2cuanMiKS52ZXJpZnkoewogICAgICAgICAgICAgICAgdGl0bGU6IHRpdGxlLAogICAgICAgICAgICAgICAgaW1nOiAiaW1nIiwKICAgICAgICAgICAgICAgIHZjb2RlOiAidmNvZGUiCiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgLy8g5YaF5a65CiAgICAgICAgICAgICQoZGlhbG9nLiRkaWFsb2cpLmZpbmQoIi5kaWFsb2ctYm9keSIpLnNhZmVIdG1sKGJvZHkpOwoKICAgICAgICAgICAgLy8g5bqV6YOoCiAgICAgICAgICAgICQoZGlhbG9nLiRkaWFsb2cpLmZpbmQoIi5kaWFsb2ctZm9vdGVyIikuc2FmZUh0bWwoZm9vdGVyKTsKCiAgICAgICAgICAgIGRpYWxvZy5zaG93KCk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnNob3dUaXBTdWNjZXNzID0gZnVuY3Rpb24gKG1zZywgaGFzQ2xvc2UsIGF1dG9DbG9zZSkgewogICAgICAgICAgICBvYmouc2hvd1RpcCgic3VjY2VzcyIsIG1zZywgaGFzQ2xvc2UsIGF1dG9DbG9zZSk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnNob3dUaXBFcnJvciA9IGZ1bmN0aW9uIChtc2csIGhhc0Nsb3NlLCBhdXRvQ2xvc2UpIHsKICAgICAgICAgICAgb2JqLnNob3dUaXAoImZhaWx1cmUiLCBtc2csIGhhc0Nsb3NlLCBhdXRvQ2xvc2UpOwogICAgICAgIH07CgogICAgICAgIG9iai5zaG93VGlwTG9hZGluZyA9IGZ1bmN0aW9uIChtc2csIGhhc0Nsb3NlLCBhdXRvQ2xvc2UpIHsKICAgICAgICAgICAgb2JqLnNob3dUaXAoImxvYWRpbmciLCBtc2csIGhhc0Nsb3NlLCBhdXRvQ2xvc2UpOwogICAgICAgIH07CgogICAgICAgIG9iai5zaG93VGlwID0gZnVuY3Rpb24gKG1vZGUsIG1zZywgaGFzQ2xvc2UsIGF1dG9DbG9zZSkgewogICAgICAgICAgICB2YXIgb3B0aW9uID0gewogICAgICAgICAgICAgICAgbW9kZTogbW9kZSwKICAgICAgICAgICAgICAgIG1zZzogbXNnCiAgICAgICAgICAgIH07CgogICAgICAgICAgICAvLyDlhbPpl63mjInpkq4KICAgICAgICAgICAgaWYgKHR5cGVvZiBoYXNDbG9zZSAhPSAidW5kZWZpbmVkIikgewogICAgICAgICAgICAgICAgb3B0aW9uLmhhc0Nsb3NlID0gaGFzQ2xvc2U7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIOiHquWKqOWFs+mXrQogICAgICAgICAgICBpZiAodHlwZW9mIGF1dG9DbG9zZSAhPSAidW5kZWZpbmVkIikgewogICAgICAgICAgICAgICAgb3B0aW9uLmF1dG9DbG9zZSA9IGF1dG9DbG9zZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgb2JqLnJlcXVpcmUoInN5c3RlbS1jb3JlOnN5c3RlbS91aVNlcnZpY2UvdGlwL3RpcC5qcyIpLnNob3cob3B0aW9uKTsKICAgICAgICB9OwoKICAgICAgICBvYmouaGlkZVRpcCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgb2JqLnJlcXVpcmUoInN5c3RlbS1jb3JlOnN5c3RlbS91aVNlcnZpY2UvdGlwL3RpcC5qcyIpLmhpZGUoewogICAgICAgICAgICAgICAgaGlkZVRpcHNBbmltYXRpb25GbGFnOiAxCiAgICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgIG9iai5pc0hvbWVQYWdlID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgdXJsID0gcm91dGVyLmdldFVybCgpOwogICAgICAgICAgICBpZiAodXJsLmluZGV4T2YoIi5iYWlkdS5jb20vZGlzayIpID4gMCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBvYmouaXNUaW1lbGluZVBhZ2UgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciB1cmwgPSByb3V0ZXIuZ2V0VXJsKCk7CiAgICAgICAgICAgIGlmICh1cmwuaW5kZXhPZigiLmJhaWR1LmNvbS9kaXNrL3RpbWVsaW5lIikgPiAwKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIG9iai5pc1NoYXJlUGFnZU11bHRpID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgeXVuRGF0YSA9IG9iai5nZXRZdW5EYXRhKCk7CiAgICAgICAgICAgIGlmICh5dW5EYXRhLlNIQVJFUEFHRVRZUEUgPT0gInNpbmdsZV9maWxlX3BhZ2UiKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIG9iai5nZXRTZWxlY3RlZEZpbGVMaXN0ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICBpZiAob2JqLmlzSG9tZVBhZ2UoKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIG9iai5nZXRTZWxlY3RlZEZpbGVMaXN0SG9tZSgpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIG9iai5nZXRTZWxlY3RlZEZpbGVMaXN0U2hhcmUoKTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIG9iai5nZXRTZWxlY3RlZEZpbGVMaXN0SG9tZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgaWYgKG9iai5pc1RpbWVsaW5lUGFnZSgpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gb2JqLnJlcXVpcmUoInBhbi10aW1lbGluZTp3aWRnZXQvc3RvcmUvaW5kZXguanMiKS5nZXR0ZXJzLmdldENob29zZWRJdGVtQXJyOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIG9iai5yZXF1aXJlKCdzeXN0ZW0tY29yZTpjb250ZXh0L2NvbnRleHQuanMnKS5pbnN0YW5jZUZvclN5c3RlbS5saXN0LmdldFNlbGVjdGVkKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0U2VsZWN0ZWRGaWxlTGlzdFNoYXJlID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gb2JqLnJlcXVpcmUoJ3N5c3RlbS1jb3JlOmNvbnRleHQvY29udGV4dC5qcycpLmluc3RhbmNlRm9yU3lzdGVtLmxpc3QuZ2V0U2VsZWN0ZWQoKTsKICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0RmlsZUxpc3RTdGF0ID0gZnVuY3Rpb24gKGZpbGVMaXN0KSB7CiAgICAgICAgICAgIHZhciBmaWxlU3RhdCA9IHsKICAgICAgICAgICAgICAgIGZpbGVfbnVtOiAwLAogICAgICAgICAgICAgICAgZGlyX251bTogMAogICAgICAgICAgICB9OwogICAgICAgICAgICBmaWxlTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgICAgICBpZiAoaXRlbS5pc2RpciA9PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgZmlsZVN0YXQuZmlsZV9udW0rKzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIGZpbGVTdGF0LmRpcl9udW0rKzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybiBmaWxlU3RhdDsKICAgICAgICB9OwoKICAgICAgICBvYmouZmlsdGVyRmlsZUxpc3REaXIgPSBmdW5jdGlvbiAoZmlsZUxpc3QpIHsKICAgICAgICAgICAgdmFyIGZpbGVMaXN0RmlsdGVyID0gW107CiAgICAgICAgICAgIGZpbGVMaXN0LmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICAgIGlmIChpdGVtLmlzZGlyID09IDApIHsKICAgICAgICAgICAgICAgICAgICBmaWxlTGlzdEZpbHRlci5wdXNoKGl0ZW0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuIGZpbGVMaXN0RmlsdGVyOwogICAgICAgIH07CgogICAgICAgIG9iai5wYXJzZUZpZExpc3QgPSBmdW5jdGlvbiAoZmlsZUxpc3QpIHsKICAgICAgICAgICAgdmFyIGZpZExpc3QgPSBbXTsKICAgICAgICAgICAgZmlsZUxpc3QuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICAgICAgZmlkTGlzdC5wdXNoKGl0ZW0uZnNfaWQpOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgcmV0dXJuIGZpZExpc3Q7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmdldERvd25sb2FkU2hhcmUgPSBmdW5jdGlvbiAoZmlsZUxpc3QsIHBhY2ssIGNhbGxiYWNrKSB7CiAgICAgICAgICAgIG9iai5zaG93VGlwTG9hZGluZygi55Sf5oiQ6ZO+5o6l5Lit77yM6K+356iN562JLi4uIik7CiAgICAgICAgICAgIG9iai5pbml0V2lkZ2V0Q29udGV4dCgiZnVuY3Rpb24td2lkZ2V0LTE6ZG93bmxvYWQvdXRpbC9jb250ZXh0LmpzIik7CiAgICAgICAgICAgIG9iai5hc3luYygiZnVuY3Rpb24td2lkZ2V0LTE6ZG93bmxvYWQvc2VydmljZS9kbGlua1NlcnZpY2UuanMiLCBmdW5jdGlvbiAoZGwpIHsKICAgICAgICAgICAgICAgIHZhciB5dW5EYXRhID0gb2JqLmdldFl1bkRhdGEoKTsKICAgICAgICAgICAgICAgIHZhciBkYXRhID0gewogICAgICAgICAgICAgICAgICAgIGxpc3Q6IGZpbGVMaXN0LAogICAgICAgICAgICAgICAgICAgIHNoYXJlX3VrOiB5dW5EYXRhLlNIQVJFX1VLLAogICAgICAgICAgICAgICAgICAgIHNoYXJlX2lkOiB5dW5EYXRhLlNIQVJFX0lELAogICAgICAgICAgICAgICAgICAgIHNpZ246IHl1bkRhdGEuU0lHTiwKICAgICAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IHl1bkRhdGEuVElNRVNUQU1QLAogICAgICAgICAgICAgICAgICAgIHR5cGU6IHBhY2sgPyAiYmF0Y2giIDogIm5vbGltaXQiCiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgZGwuZ2V0RGxpbmtTaGFyZShkYXRhLCBjYWxsYmFjayk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgIG9iai5nZXREb3dubG9hZEhvbWUgPSBmdW5jdGlvbiAoZmlsZUxpc3QsIHBhY2ssIGNhbGxiYWNrKSB7CiAgICAgICAgICAgIG9iai5zaG93VGlwTG9hZGluZygi55Sf5oiQ6ZO+5o6l5Lit77yM6K+356iN562JLi4uIik7CiAgICAgICAgICAgIG9iai5pbml0V2lkZ2V0Q29udGV4dCgiZnVuY3Rpb24td2lkZ2V0LTE6ZG93bmxvYWQvdXRpbC9jb250ZXh0LmpzIik7CiAgICAgICAgICAgIG9iai5hc3luYygiZnVuY3Rpb24td2lkZ2V0LTE6ZG93bmxvYWQvc2VydmljZS9kbGlua1NlcnZpY2UuanMiLCBmdW5jdGlvbiAoZGwpIHsKICAgICAgICAgICAgICAgIHZhciBmaWRMaXN0ID0gb2JqLnBhcnNlRmlkTGlzdChmaWxlTGlzdCk7CiAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IHBhY2sgPyAiYmF0Y2giIDogIm5vbGltaXQiOwogICAgICAgICAgICAgICAgZGwuZ2V0RGxpbmtQYW4oSlNPTi5zdHJpbmdpZnkoZmlkTGlzdCksIHR5cGUsIGNhbGxiYWNrKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmFwcGx5VHJhbnNmZXJGaWxlID0gZnVuY3Rpb24gKGZpbGVMaXN0LCBwYXRoLCBjYWxsYmFjaykgewogICAgICAgICAgICBvYmoubGlzdERpcihwYXRoLCBmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSAmJiByZXNwb25zZS5lcnJubyA9PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgb2JqLnRyYW5zZmVyRmlsZShmaWxlTGlzdCwgcGF0aCwgY2FsbGJhY2spOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSBpZiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgICBvYmouY3JlYXRlRGlyKHBhdGgsIGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UgJiYgcmVzcG9uc2UuZXJybm8gPT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnRyYW5zZmVyRmlsZShmaWxlTGlzdCwgcmVzcG9uc2UucGF0aCwgY2FsbGJhY2spOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soIiIpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygiIik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgIG9iai50cmFuc2ZlckZpbGUgPSBmdW5jdGlvbiAoZmlsZUxpc3QsIHBhdGgsIGNhbGxiYWNrKSB7CiAgICAgICAgICAgIHZhciB5dW5EYXRhID0gb2JqLmdldFl1bkRhdGEoKTsKICAgICAgICAgICAgdmFyIGZpZExpc3QgPSBvYmoucGFyc2VGaWRMaXN0KGZpbGVMaXN0KTsKICAgICAgICAgICAgdmFyIHVybCA9ICIvc2hhcmUvdHJhbnNmZXI/b25kdXA9bmV3Y29weSZhc3luYz0xJnNoYXJlaWQ9IiArIHl1bkRhdGEuU0hBUkVfSUQgKyAiJmZyb209IiArIHl1bkRhdGEuU0hBUkVfVUs7CiAgICAgICAgICAgIHZhciBkYXRhID0gewogICAgICAgICAgICAgICAgZnNpZGxpc3Q6ICJbIiArIGZpZExpc3Quam9pbigiLCIpICsgIl0iLAogICAgICAgICAgICAgICAgcGF0aDogcGF0aAogICAgICAgICAgICB9OwogICAgICAgICAgICBvYmouYWpheCh7CiAgICAgICAgICAgICAgICB0eXBlOiAicG9zdCIsCiAgICAgICAgICAgICAgICB1cmw6IHVybCwKICAgICAgICAgICAgICAgIGRhdGE6IGRhdGEsCiAgICAgICAgICAgICAgICBkYXRhVHlwZTogImpzb24iLAogICAgICAgICAgICAgICAgdGltZW91dDogMWU1LAogICAgICAgICAgICAgICAgZXJyb3I6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjaygiIik7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2socmVzcG9uc2UpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICBvYmoubGlzdERpciA9IGZ1bmN0aW9uIChwYXRoLCBjYWxsYmFjaykgewogICAgICAgICAgICB2YXIgdXJsID0gIi9hcGkvbGlzdCI7CiAgICAgICAgICAgIG9iai5hamF4KHsKICAgICAgICAgICAgICAgIHR5cGU6ICJnZXQiLAogICAgICAgICAgICAgICAgdXJsOiB1cmwsCiAgICAgICAgICAgICAgICBkYXRhOiB7CiAgICAgICAgICAgICAgICAgICAgb3JkZXI6ICJuYW1lIiwKICAgICAgICAgICAgICAgICAgICBkZXNjOiAwLAogICAgICAgICAgICAgICAgICAgIHNob3dlbXB0eTogMCwKICAgICAgICAgICAgICAgICAgICB3ZWI6IDEsCiAgICAgICAgICAgICAgICAgICAgcGFnZTogMSwKICAgICAgICAgICAgICAgICAgICBudW06IDEwLAogICAgICAgICAgICAgICAgICAgIGRpcjogcGF0aAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAianNvbiIsCiAgICAgICAgICAgICAgICB0aW1lb3V0OiAxZTUsCiAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKCIiKTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhyZXNwb25zZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgIG9iai5jcmVhdGVEaXIgPSBmdW5jdGlvbiAocGF0aCwgY2FsbGJhY2spIHsKICAgICAgICAgICAgdmFyIHVybCA9ICIvYXBpL2NyZWF0ZT9hPWNvbW1pdCI7CiAgICAgICAgICAgIG9iai5hamF4KHsKICAgICAgICAgICAgICAgIHR5cGU6ICJwb3N0IiwKICAgICAgICAgICAgICAgIHVybDogdXJsLAogICAgICAgICAgICAgICAgZGF0YTogewogICAgICAgICAgICAgICAgICAgIHBhdGg6IHBhdGgsCiAgICAgICAgICAgICAgICAgICAgaXNkaXI6IDEsCiAgICAgICAgICAgICAgICAgICAgYmxvY2tfbGlzdDogIltdIgogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGRhdGFUeXBlOiAianNvbiIsCiAgICAgICAgICAgICAgICB0aW1lb3V0OiAxZTUsCiAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKCIiKTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayAmJiBjYWxsYmFjayhyZXNwb25zZSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgIG9iai5nZXRTaGFyZUlkID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgbWF0Y2g7CgogICAgICAgICAgICBtYXRjaCA9IGxvY2F0aW9uLmhyZWYubWF0Y2goL3NoYXJlXC9pbml0XD9zdXJsPShbYS16MC05LV9dKykvaSk7CiAgICAgICAgICAgIGlmIChtYXRjaCkgewogICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoWzFdOwogICAgICAgICAgICB9CgogICAgICAgICAgICBtYXRjaCA9IGxvY2F0aW9uLnBhdGhuYW1lLm1hdGNoKC9cL3NcLzEoW2EtejAtOS1fXSspL2kpOwogICAgICAgICAgICBpZiAobWF0Y2gpIHsKICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaFsxXTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmlzUHdkU2hhcmVPcGVuID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gb3B0aW9uLmlzT3B0aW9uQWN0aXZlKG9wdGlvbi5jb25zdGFudC5iYWlkdV9zaGFyZV9zdGF0dXMpOwogICAgICAgIH07CgogICAgICAgIG9iai5nZXRZdW5EYXRhID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICBpZiAoIW9iai55dW5fZGF0YSkgewogICAgICAgICAgICAgICAgb2JqLnl1bl9kYXRhID0gdW5zYWZlV2luZG93Lnl1bkRhdGE7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIG9iai55dW5fZGF0YTsKICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0VGVtcFBhdGggPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciB0ZW1wUGF0aCA9IGNvbmZpZy5nZXRDb25maWcoInRlbXBfcGF0aCIpOwogICAgICAgICAgICBpZiAodGVtcFBhdGgpIHsKICAgICAgICAgICAgICAgIHJldHVybiB0ZW1wUGF0aDsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiBvYmoudGVtcF9wYXRoOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnNldFRlbXBQYXRoID0gZnVuY3Rpb24gKHRlbXBQYXRoKSB7CiAgICAgICAgICAgIGNvbmZpZy5zZXRDb25maWcoInRlbXBfcGF0aCIsIHRlbXBQYXRoKTsKICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0QXBwSWQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBhcHBJZCA9IGNvbmZpZy5nZXRDb25maWcoImFwcF9pZCIpOwogICAgICAgICAgICBpZiAoYXBwSWQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBhcHBJZDsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiBvYmouYXBwX2lkOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnNldEFwcElkID0gZnVuY3Rpb24gKGFwcElkKSB7CiAgICAgICAgICAgIGNvbmZpZy5zZXRDb25maWcoImFwcF9pZCIsIGFwcElkKTsKICAgICAgICB9OwoKICAgICAgICBvYmouaW5pdFdpZGdldENvbnRleHQgPSBmdW5jdGlvbiAobmFtZSkgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgb2JqLmFzeW5jKG5hbWUsIGZ1bmN0aW9uICh3aWRnZXQpIHsKICAgICAgICAgICAgICAgICAgICB3aWRnZXQuc2V0Q29udGV4dChvYmouZ2V0U3lzdGVtQ29udGV4dCgpKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGNhdGNoIChlcnIpIHsgfQogICAgICAgIH07CgogICAgICAgIG9iai5hamF4ID0gZnVuY3Rpb24gKG9wdGlvbikgewogICAgICAgICAgICBvYmouZ2V0SnF1ZXJ5KCkuYWpheChvcHRpb24pOwogICAgICAgIH07CgogICAgICAgIG9iai5nZXRTeXN0ZW1Db250ZXh0ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gb2JqLnJlcXVpcmUoInN5c3RlbS1jb3JlOmNvbnRleHQvY29udGV4dC5qcyIpLmluc3RhbmNlRm9yU3lzdGVtOwogICAgICAgIH07CgogICAgICAgIG9iai5nZXRKcXVlcnkgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiBvYmoucmVxdWlyZSgiYmFzZTp3aWRnZXQvbGlicy9qcXVlcnlwYWNrZXQuanMiKTsKICAgICAgICB9OwoKICAgICAgICBvYmoucmVxdWlyZSA9IGZ1bmN0aW9uIChuYW1lKSB7CiAgICAgICAgICAgIHJldHVybiB1bnNhZmVXaW5kb3cucmVxdWlyZShuYW1lKTsKICAgICAgICB9OwoKICAgICAgICBvYmouYXN5bmMgPSBmdW5jdGlvbiAobmFtZSwgY2FsbGJhY2spIHsKICAgICAgICAgICAgdW5zYWZlV2luZG93LnJlcXVpcmUuYXN5bmMobmFtZSwgY2FsbGJhY2spOwogICAgICAgIH07CgogICAgICAgIHJldHVybiBvYmo7CiAgICB9KTsKCiAgICBjb250YWluZXIuZGVmaW5lKCJhcHBfd2VpeXVuIiwgWyJyb3V0ZXIiLCAib3B0aW9uIiwgImxvZ2dlciIsICJ1bnNhZmVXaW5kb3ciLCAiY29uc3RhbnQiLCAicnVudGltZSIsICJhcGkiLCAic2hhcmVMb2ciLCAiJCJdLCBmdW5jdGlvbiAocm91dGVyLCBvcHRpb24sIGxvZ2dlciwgdW5zYWZlV2luZG93LCBjb25zdGFudCwgcnVudGltZSwgYXBpLCBzaGFyZUxvZywgJCkgewogICAgICAgIHZhciBvYmogPSB7CiAgICAgICAgICAgIG1vZHVsZXM6IHt9LAogICAgICAgICAgICB3ZWJwYWNrX3JlcXVpcmU6IG51bGwsCiAgICAgICAgICAgIHZlcmlmeV9wYWdlOiB7CiAgICAgICAgICAgICAgICBzZXRQd2Q6IG51bGwsCiAgICAgICAgICAgICAgICBzaGFyZV9wd2Q6IG51bGwsCiAgICAgICAgICAgICAgICBzdWJtaXRfcHdkOiBudWxsCiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBvYmoucnVuID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgdXJsID0gcm91dGVyLmdldFVybCgpOwogICAgICAgICAgICBpZiAodXJsLmluZGV4T2YoIndlaXl1bi5jb20vZGlzayIpID4gMCkgewogICAgICAgICAgICAgICAgb3B0aW9uLmlzT3B0aW9uQWN0aXZlKG9wdGlvbi5jb25zdGFudC53ZWl5dW5fcGFnZV9ob21lKSAmJiBvYmouaW5pdEhvbWVQYWdlKCk7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIGlmICh1cmwuaW5kZXhPZigic2hhcmUud2VpeXVuLmNvbSIpID4gMCkgewogICAgICAgICAgICAgICAgb2JqLmluaXRWZXJpZnlQYWdlKCk7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIG9iai5pbml0SG9tZVBhZ2UgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIG9iai5pbml0V2VicGFja1JlcXVpcmUoKTsKCiAgICAgICAgICAgIHNldEludGVydmFsKG9iai5pbml0SG9tZVBhZ2VFbGVtZW50LCAxMDAwKTsKICAgICAgICB9OwoKICAgICAgICBvYmouaW5pdEhvbWVQYWdlRWxlbWVudCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIHRlbXBsYXRlID0gJzxkaXYgY2xhc3M9ImFjdGlvbi1pdGVtIG1vZC1hY3Rpb24td3JhcC1saW5rIj48ZGl2IGNsYXNzPSJhY3Rpb24taXRlbS1jb24iPjxpIGNsYXNzPSJpY29uIGljb24tbGluayI+PC9pPjxzcGFuIGNsYXNzPSJhY3QtdHh0Ij7mmL7npLrpk77mjqU8L3NwYW4+PC9kaXY+PC9kaXY+JzsKICAgICAgICAgICAgJCgiLm1vZC1hY3Rpb24td3JhcC1tZW51Om5vdCgubmQtc2hvdy1saW5rLWFscmVhZHkpIikuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpOwogICAgICAgICAgICAgICAgaWYgKCR0aGlzLmZpbmQoIi5pY29uLWRvd25sb2FkIikpIHsKICAgICAgICAgICAgICAgICAgICAkdGhpcy5hZGRDbGFzcygibmQtc2hvdy1saW5rLWFscmVhZHkiKTsKCiAgICAgICAgICAgICAgICAgICAgJHRoaXMucHJlcGVuZCh0ZW1wbGF0ZSk7CiAgICAgICAgICAgICAgICAgICAgJHRoaXMuZmluZCgiLm1vZC1hY3Rpb24td3JhcC1saW5rIikuY2xpY2soZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsKICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnNob3dIb21lRG93bmxvYWQoKTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmluaXRWZXJpZnlQYWdlID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICBvYmouaW5pdFdlYnBhY2tSZXF1aXJlKCk7CgogICAgICAgICAgICBpZiAob3B0aW9uLmlzT3B0aW9uQWN0aXZlKG9wdGlvbi5jb25zdGFudC53ZWl5dW5fcGFnZV92ZXJpZnkpKSB7CiAgICAgICAgICAgICAgICBvYmoucmVnaXN0ZXJTdG9yZVNoYXJlUHdkKCk7CgogICAgICAgICAgICAgICAgb2JqLmluaXRWZXJpZnlQYWdlRWxlbWVudChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgb2JqLmF1dG9QYWRkaW5nU2hhcmVQd2QoKTsKICAgICAgICAgICAgICAgICAgICBvYmoucmVnaXN0ZXJQd2RTaGFyZVN3aXRjaCgpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGlmIChvcHRpb24uaXNPcHRpb25BY3RpdmUob3B0aW9uLmNvbnN0YW50LndlaXl1bl9wYWdlX3NoYXJlKSAmJiB1bnNhZmVXaW5kb3cuc3luY0RhdGEuc2hhcmVJbmZvLm5vdGVfbGlzdC5sZW5ndGggPT0gMCkgewogICAgICAgICAgICAgICAgb2JqLmluaXRTaGFyZVBhZ2UoKTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIG9iai5pbml0U2hhcmVQYWdlID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICBpZiAoJCgiLm1vZC1hY3Rpb24td3JhcC1saW5rIikubGVuZ3RoID09IDApIHsKICAgICAgICAgICAgICAgIHZhciBodG1sID0gJzxkaXYgY2xhc3M9Im1vZC1hY3Rpb24td3JhcCBtb2QtYWN0aW9uLXdyYXAtbWVudSBtb2QtYWN0aW9uLXdyYXAtbGluayBjbGVhcmZpeCI+PGRpdiBjbGFzcz0iYWN0aW9uLWl0ZW0iPjxkaXYgY2xhc3M9ImFjdGlvbi1pdGVtLWNvbiI+PGkgY2xhc3M9Imljb24gaWNvbi1saW5rIj48L2k+PHNwYW4gY2xhc3M9ImFjdC10eHQiPuaYvuekuumTvuaOpTwvc3Bhbj48L2Rpdj48L2Rpdj48L2Rpdj4nOwogICAgICAgICAgICAgICAgJCgiLm1vZC1hY3Rpb24td3JhcC1jb2RlIikuYWZ0ZXIoaHRtbCk7CgogICAgICAgICAgICAgICAgJCgiLm1vZC1hY3Rpb24td3JhcC1saW5rIikuY2xpY2soZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOwogICAgICAgICAgICAgICAgICAgIG9iai5zaG93U2hhcmVEb3dubG9hZCgpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgc2V0VGltZW91dChvYmouaW5pdFNoYXJlUGFnZSwgNTAwKTsKICAgICAgICB9OwoKICAgICAgICBvYmouaW5pdFZlcmlmeVBhZ2VFbGVtZW50ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7CiAgICAgICAgICAgIHZhciBzaGFyZUlkID0gb2JqLmdldFNoYXJlSWQoKTsKICAgICAgICAgICAgdmFyICRwd2QgPSAkKCIuY2FyZC1pbm5lciAuaW5wdXQtdHh0W3R5cGU9J3Bhc3N3b3JkJ10iKTsKICAgICAgICAgICAgdmFyICRidXR0b24gPSAkKCIuY2FyZC1pbm5lciAuYnRuLW1haW4iKTsKICAgICAgICAgICAgaWYgKHNoYXJlSWQgJiYgJHB3ZC5sZW5ndGggJiYgJGJ1dHRvbi5sZW5ndGgpIHsKCiAgICAgICAgICAgICAgICAvLyDmmL7npLrliIbkuqvlr4bnoIEKICAgICAgICAgICAgICAgICRwd2QuYXR0cigidHlwZSIsICJ0ZXh0Iik7CgogICAgICAgICAgICAgICAgLy8g6K6+572u5YiG5Lqr5a+G56CBCiAgICAgICAgICAgICAgICBvYmoudmVyaWZ5X3BhZ2Uuc2V0UHdkID0gZnVuY3Rpb24gKHB3ZCkgewogICAgICAgICAgICAgICAgICAgICRwd2QudmFsKHB3ZCk7CiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIC8vIOmHjemAoOaMiemSrgogICAgICAgICAgICAgICAgdmFyICRpdGVtQnV0dG9uID0gJGJ1dHRvbi5wYXJlbnQoKTsKICAgICAgICAgICAgICAgICRpdGVtQnV0dG9uLnNhZmVIdG1sKCRidXR0b24ucHJvcCgib3V0ZXJIVE1MIikpOwogICAgICAgICAgICAgICAgJGJ1dHRvbiA9ICRpdGVtQnV0dG9uLmZpbmQoIi5idG4tbWFpbiIpOwoKICAgICAgICAgICAgICAgIC8vIOaMiemSruS6i+S7tgogICAgICAgICAgICAgICAgJGJ1dHRvbi5vbigiY2xpY2siLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgb2JqLmdldFN0b3JlKCkgJiYgb2JqLmdldFN0b3JlKCkuZGlzcGF0Y2goInNoYXJlSW5mby9sb2FkU2hhcmVJbmZvV2l0aG91dExvZ2luIiwgJHB3ZC52YWwoKSk7CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAvLyDmj5DkuqTlr4bnoIEKICAgICAgICAgICAgICAgIG9iai52ZXJpZnlfcGFnZS5zdWJtaXRfcHdkID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICRidXR0b24uY2xpY2soKTsKICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2soKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIG9iai5pbml0VmVyaWZ5UGFnZUVsZW1lbnQoY2FsbGJhY2spOwogICAgICAgICAgICAgICAgfSwgNTAwKTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIG9iai5hdXRvUGFkZGluZ1NoYXJlUHdkID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgc2hhcmVJZCA9IG9iai5nZXRTaGFyZUlkKCk7CiAgICAgICAgICAgIHZhciBzaGFyZUxpbmsgPSBvYmouZ2V0U2hhcmVMaW5rKCk7CiAgICAgICAgICAgIGFwaS5xdWVyeVNoYXJlUHdkKGNvbnN0YW50LnNvdXJjZS53ZWl5dW4sIHNoYXJlSWQsIHNoYXJlTGluaywgZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UgJiYgcmVzcG9uc2UuY29kZSA9PSAxKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHNoYXJlUHdkID0gcmVzcG9uc2UuZGF0YS5zaGFyZV9wd2Q7CiAgICAgICAgICAgICAgICAgICAgb2JqLnZlcmlmeV9wYWdlLnNoYXJlX3B3ZCA9IHNoYXJlUHdkOwogICAgICAgICAgICAgICAgICAgIG9iai52ZXJpZnlfcGFnZS5zZXRQd2Qoc2hhcmVQd2QpOwogICAgICAgICAgICAgICAgICAgIG9iai5zaG93VGlwU3VjY2Vzcygi5aGr5YWF5a+G56CB5oiQ5YqfIik7CgogICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb24uaXNPcHRpb25BY3RpdmUob3B0aW9uLmNvbnN0YW50LndlaXl1bl9hdXRvX2p1bXApKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG9iai52ZXJpZnlfcGFnZS5zdWJtaXRfcHdkICYmIG9iai52ZXJpZnlfcGFnZS5zdWJtaXRfcHdkKCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgb2JqLnNob3dUaXBFcnJvcigi5pqC5peg5Lq65YiG5Lqr5a+G56CBIik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgIG9iai5yZWdpc3RlclB3ZFNoYXJlU3dpdGNoID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAvLyDmt7vliqDlvIDlhbMKICAgICAgICAgICAgJCgiLmNhcmQtaW5uZXIgLmZvcm0taXRlbS1sYWJlbCAuZm9ybS1pdGVtLXRpdCIpLnNhZmVIdG1sKCc8c3BhbiBjbGFzcz0iZm9ybS1pdGVtLXRpdCI+6K+36L6T5YWl5YiG5Lqr5a+G56CBPHNwYW4gc3R5bGU9Im1hcmdpbi1sZWZ0OiA0NXB4OyI+PGlucHV0IHR5cGU9ImNoZWNrYm94IiBjaGVja2VkIGlkPSJuZC1zaGFyZS1jaGVjayIgc3R5bGU9InZlcnRpY2FsLWFsaWduOiBtaWRkbGU7Ij4gPGEgY2xhc3M9Im5kLW9wZW4tcGFnZS1vcHRpb24iIGhyZWY9ImphdmFzY3JpcHQ6OyIgdGl0bGU9IueCueWHu+afpeeci+abtOWkmuiEmuacrOmFjee9riI+5YWx5Lqr5a+G56CBPC9hPjwvc3Bhbj48L3NwYW4+Jyk7CiAgICAgICAgICAgIG9iai5pc1B3ZFNoYXJlT3BlbigpIHx8ICQoIiNuZC1zaGFyZS1jaGVjayIpLnJlbW92ZUF0dHIoImNoZWNrZWQiKTsKCiAgICAgICAgICAgIC8vIOW8gOWFsy3kuovku7YKICAgICAgICAgICAgJCgiI25kLXNoYXJlLWNoZWNrIikub24oImNoYW5nZSIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLmlzKCc6Y2hlY2tlZCcpKSB7CiAgICAgICAgICAgICAgICAgICAgb3B0aW9uLnNldE9wdGlvbkFjdGl2ZShvcHRpb24uY29uc3RhbnQud2VpeXVuX3NoYXJlX3N0YXR1cyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBvcHRpb24uc2V0T3B0aW9uVW5BY3RpdmUob3B0aW9uLmNvbnN0YW50LndlaXl1bl9zaGFyZV9zdGF0dXMpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIC8vIOaJk+W8gOmFjee9rumhtQogICAgICAgICAgICAkKCIubmQtb3Blbi1wYWdlLW9wdGlvbiIpLmNsaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJ1bnRpbWUub3Blbk9wdGlvbnNQYWdlKCk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgIG9iai5yZWdpc3RlclN0b3JlU2hhcmVQd2QgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIG9iai5hZGRSZXNwb25zZUludGVyY2VwdG9yKGZ1bmN0aW9uIChyZXF1ZXN0LCByZXNwb25zZSkgewogICAgICAgICAgICAgICAgdmFyIHJlcXVlc3RVcmwgPSByZXF1ZXN0LnJlc3BvbnNlVVJMOwogICAgICAgICAgICAgICAgaWYgKHJlcXVlc3RVcmwuaW5kZXhPZigid2VpeXVuU2hhcmVOb0xvZ2luL1dlaXl1blNoYXJlVmlldyIpID4gMCkgewogICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5kYXRhLmRhdGEucnNwX2hlYWRlci5yZXRjb2RlID09IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gcmVzcG9uc2UuY29uZmlnLmRhdGEubWF0Y2goL1xcInNoYXJlX3B3ZFxcIjpcXCIoW1x3XSspXFwiLyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbWF0Y2gpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2dnZXIud2FybigicHdkIHNoYXJlIG5vdCBtYXRjaCIpOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2hhcmVQd2QgPSBtYXRjaFsxXTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNoYXJlUHdkID09IG9iai52ZXJpZnlfcGFnZS5zaGFyZV9wd2QpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2dnZXIud2FybigicHdkIHNoYXJlIG5vdCBjaGFuZ2UiKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvYmouaXNQd2RTaGFyZU9wZW4oKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxvZ2dlci53YXJuKCJwd2Qgc2hhcmUgY2xvc2VkIik7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzaGFyZUlkID0gb2JqLmdldFNoYXJlSWQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNoYXJlTGluayA9IG9iai5nZXRTaGFyZUxpbmsoKTsKICAgICAgICAgICAgICAgICAgICAgICAgc2hhcmVMb2cuYWRkU2hhcmVMb2coc2hhcmVJZCwgc2hhcmVQd2QsIHNoYXJlTGluaywgY29uc3RhbnQuc291cmNlLndlaXl1bik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbG9nZ2VyLndhcm4oInB3ZCBzaGFyZSBlcnJvciIpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmFkZFJlc3BvbnNlSW50ZXJjZXB0b3IgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHsKICAgICAgICAgICAgdmFyIHN1Y2Nlc3MgPSBmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sgJiYgY2FsbGJhY2socmVzcG9uc2UucmVxdWVzdCwgcmVzcG9uc2UpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgICAgICBsb2dnZXIud2FybihlKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIHJldHVybiByZXNwb25zZTsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgdmFyIGVycm9yID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgb2JqLmdldEF4aW9zKCkgJiYgb2JqLmdldEF4aW9zKCkuaW50ZXJjZXB0b3JzLnJlc3BvbnNlLnVzZShzdWNjZXNzLCBlcnJvcik7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnNob3dCb3ggPSBmdW5jdGlvbiAoYm9keSkgewogICAgICAgICAgICB2YXIgdGVtcGxhdGUgPSAnPGRpdiBjbGFzcz0ibW9kYWwgbW9kYWwtc2hvdyIgaWQ9ImZpbGUtbW9kYWwiPjxiIGNsYXNzPSJtb2RhbC1tYXNrIj48L2I+PGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nIG1vZGFsLWRpYWxvZy02ODAiPjxkaXYgY2xhc3M9Im1vZGFsLWRpYWxvZy1oZCBjbGVhcmZpeCI+PGg0IGNsYXNzPSJtb2RhbC1kaWFsb2ctdGl0bGUiPuaWh+S7tuS4i+i9vTwvaDQ+PGJ1dHRvbiBjbGFzcz0iYnRuLWljb24gaWNvbiBpY29uLXBvcC1jbG9zZSI+PC9idXR0b24+PC9kaXY+PGRpdiBjbGFzcz0ibW9kYWwtZGlhbG9nLWJkIG1vZGFsLWJvZHkiPjwvZGl2PjwvZGl2PjwvZGl2Pic7CiAgICAgICAgICAgIGlmICgkKCIjZmlsZS1tb2RhbCIpLmxlbmd0aCA9PSAwKSB7CiAgICAgICAgICAgICAgICAkKCJib2R5IikuYXBwZW5kKHRlbXBsYXRlKTsKICAgICAgICAgICAgICAgICQoIiNmaWxlLW1vZGFsIC5pY29uLXBvcC1jbG9zZSIpLm9uKCJjbGljayIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAkKCIjZmlsZS1tb2RhbCIpLmhpZGUoKTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgICQoIiNmaWxlLW1vZGFsIikuc2hvdygpOwogICAgICAgICAgICAkKCIjZmlsZS1tb2RhbCAubW9kYWwtYm9keSIpLnNhZmVIdG1sKGJvZHkpOwogICAgICAgIH07CgogICAgICAgIG9iai5zaG93U2hhcmVEb3dubG9hZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIGZpbGVEYXRhID0gb2JqLmdldFNlbGVjdGVkU2hhcmVGaWxlRGF0YSgpOwogICAgICAgICAgICBpZiAoZmlsZURhdGEubm9kZV9saXN0Lmxlbmd0aCA9PSAwKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gb2JqLnNob3dUaXBFcnJvcigi6K+36YCJ5oup6Iez5bCR5LiA5Liq5paH5Lu2L+aWh+S7tuWkuSIpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBvYmoucmVxdWVzdFNoYXJlRG93bmxvYWQoZmlsZURhdGEpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICBvYmouc2hvd1NoYXJlRG93bmxvYWRCb3goZmlsZURhdGEsIHJlc3BvbnNlKTsKICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICBvYmouc2hvd1RpcEVycm9yKHJlc3BvbnNlLm1zZyk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgIG9iai5zaG93SG9tZURvd25sb2FkID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgZmlsZURhdGEgPSBvYmouZ2V0U2VsZWN0ZWRTaGFyZUZpbGVEYXRhKCk7CiAgICAgICAgICAgIGlmIChmaWxlRGF0YS5ub2RlX2xpc3QubGVuZ3RoID09IDApIHsKICAgICAgICAgICAgICAgIHJldHVybiBvYmouc2hvd1RpcEVycm9yKCLor7fpgInmi6noh7PlsJHkuIDkuKrmlofku7Yv5paH5Lu25aS5Iik7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIG9iai5yZXF1ZXN0SG9tZURvd25sb2FkKGZpbGVEYXRhKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgb2JqLnNob3dTaGFyZURvd25sb2FkQm94KGZpbGVEYXRhLCByZXNwb25zZSk7CiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgb2JqLnNob3dUaXBFcnJvcihyZXNwb25zZS5tc2cpOwogICAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICBvYmoucGFyc2VEb3duRmlsZSA9IGZ1bmN0aW9uIChmaWxlRGF0YSkgewogICAgICAgICAgICB2YXIgZmlsZU5hbWUgPSAiIiwgcGFja05hbWUgPSAiIjsKICAgICAgICAgICAgaWYgKGZpbGVEYXRhLmRpcl9saXN0Lmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgIGlmIChmaWxlRGF0YS5maWxlX2xpc3QubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgICAgIHBhY2tOYW1lID0gZmlsZURhdGEuZGlyX2xpc3RbMF0uZmlsZW5hbWUgKyAiIOetiSIgKyAoZmlsZURhdGEuZGlyX2xpc3QubGVuZ3RoICsgZmlsZURhdGEuZmlsZV9saXN0Lmxlbmd0aCkgKyAi5Liq5paH5Lu2IjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIHBhY2tOYW1lID0gZmlsZURhdGEuZGlyX2xpc3RbMF0uZmlsZW5hbWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBmaWxlTmFtZSA9IHBhY2tOYW1lICsgIi56aXAiOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgaWYgKGZpbGVEYXRhLmZpbGVfbGlzdC5sZW5ndGggPiAxKSB7CiAgICAgICAgICAgICAgICAgICAgcGFja05hbWUgPSBmaWxlRGF0YS5ub2RlX2xpc3RbMF0uZ2V0TmFtZU5vRXh0KCkgKyAiIOetiSIgKyBmaWxlRGF0YS5maWxlX2xpc3QubGVuZ3RoICsgIuS4quaWh+S7tiI7CiAgICAgICAgICAgICAgICAgICAgZmlsZU5hbWUgPSBwYWNrTmFtZSArICIuemlwIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIGZpbGVOYW1lID0gZmlsZURhdGEuZmlsZV9saXN0WzBdLmZpbGVuYW1lOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBmaWxlX25hbWU6IGZpbGVOYW1lLAogICAgICAgICAgICAgICAgcGFja19uYW1lOiBwYWNrTmFtZQogICAgICAgICAgICB9OwogICAgICAgIH07CgogICAgICAgIG9iai5yZXF1ZXN0SG9tZURvd25sb2FkID0gZnVuY3Rpb24gKGZpbGVEYXRhKSB7CiAgICAgICAgICAgIHZhciBiYXNlUmVxdWVzdCA9IG9iai5nZXRCYXNlUmVxdWVzdCgpOwogICAgICAgICAgICB2YXIgZG93bkZpbGUgPSBvYmoucGFyc2VEb3duRmlsZShmaWxlRGF0YSk7CiAgICAgICAgICAgIGlmIChiYXNlUmVxdWVzdCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGRvd25GaWxlLnBhY2tfbmFtZSA/IGJhc2VSZXF1ZXN0LmdldFBhY2tVcmwoZmlsZURhdGEubm9kZV9saXN0LCB7fSkgOiBiYXNlUmVxdWVzdC5nZXRTaW5nbGVVcmwoZmlsZURhdGEubm9kZV9saXN0LCB7fSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgICAgICAgICAgICAgIHJlamVjdCh7IHJldGNvZGU6IC0xLCBtc2c6ICLnlJ/miJDpk77mjqXlpLHotKUiIH0pOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBvYmoucmVxdWVzdFNoYXJlRG93bmxvYWQgPSBmdW5jdGlvbiAoZmlsZURhdGEpIHsKICAgICAgICAgICAgdmFyIHNoYXJlRmlsZSA9IG9iai5nZXRTaGFyZUZpbGUoKSwgZG93bmxvYWRSZXF1ZXN0ID0gb2JqLmdldERvd25sb2FkUmVxdWVzdCgpOwogICAgICAgICAgICB2YXIgZG93bkZpbGUgPSBvYmoucGFyc2VEb3duRmlsZShmaWxlRGF0YSk7CiAgICAgICAgICAgIGlmIChzaGFyZUZpbGUgJiYgZG93bmxvYWRSZXF1ZXN0KSB7CiAgICAgICAgICAgICAgICB2YXIgZGV0YWlsID0gewogICAgICAgICAgICAgICAgICAgIHNoYXJlS2V5OiBzaGFyZUZpbGUuc2hhcmVLZXksCiAgICAgICAgICAgICAgICAgICAgc2hhcmVQd2Q6IHNoYXJlRmlsZS5zaGFyZVB3ZCwKICAgICAgICAgICAgICAgICAgICBmaWxlT3duZXI6IHNoYXJlRmlsZS5zaGFyZU93bmVyLAogICAgICAgICAgICAgICAgICAgIGRvd25sb2FkVHlwZTogMCwKICAgICAgICAgICAgICAgICAgICBwYWNrTmFtZTogZG93bkZpbGUucGFja19uYW1lLAogICAgICAgICAgICAgICAgICAgIHBkaXJLZXk6ICIiLAogICAgICAgICAgICAgICAgICAgIGRpckxpc3Q6IGZpbGVEYXRhLmRpcl9saXN0LAogICAgICAgICAgICAgICAgICAgIGZpbGVMaXN0OiBmaWxlRGF0YS5maWxlX2xpc3QKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICByZXR1cm4gZG93bkZpbGUucGFja19uYW1lID8gZG93bmxvYWRSZXF1ZXN0LnNoYXJlUGFydERvd25sb2FkKGRldGFpbCkgOiBkb3dubG9hZFJlcXVlc3Quc2hhcmVCYXRjaERvd25sb2FkKGRldGFpbCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgewogICAgICAgICAgICAgICAgICAgIHJlamVjdCh7IHJldGNvZGU6IC0xLCBtc2c6ICLnlJ/miJDpk77mjqXlpLHotKUiIH0pOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBvYmouc2hvd1NoYXJlRG93bmxvYWRCb3ggPSBmdW5jdGlvbiAoZmlsZURhdGEsIHJlc3BvbnNlKSB7CiAgICAgICAgICAgIHZhciBkb3duRmlsZSA9IG9iai5wYXJzZURvd25GaWxlKGZpbGVEYXRhKTsKICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmRvd25sb2FkX3VybCkgewogICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihkb3duRmlsZSwgcmVzcG9uc2UpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihkb3duRmlsZSwgcmVzcG9uc2UuZmlsZV9saXN0WzBdKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIGh0bWwgPSAnPGRpdiBzdHlsZT0icGFkZGluZzogMjBweDsgb3ZlcmZsb3cteTogYXV0bzsiPic7CiAgICAgICAgICAgIHZhciByb3dTdHlsZSA9ICJtYXJnaW46MTBweCAwcHg7b3ZlcmZsb3c6aGlkZGVuOyB3aGl0ZS1zcGFjZTpub3dyYXA7IHRleHQtb3ZlcmZsb3c6ZWxsaXBzaXM7IjsKICAgICAgICAgICAgaHRtbCArPSAnPHA+JyArIGRvd25GaWxlLmZpbGVfbmFtZSArICc8L3A+JzsKICAgICAgICAgICAgaHRtbCArPSAnPHAgc3R5bGU9IicgKyByb3dTdHlsZSArICciPjxhIHRpdGxlPSInICsgZG93bkZpbGUuZG93bmxvYWRfdXJsICsgJyIgaHJlZj0iJyArIGRvd25GaWxlLmRvd25sb2FkX3VybCArICciIHN0eWxlPSJjb2xvcjogYmx1ZTsiPicgKyBkb3duRmlsZS5kb3dubG9hZF91cmwgKyAnPC9hPjwvcD4nOwogICAgICAgICAgICBodG1sICs9ICc8ZGl2Pic7CiAgICAgICAgICAgIG9iai5zaG93Qm94KGh0bWwpOwogICAgICAgIH07CgogICAgICAgIG9iai5zaG93VGlwU3VjY2VzcyA9IGZ1bmN0aW9uIChtc2cpIHsKICAgICAgICAgICAgb2JqLmdldE1vZGFsKCkgJiYgb2JqLmdldE1vZGFsKCkuc3VjY2Vzcyhtc2cpOwogICAgICAgIH07CgogICAgICAgIG9iai5zaG93VGlwRXJyb3IgPSBmdW5jdGlvbiAobXNnKSB7CiAgICAgICAgICAgIG9iai5nZXRNb2RhbCgpICYmIG9iai5nZXRNb2RhbCgpLmVycm9yKG1zZyk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmdldFNoYXJlSWQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciB1cmwgPSByb3V0ZXIuZ2V0VXJsKCk7CiAgICAgICAgICAgIHZhciBtYXRjaCA9IHVybC5tYXRjaCgvc2hhcmUud2VpeXVuLmNvbVwvKFswLTlhLXpdKykvaSk7CiAgICAgICAgICAgIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdIDogbnVsbDsKICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0U2hhcmVMaW5rID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gcm91dGVyLmdldFVybCgpOwogICAgICAgIH07CgogICAgICAgIG9iai5pc0hvbWVQYWdlID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICBpZiAocm91dGVyLmdldFVybCgpLmluZGV4T2YoIndlaXl1bi5jb20vZGlzayIpID49IDApIHsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmlzUHdkU2hhcmVPcGVuID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gb3B0aW9uLmlzT3B0aW9uQWN0aXZlKG9wdGlvbi5jb25zdGFudC53ZWl5dW5fc2hhcmVfc3RhdHVzKTsKICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0U2VsZWN0ZWRTaGFyZUZpbGVEYXRhID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgZmlsZURhdGEgPSB7CiAgICAgICAgICAgICAgICBub2RlX2xpc3Q6IG9iai5nZXRTZWxlY3RlZEZpbGVOb2RlcygpLAogICAgICAgICAgICAgICAgZGlyX2xpc3Q6IFtdLAogICAgICAgICAgICAgICAgZmlsZV9saXN0OiBbXQogICAgICAgICAgICB9OwogICAgICAgICAgICBmaWxlRGF0YS5ub2RlX2xpc3QuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICAgICAgaWYgKGl0ZW0uZ2V0U2l6ZSkgewogICAgICAgICAgICAgICAgICAgIHZhciBmaWxlID0gewogICAgICAgICAgICAgICAgICAgICAgICBmaWxlX2lkOiBpdGVtLmdldElkKCksCiAgICAgICAgICAgICAgICAgICAgICAgIHBkaXJfa2V5OiBpdGVtLmdldFBkaXJLZXkoKSwKICAgICAgICAgICAgICAgICAgICAgICAgZmlsZW5hbWU6IGl0ZW0uZ2V0TmFtZSgpLAogICAgICAgICAgICAgICAgICAgICAgICBmaWxlX3NpemU6IGl0ZW0uZ2V0U2l6ZSgpCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbS5pc0RpcigpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVEYXRhLmRpcl9saXN0LnB1c2goZmlsZSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBmaWxlRGF0YS5maWxlX2xpc3QucHVzaChmaWxlKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICByZXR1cm4gZmlsZURhdGE7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmdldFNlbGVjdGVkRmlsZU5vZGVzID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgZmlsZU5vZGVzID0gW107CiAgICAgICAgICAgIGlmIChvYmouaXNIb21lUGFnZSgpKSB7CiAgICAgICAgICAgICAgICBmaWxlTm9kZXMgPSBvYmouZ2V0SG9tZUZpbGVOb2RlcygpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgdmFyIHNoYXJlRmlsZSA9IG9iai5nZXRTaGFyZUZpbGUoKTsKICAgICAgICAgICAgICAgIGlmIChzaGFyZUZpbGUpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoc2hhcmVGaWxlLmlzU2luZ2xlRmlsZSkgewogICAgICAgICAgICAgICAgICAgICAgICBmaWxlTm9kZXMgPSBzaGFyZUZpbGUuY2hpbGROb2RlczsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVOb2RlcyA9IHNoYXJlRmlsZS5zZWxlY3RlZE5vZGVzOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gZmlsZU5vZGVzOwogICAgICAgIH07CgogICAgICAgIG9iai5nZXRIb21lRmlsZU5vZGVzID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgZmlsZU5vZGVzID0gW107CiAgICAgICAgICAgIHZhciBzdG9yZSA9IG9iai5nZXRTdG9yZSgpOwogICAgICAgICAgICB2YXIgdXJsID0gbG9jYXRpb24uaHJlZjsKICAgICAgICAgICAgdmFyIGZpbHRlciA9IGZ1bmN0aW9uIChub2RlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZS5pc1NlbGVjdGVkKCkgPyAxIDogMDsKICAgICAgICAgICAgfTsKICAgICAgICAgICAgaWYgKHN0b3JlIGluc3RhbmNlb2YgT2JqZWN0KSB7CiAgICAgICAgICAgICAgICBpZiAodXJsLmluZGV4T2YoIndlaXl1bi5jb20vZGlzay9kb2MiKSA+PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgZmlsZU5vZGVzID0gc3RvcmUuc3RhdGUuZG9jLmN1ckNhdGVOb2RlLmdldEtpZE5vZGVzKCkuZmlsdGVyKGZpbHRlcik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIGlmICh1cmwuaW5kZXhPZigid2VpeXVuLmNvbS9kaXNrL3Bob3RvIikgPj0gMCkgewogICAgICAgICAgICAgICAgICAgIGZpbGVOb2RlcyA9IHN0b3JlLnN0YXRlLnBob3RvLmN1ckNhdGVOb2RlLmdldEtpZE5vZGVzKCkuZmlsdGVyKGZpbHRlcik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIGlmICh1cmwuaW5kZXhPZigid2VpeXVuLmNvbS9kaXNrL3ZpZGVvIikgPj0gMCkgewogICAgICAgICAgICAgICAgICAgIGZpbGVOb2RlcyA9IHN0b3JlLnN0YXRlLnZpZGVvLmNhdGVOb2RlLmdldEtpZE5vZGVzKCkuZmlsdGVyKGZpbHRlcik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIGlmICh1cmwuaW5kZXhPZigid2VpeXVuLmNvbS9kaXNrL2F1aWRvIikgPj0gMCkgewogICAgICAgICAgICAgICAgICAgIGZpbGVOb2RlcyA9IHN0b3JlLnN0YXRlLmF1ZGlvLmNhdGVOb2RlLmdldEtpZE5vZGVzKCkuZmlsdGVyKGZpbHRlcik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIGlmICh1cmwuaW5kZXhPZigid2VpeXVuLmNvbS9kaXNrL3RpbWUiKSA+PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgZmlsZU5vZGVzID0gc3RvcmUuc3RhdGUudGltZS5yb290Tm9kZS5nZXRLaWROb2RlcygpLmZpbHRlcihmaWx0ZXIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSBpZiAodXJsLmluZGV4T2YoIndlaXl1bi5jb20vZGlzay9zaGFyZWRpciIpID49IDApIHsKICAgICAgICAgICAgICAgICAgICBmaWxlTm9kZXMgPSBzdG9yZS5zdGF0ZS5zaGFyZWRpci5jdXJOb2RlLmdldEtpZE5vZGVzKCkuZmlsdGVyKGZpbHRlcik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIGlmICh1cmwuaW5kZXhPZigid2VpeXVuLmNvbS9kaXNrL3JlY2VudCIpID49IDApIHsKICAgICAgICAgICAgICAgICAgICB2YXIga2lkRmVlZHMgPSBzdG9yZS5zdGF0ZS5yZWNlbnQucm9vdE5vZGUuZ2V0S2lkRmVlZHMoKTsKICAgICAgICAgICAgICAgICAgICBraWRGZWVkcy5mb3JFYWNoKGZ1bmN0aW9uIChmZWVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmZWVkLmlzU2VsZWN0ZWQoKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZU5vZGVzID0gZmlsZU5vZGVzLmNvbmNhdChmZWVkLmdldEtpZE5vZGVzKCkpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIGlmICh1cmwuaW5kZXhPZigid2VpeXVuLmNvbS9kaXNrL3JlY3ljbGUiKSA+PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgZmlsZU5vZGVzID0gc3RvcmUuc3RhdGUucmVjeWNsZS5yb290Tm9kZS5nZXRLaWROb2RlcygpLmZpbHRlcihmaWx0ZXIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSBpZiAoc3RvcmUuc3RhdGUuZGlzaykgewogICAgICAgICAgICAgICAgICAgIGZpbGVOb2RlcyA9IHN0b3JlLnN0YXRlLmRpc2suY3VyTm9kZS5nZXRLaWROb2RlcygpLmZpbHRlcihmaWx0ZXIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBmaWxlTm9kZXM7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmdldFNoYXJlRmlsZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIHN0b3JlID0gb2JqLmdldFN0b3JlKCk7CiAgICAgICAgICAgIGlmIChzdG9yZSBpbnN0YW5jZW9mIE9iamVjdCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHN0b3JlLnN0YXRlLnNoYXJlZmlsZS5zaGFyZUZpbGU7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0QmFzZVJlcXVlc3QgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiBvYmoubWF0Y2hXZWJwYWNrTW9kdWxlKCJiYXNlX3JlcXVlc3QiLCBmdW5jdGlvbiAobW9kdWxlLCBuYW1lKSB7CiAgICAgICAgICAgICAgICBpZiAobW9kdWxlICYmIG1vZHVsZS5nZXRTaW5nbGVVcmwpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbW9kdWxlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0RG93bmxvYWRSZXF1ZXN0ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gb2JqLm1hdGNoV2VicGFja01vZHVsZSgiZG93bmxvYWRfcmVxdWVzdCIsIGZ1bmN0aW9uIChtb2R1bGUsIG5hbWUpIHsKICAgICAgICAgICAgICAgIGlmIChtb2R1bGUgJiYgbW9kdWxlLkRvd25sb2FkUmVxdWVzdCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgbW9kdWxlLkRvd25sb2FkUmVxdWVzdCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0QXhpb3MgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiBvYmoubWF0Y2hXZWJwYWNrTW9kdWxlKCJheGlvcyIsIGZ1bmN0aW9uIChtb2R1bGUsIG5hbWUpIHsKICAgICAgICAgICAgICAgIGlmIChtb2R1bGUgJiYgbW9kdWxlLkF4aW9zKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vZHVsZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmdldE1vZGFsID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gb2JqLm1hdGNoV2VicGFja01vZHVsZSgibW9kYWwiLCBmdW5jdGlvbiAobW9kdWxlLCBuYW1lKSB7CiAgICAgICAgICAgICAgICBpZiAobW9kdWxlICYmIG1vZHVsZS5jb25maXJtICYmIG1vZHVsZS5zdWNjZXNzKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vZHVsZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmdldFN0b3JlID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gb2JqLm1hdGNoV2VicGFja01vZHVsZSgic3RvcmUiLCBmdW5jdGlvbiAobW9kdWxlLCBuYW1lKSB7CiAgICAgICAgICAgICAgICBpZiAobW9kdWxlICYmIG1vZHVsZS5kZWZhdWx0ICYmIG1vZHVsZS5kZWZhdWx0Ll9tb2R1bGVzTmFtZXNwYWNlTWFwKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vZHVsZS5kZWZhdWx0OwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICBvYmoubWF0Y2hXZWJwYWNrTW9kdWxlID0gZnVuY3Rpb24gKG5hbWUsIG1hdGNoRnVuYykgewogICAgICAgICAgICBpZiAoIW9iai5tb2R1bGVzLmhhc093blByb3BlcnR5KG5hbWUpKSB7CiAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gb2JqLndlYnBhY2tfcmVxdWlyZS5jKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gbWF0Y2hGdW5jKG9iai53ZWJwYWNrX3JlcXVpcmUoa2V5KSwga2V5KTsKICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2gpIHsKICAgICAgICAgICAgICAgICAgICAgICAgb2JqLm1vZHVsZXNbbmFtZV0gPSBtYXRjaDsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIG9iai5tb2R1bGVzW25hbWVdOwogICAgICAgIH07CgogICAgICAgIG9iai5pbml0V2VicGFja1JlcXVpcmUgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBpbmplY3ROYW1lID0gIl9uZF9pbmplY3RfIjsKICAgICAgICAgICAgdmFyIG1vcmVNb2R1bGVzID0ge307CiAgICAgICAgICAgIG1vcmVNb2R1bGVzW2luamVjdE5hbWVdID0gZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykgewogICAgICAgICAgICAgICAgb2JqLndlYnBhY2tfcmVxdWlyZSA9IF9fd2VicGFja19yZXF1aXJlX187CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHVuc2FmZVdpbmRvdy53ZWJwYWNrSnNvbnAoW2luamVjdE5hbWVdLCBtb3JlTW9kdWxlcywgW2luamVjdE5hbWVdKTsKICAgICAgICB9OwoKICAgICAgICByZXR1cm4gb2JqOwogICAgfSk7CgogICAgY29udGFpbmVyLmRlZmluZSgiYXBwX2xhbnpvdXMiLCBbInJvdXRlciIsICJvcHRpb24iLCAibG9nZ2VyIiwgInVuc2FmZVdpbmRvdyIsICJjb25zdGFudCIsICJydW50aW1lIiwgImFwaSIsICJzaGFyZUxvZyIsICIkIl0sIGZ1bmN0aW9uIChyb3V0ZXIsIG9wdGlvbiwgbG9nZ2VyLCB1bnNhZmVXaW5kb3csIGNvbnN0YW50LCBydW50aW1lLCBhcGksIHNoYXJlTG9nLCAkKSB7CiAgICAgICAgdmFyIG9iaiA9IHsKICAgICAgICAgICAgdmVyaWZ5X3BhZ2U6IHsKICAgICAgICAgICAgICAgIHNldFB3ZDogbnVsbCwKICAgICAgICAgICAgICAgIHNoYXJlX3B3ZDogbnVsbCwKICAgICAgICAgICAgICAgIHN1Ym1pdF9wd2Q6IG51bGwKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIG9iai5ydW4gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciB1cmwgPSByb3V0ZXIuZ2V0VXJsKCk7CiAgICAgICAgICAgIGlmICh1cmwuaW5kZXhPZigibGFuem91cy5jb20iKSA+IDAgfHwgdXJsLmluZGV4T2YoImxhbnpvdXguY29tIikgPiAwKSB7CiAgICAgICAgICAgICAgICBvcHRpb24uaXNPcHRpb25BY3RpdmUob3B0aW9uLmNvbnN0YW50LmxhbnpvdXNfcGFnZV92ZXJpZnkpICYmIG9iai5pbml0VmVyaWZ5UGFnZSgpOwogICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBvYmouaW5pdFZlcmlmeVBhZ2UgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIG9iai5yZWdpc3RlclN0b3JlU2hhcmVQd2QoKTsKCiAgICAgICAgICAgIG9iai5pbml0VmVyaWZ5UGFnZUVsZW1lbnQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgb2JqLmF1dG9QYWRkaW5nU2hhcmVQd2QoKTsKCiAgICAgICAgICAgICAgICBvYmoucmVnaXN0ZXJQd2RTaGFyZVN3aXRjaCgpOwogICAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICBvYmouaW5pdFZlcmlmeVBhZ2VFbGVtZW50ID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7CiAgICAgICAgICAgIHZhciBzaGFyZUlkID0gb2JqLmdldFNoYXJlSWQoKTsKICAgICAgICAgICAgdmFyICRwd2QgPSAkKCIjcHdkIik7CiAgICAgICAgICAgIGlmIChzaGFyZUlkICYmICRwd2QubGVuZ3RoKSB7CgogICAgICAgICAgICAgICAgLy8g6K6+572u5YiG5Lqr5a+G56CBCiAgICAgICAgICAgICAgICBvYmoudmVyaWZ5X3BhZ2Uuc2V0UHdkID0gZnVuY3Rpb24gKHB3ZCkgewogICAgICAgICAgICAgICAgICAgICRwd2QudmFsKHB3ZCk7CiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIC8vIOaPkOS6pOWvhueggQogICAgICAgICAgICAgICAgb2JqLnZlcmlmeV9wYWdlLnN1Ym1pdF9wd2QgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgJCgiI3N1YiIpLmNsaWNrKCk7CiAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICBvYmouaW5pdFZlcmlmeVBhZ2VFbGVtZW50KGNhbGxiYWNrKTsKICAgICAgICAgICAgICAgIH0sIDUwMCk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBvYmouYXV0b1BhZGRpbmdTaGFyZVB3ZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIHNoYXJlSWQgPSBvYmouZ2V0U2hhcmVJZCgpOwogICAgICAgICAgICB2YXIgc2hhcmVMaW5rID0gb2JqLmdldFNoYXJlTGluaygpOwogICAgICAgICAgICBhcGkucXVlcnlTaGFyZVB3ZChjb25zdGFudC5zb3VyY2UubGFuem91cywgc2hhcmVJZCwgc2hhcmVMaW5rLCBmdW5jdGlvbiAocmVzcG9uc2UpIHsKICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSAmJiByZXNwb25zZS5jb2RlID09IDEpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgc2hhcmVQd2QgPSByZXNwb25zZS5kYXRhLnNoYXJlX3B3ZDsKICAgICAgICAgICAgICAgICAgICBvYmoudmVyaWZ5X3BhZ2Uuc2hhcmVfcHdkID0gc2hhcmVQd2Q7CiAgICAgICAgICAgICAgICAgICAgb2JqLnZlcmlmeV9wYWdlLnNldFB3ZChzaGFyZVB3ZCk7CiAgICAgICAgICAgICAgICAgICAgb2JqLnNob3dUaXAoMSwgIuWhq+WFheWvhueggeaIkOWKnyIsIDIwMDApOwoKICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9uLmlzT3B0aW9uQWN0aXZlKG9wdGlvbi5jb25zdGFudC5sYW56b3VzX2F1dG9fanVtcCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgb2JqLnZlcmlmeV9wYWdlLnN1Ym1pdF9wd2QgJiYgb2JqLnZlcmlmeV9wYWdlLnN1Ym1pdF9wd2QoKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBvYmouc2hvd1RpcCgwLCAi5pqC5peg5Lq65YiG5Lqr5a+G56CBIiwgMjAwMCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgIG9iai5yZWdpc3RlclB3ZFNoYXJlU3dpdGNoID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgaHRtbCA9ICc8ZGl2IHN0eWxlPSJ0ZXh0LWFsaWduOiBjZW50ZXI7IG1hcmdpbi10b3A6IDEwcHg7Ij7liIbkuqvorr7nva4gPGlucHV0IHR5cGU9ImNoZWNrYm94IiBjaGVja2VkIGlkPSJuZC1zaGFyZS1jaGVjayIgc3R5bGU9InZlcnRpY2FsLWFsaWduOiBtaWRkbGU7IiA+IDxhIHN0eWxlPSJjdXJzb3I6IHBvaW50ZXI7IiBjbGFzcz0ibmQtb3Blbi1wYWdlLW9wdGlvbiIgaHJlZj0iamF2YXNjcmlwdDo7IiB0aXRsZT0i54K55Ye75p+l55yL5pu05aSa6ISa5pys6YWN572uIj7lhbHkuqvlr4bnoIE8L2E+PC9kaXY+JzsKICAgICAgICAgICAgaWYgKCQoIi5vZmYiKS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICQoIi5vZmYiKS5hZnRlcihodG1sKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICQoIi5wYXNzd2RkaXYtdXNlciIpLmFmdGVyKGh0bWwpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIG9iai5pc1B3ZFNoYXJlT3BlbigpIHx8ICQoIiNuZC1zaGFyZS1jaGVjayIpLnJlbW92ZUF0dHIoImNoZWNrZWQiKTsKCiAgICAgICAgICAgIC8vIOW8gOWFsy3kuovku7YKICAgICAgICAgICAgJCgiI25kLXNoYXJlLWNoZWNrIikub24oImNoYW5nZSIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIGlmICgkKHRoaXMpLmlzKCc6Y2hlY2tlZCcpKSB7CiAgICAgICAgICAgICAgICAgICAgb3B0aW9uLnNldE9wdGlvbkFjdGl2ZShvcHRpb24uY29uc3RhbnQubGFuem91c19zaGFyZV9zdGF0dXMpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgb3B0aW9uLnNldE9wdGlvblVuQWN0aXZlKG9wdGlvbi5jb25zdGFudC5sYW56b3VzX3NoYXJlX3N0YXR1cyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgLy8g5omT5byA6YWN572u6aG1CiAgICAgICAgICAgICQoIi5uZC1vcGVuLXBhZ2Utb3B0aW9uIikuY2xpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgcnVudGltZS5vcGVuT3B0aW9uc1BhZ2UoKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnJlZ2lzdGVyU3RvcmVTaGFyZVB3ZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdW5zYWZlV2luZG93LiQoZG9jdW1lbnQpLmFqYXhDb21wbGV0ZShmdW5jdGlvbiAoZXZlbnQsIHhociwgb3B0aW9ucykgewogICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gb3B0aW9ucy5kYXRhLm1hdGNoKC9wd2Q9KFx3KykvKTsKICAgICAgICAgICAgICAgIGlmICghbWF0Y2gpIHsKICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IG9wdGlvbnMuZGF0YS5tYXRjaCgvcD0oXHcrKS8pOwogICAgICAgICAgICAgICAgICAgIGlmICghbWF0Y2gpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxvZ2dlci53YXJuKCJwd2Qgc2hhcmUgbm90IG1hdGNoIik7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHZhciBzaGFyZVB3ZCA9IG1hdGNoWzFdOwoKICAgICAgICAgICAgICAgIGlmIChzaGFyZVB3ZCA9PSBvYmoudmVyaWZ5X3BhZ2Uuc2hhcmVfcHdkKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxvZ2dlci53YXJuKCJwd2Qgc2hhcmUgbm90IGNoYW5nZSIpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICghb2JqLmlzUHdkU2hhcmVPcGVuKCkpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gbG9nZ2VyLndhcm4oInB3ZCBzaGFyZSBjbG9zZWQiKTsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB2YXIgc2hhcmVJZCA9IG9iai5nZXRTaGFyZUlkKCk7CiAgICAgICAgICAgICAgICB2YXIgc2hhcmVMaW5rID0gb2JqLmdldFNoYXJlTGluaygpOwogICAgICAgICAgICAgICAgdmFyIHJlc3BvbnNlID0gb2JqLnBhcnNlSnNvbih4aHIucmVzcG9uc2UpOwogICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlICYmIHJlc3BvbnNlLnp0ID09IDEgJiYgc2hhcmVQd2QpIHsKICAgICAgICAgICAgICAgICAgICBzaGFyZUxvZy5hZGRTaGFyZUxvZyhzaGFyZUlkLCBzaGFyZVB3ZCwgc2hhcmVMaW5rLCBjb25zdGFudC5zb3VyY2UubGFuem91cyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBsb2dnZXIud2FybigicHdkIHNoYXJlIGVycm9yIik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgIG9iai5zaG93VGlwID0gZnVuY3Rpb24gKGNvZGUsIG1zZywgdGltZW91dCkgewogICAgICAgICAgICBpZiAodW5zYWZlV2luZG93LnNtcykgewogICAgICAgICAgICAgICAgdW5zYWZlV2luZG93LnNtcyhtc2cpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgdmFyIHNlbGVjdG9yOwogICAgICAgICAgICAgICAgaWYgKCQoIi5vZmYiKS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICBzZWxlY3RvciA9ICIjcHdkZXJyIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yID0gIiNpbmZvIjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChjb2RlKSB7CiAgICAgICAgICAgICAgICAgICAgJChzZWxlY3Rvcikuc2FmZUh0bWwoJzxzcGFuIHN0eWxlPSJjb2xvcjogZ3JlZW47Ij4nICsgbXNnICsgJzwvc3Bhbj4nKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICQoc2VsZWN0b3IpLnNhZmVIdG1sKCc8c3BhbiBzdHlsZT0iY29sb3I6IHJlZDsiPicgKyBtc2cgKyAnPC9zcGFuPicpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgJChzZWxlY3RvcikudGV4dCgiIik7CiAgICAgICAgICAgICAgICB9LCB0aW1lb3V0KTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIG9iai5nZXRTaGFyZUlkID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgbWF0Y2g7CgogICAgICAgICAgICBtYXRjaCA9IC9sYW56b3VzLmNvbVwvKFtcd10rKVwvKFthLXowLTktXyVdezQsfSkvZ2kuZXhlYyhsb2NhdGlvbi5ocmVmKTsKICAgICAgICAgICAgaWYgKG1hdGNoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2hbMV0gKyAiLyIgKyBtYXRjaFsyXTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgbWF0Y2ggPSAvbGFuem91cy5jb21cLyhbYS16MC05LV9dezQsfSkvZ2kuZXhlYyhsb2NhdGlvbi5ocmVmKTsKICAgICAgICAgICAgaWYgKG1hdGNoKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbWF0Y2hbMV07CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJldHVybiBsb2NhdGlvbi5wYXRobmFtZS5zdWJzdHIoMSk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmdldFNoYXJlTGluayA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIHRvcC5sb2NhdGlvbi5ocmVmOwogICAgICAgIH07CgogICAgICAgIG9iai5pc1B3ZFNoYXJlT3BlbiA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIG9wdGlvbi5pc09wdGlvbkFjdGl2ZShvcHRpb24uY29uc3RhbnQubGFuem91c19zaGFyZV9zdGF0dXMpOwogICAgICAgIH07CgogICAgICAgIG9iai5wYXJzZUpzb24gPSBmdW5jdGlvbiAoanNvblN0cikgewogICAgICAgICAgICB2YXIganNvbk9iamVjdCA9IHt9OwogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgaWYgKGpzb25TdHIpIHsKICAgICAgICAgICAgICAgICAgICBqc29uT2JqZWN0ID0gSlNPTi5wYXJzZShqc29uU3RyKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBjYXRjaCAoZSkgeyB9CiAgICAgICAgICAgIHJldHVybiBqc29uT2JqZWN0OwogICAgICAgIH07CgogICAgICAgIHJldHVybiBvYmo7CiAgICB9KTsKCiAgICBjb250YWluZXIuZGVmaW5lKCJhcHBfMTg5IiwgWyJyb3V0ZXIiLCAib3B0aW9uIiwgImxvZ2dlciIsICJjb25zdGFudCIsICJhcGkiLCAic2hhcmVMb2ciLCAicnVudGltZSIsICJ1bnNhZmVXaW5kb3ciLCAiJCJdLCBmdW5jdGlvbiAocm91dGVyLCBvcHRpb24sIGxvZ2dlciwgY29uc3RhbnQsIGFwaSwgc2hhcmVMb2csIHJ1bnRpbWUsIHVuc2FmZVdpbmRvdywgJCkgewogICAgICAgIHZhciBvYmogPSB7CiAgICAgICAgICAgIHZlcmlmeV9wYWdlOiB7CiAgICAgICAgICAgICAgICBzaGFyZV9wd2Q6IG51bGwKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIG9iai5ydW4gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciB1cmwgPSByb3V0ZXIuZ2V0VXJsKCk7CiAgICAgICAgICAgIGlmICh1cmwuaW5kZXhPZigiY2xvdWQuMTg5LmNuL3QiKSA+IDApIHsKICAgICAgICAgICAgICAgIG9iai5pbml0U2hhcmVQYWdlKCk7CiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIGlmICh1cmwuaW5kZXhPZigiY2xvdWQuMTg5LmNuL21haW4iKSA+IDAgfHwgdXJsLmluZGV4T2YoImNsb3VkLjE4OS5jbi9waG90byIpID4gMCkgewogICAgICAgICAgICAgICAgb3B0aW9uLmlzT3B0aW9uQWN0aXZlKG9wdGlvbi5jb25zdGFudC50eTE4OV9wYWdlX2hvbWUpICYmIG9iai5pbml0SG9tZVBhZ2UoKTsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmluaXRIb21lUGFnZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgaWYgKCQoIiNKX0NyZWF0ZSIpLmxlbmd0aCkgewogICAgICAgICAgICAgICAgJCgiI0pfQ3JlYXRlIikuYWZ0ZXIoJzxhIGNsYXNzPSJidG4gYnRuLXNob3ctbGluayIgc3R5bGU9ImJhY2tncm91bmQ6ICMyYjg5ZWE7IGNvbG9yOiAjZmZmOyBjdXJzb3I6IHBvaW50ZXIiPuaYvuekuumTvuaOpTwvYT4nKTsKICAgICAgICAgICAgICAgICQoIi5idG4tc2hvdy1saW5rIikub24oImNsaWNrIiwgb2JqLnNob3dEb3dubG9hZCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSBpZiAoJCgiLkpDX1JlZnJlc2giKS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICQoIi5KQ19SZWZyZXNoIikuYWZ0ZXIoJzxhIGNsYXNzPSJidG4gYnRuLXNob3ctbGluayIgc3R5bGU9ImJhY2tncm91bmQ6ICMyYjg5ZWE7IGNvbG9yOiAjZmZmOyBjdXJzb3I6IHBvaW50ZXIiPuaYvuekuumTvuaOpTwvYT4nKTsKICAgICAgICAgICAgICAgICQoIi5idG4tc2hvdy1saW5rIikub24oImNsaWNrIiwgb2JqLnNob3dEb3dubG9hZCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KG9iai5pbml0SG9tZVBhZ2UsIDUwMCk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBvYmouaW5pdFNoYXJlUGFnZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgaWYgKCQoIi5jb2RlLXBhbmVsIikubGVuZ3RoICYmIG9wdGlvbi5pc09wdGlvbkFjdGl2ZShvcHRpb24uY29uc3RhbnQudHkxODlfcGFnZV92ZXJpZnkpKSB7CiAgICAgICAgICAgICAgICBvYmouaW5pdFZlcmlmeVBhZ2UoKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKG9wdGlvbi5pc09wdGlvbkFjdGl2ZShvcHRpb24uY29uc3RhbnQudHkxODlfcGFnZV9zaGFyZSkpIHsKICAgICAgICAgICAgICAgIG9iai5pbml0RG93bmxvYWRQYWdlKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBvYmouaW5pdFZlcmlmeVBhZ2UgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIG9iai5yZWdpc3RlclB3ZFNoYXJlU3dpdGNoKCk7CgogICAgICAgICAgICBvYmoucmVnaXN0ZXJTdG9yZVNoYXJlUHdkKCk7CgogICAgICAgICAgICBvYmouYXV0b1BhZGRpbmdTaGFyZVB3ZCgpOwogICAgICAgIH07CgogICAgICAgIG9iai5yZWdpc3RlclB3ZFNoYXJlU3dpdGNoID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgaHRtbCA9ICc8c3BhbiBzdHlsZT0iZmxvYXQ6cmlnaHQiPjxpbnB1dCB0eXBlPSJjaGVja2JveCIgY2hlY2tlZCBpZD0ibmQtc2hhcmUtY2hlY2siIHN0eWxlPSJ2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOyI+IDxhIGNsYXNzPSJuZC1vcGVuLXBhZ2Utb3B0aW9uIG9uZS1wYW4tbGluay1tYXJrIiB0aXRsZT0i54K55Ye75p+l55yL5pu05aSa6ISa5pys6YWN572uIiBzdHlsZT0iY3Vyc29yOiBwb2ludGVyOyB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTsiPuWFseS6q+aPkOWPlueggTwvYT48L3NwYW4+JzsKICAgICAgICAgICAgJCgiLmNvZGUtcGFuZWwgLnRpdGxlIikuYXBwZW5kKGh0bWwpOwogICAgICAgICAgICBvYmouaXNQd2RTaGFyZU9wZW4oKSB8fCAkKCIjbmQtc2hhcmUtY2hlY2siKS5yZW1vdmVBdHRyKCJjaGVja2VkIik7CgogICAgICAgICAgICAvLyDlvIDlhbMt5LqL5Lu2CiAgICAgICAgICAgICQoIiNuZC1zaGFyZS1jaGVjayIpLm9uKCJjaGFuZ2UiLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBpZiAoJCh0aGlzKS5pcygnOmNoZWNrZWQnKSkgewogICAgICAgICAgICAgICAgICAgIG9wdGlvbi5zZXRPcHRpb25BY3RpdmUob3B0aW9uLmNvbnN0YW50LnR5MTg5X3NoYXJlX3N0YXR1cyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBvcHRpb24uc2V0T3B0aW9uVW5BY3RpdmUob3B0aW9uLmNvbnN0YW50LnR5MTg5X3NoYXJlX3N0YXR1cyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgLy8g5omT5byA6YWN572u6aG1CiAgICAgICAgICAgICQoIi5uZC1vcGVuLXBhZ2Utb3B0aW9uIikuY2xpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgcnVudGltZS5vcGVuT3B0aW9uc1BhZ2UoKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnJlZ2lzdGVyU3RvcmVTaGFyZVB3ZCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdW5zYWZlV2luZG93LiQoZG9jdW1lbnQpLmFqYXhDb21wbGV0ZShmdW5jdGlvbiAoZXZlbnQsIHhociwgb3B0aW9ucykgewogICAgICAgICAgICAgICAgdmFyIHJlc3BvbnNlID0geGhyLnJlc3BvbnNlSlNPTjsKICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLnVybC5pbmRleE9mKCJzaGFyZUZpbGVWZXJpZnlQYXNzLmFjdGlvbiIpID4gMCkgewogICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZSBpbnN0YW5jZW9mIE9iamVjdCAmJiByZXNwb25zZS5zaGFyZUlkICYmIHJlc3BvbnNlLmFjY2Vzc0NvZGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNoYXJlUHdkID0gcmVzcG9uc2UuYWNjZXNzQ29kZTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaGFyZVB3ZCA9PSBvYmoudmVyaWZ5X3BhZ2Uuc2hhcmVfcHdkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbG9nZ2VyLndhcm4oInB3ZCBzaGFyZSBub3QgY2hhbmdlIik7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghb2JqLmlzUHdkU2hhcmVPcGVuKCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2dnZXIud2FybigicHdkIHNoYXJlIGNsb3NlZCIpOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2hhcmVJZCA9IG9iai5nZXRTaGFyZUlkKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzaGFyZUxpbmsgPSBvYmouZ2V0U2hhcmVMaW5rKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIHNoYXJlTG9nLmFkZFNoYXJlTG9nKHNoYXJlSWQsIHNoYXJlUHdkLCBzaGFyZUxpbmssIGNvbnN0YW50LnNvdXJjZS50eTE4OSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIud2FybigicHdkIHNoYXJlIG5vdCBtYXRjaCIpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmF1dG9QYWRkaW5nU2hhcmVQd2QgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBzaGFyZUlkID0gb2JqLmdldFNoYXJlSWQoKTsKICAgICAgICAgICAgdmFyIHNoYXJlTGluayA9IG9iai5nZXRTaGFyZUxpbmsoKTsKICAgICAgICAgICAgYXBpLnF1ZXJ5U2hhcmVQd2QoY29uc3RhbnQuc291cmNlLnR5MTg5LCBzaGFyZUlkLCBzaGFyZUxpbmssIGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlICYmIHJlc3BvbnNlLmNvZGUgPT0gMSkgewogICAgICAgICAgICAgICAgICAgIHZhciBzaGFyZVB3ZCA9IHJlc3BvbnNlLmRhdGEuc2hhcmVfcHdkOwogICAgICAgICAgICAgICAgICAgIG9iai52ZXJpZnlfcGFnZS5zaGFyZV9wd2QgPSBzaGFyZVB3ZDsKCiAgICAgICAgICAgICAgICAgICAgJCgiI2NvZGVfdHh0IikudmFsKHNoYXJlUHdkKTsKICAgICAgICAgICAgICAgICAgICBvYmouc2hvd1RpcCgxLCAi5aGr5YWF6K6/6Zeu56CB5oiQ5YqfIiwgMjAwMCk7CgogICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb24uaXNPcHRpb25BY3RpdmUob3B0aW9uLmNvbnN0YW50LnR5MTg5X2F1dG9fanVtcCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bnNhZmVXaW5kb3cuJCgiLmJ0bi52aXNpdCIpLmNsaWNrKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDIwMDApOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIG9iai5zaG93VGlwKDAsICLmmoLml6DkurrliIbkuqvorr/pl67noIEiLCAyMDAwKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLnNob3dUaXAgPSBmdW5jdGlvbiAoY29kZSwgbXNnLCB0aW1lb3V0KSB7CiAgICAgICAgICAgIHZhciAkZWxlbWVudCA9ICQoIi52aXNpdF9lcnJvciIpOwogICAgICAgICAgICBpZiAoY29kZSkgewogICAgICAgICAgICAgICAgJGVsZW1lbnQuc2FmZUh0bWwoJzxzcGFuIHN0eWxlPSJjb2xvcjogZ3JlZW47Ij4nICsgbXNnICsgJzwvc3Bhbj4nKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICRlbGVtZW50LnNhZmVIdG1sKCc8c3BhbiBzdHlsZT0iY29sb3I6IHJlZDsiPicgKyBtc2cgKyAnPC9zcGFuPicpOwogICAgICAgICAgICB9CiAgICAgICAgICAgICRlbGVtZW50LnNob3coKTsKICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAkZWxlbWVudC5oaWRlKCk7CiAgICAgICAgICAgIH0sIHRpbWVvdXQpOwogICAgICAgIH07CgogICAgICAgIG9iai5pbml0RG93bmxvYWRQYWdlID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAkKCIuYnRuLWRvd25sb2FkIikuYWZ0ZXIoJzxhIGNsYXNzPSJidG4gYnRuLXNob3ctbGluayIgc3R5bGU9ImJhY2tncm91bmQ6ICMyYjg5ZWE7IGN1cnNvcjogcG9pbnRlciI+5pi+56S66ZO+5o6lPC9hPicpOwogICAgICAgICAgICAkKCIuYnRuLXNob3ctbGluayIpLm9uKCJjbGljayIsIG9iai5zaG93RG93bmxvYWQpOwogICAgICAgIH07CgogICAgICAgIG9iai5zaG93RG93bmxvYWQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBodG1sID0gJzxkaXYgc3R5bGU9InBhZGRpbmc6IDIwcHg7IGhlaWdodDogNDEwcHg7IG92ZXJmbG93LXk6IGF1dG87Ij4nOwogICAgICAgICAgICB2YXIgcm93U3R5bGUgPSAibWFyZ2luOjEwcHggMHB4OyBvdmVyZmxvdzpoaWRkZW47IHdoaXRlLXNwYWNlOm5vd3JhcDsgdGV4dC1vdmVyZmxvdzplbGxpcHNpczsiOwoKICAgICAgICAgICAgdmFyIGZpbGVJZHMgPSBvYmouZ2V0U2VsZWN0ZWRGaWxlSWRzKCksCiAgICAgICAgICAgICAgICBmaWxlTGlzdCA9IG9iai5nZXRTZWxlY3RlZEZpbGVMaXN0KCk7CgogICAgICAgICAgICBpZiAoZmlsZUxpc3QubGVuZ3RoID4gMSkgewogICAgICAgICAgICAgICAgdmFyIHBhY2thZ2VVcmwgPSBvYmouYnVpbGRQYWNrYWdlVXJsKGZpbGVJZHMsICLmiZPljIXkuIvovb0uemlwIik7CiAgICAgICAgICAgICAgICBodG1sICs9ICc8cD7ljovnvKnljIU8L3A+JzsKICAgICAgICAgICAgICAgIGh0bWwgKz0gJzxwIHN0eWxlPSInICsgcm93U3R5bGUgKyAnIj48YSB0aXRsZT0iJyArIHBhY2thZ2VVcmwgKyAnIiBocmVmPSInICsgcGFja2FnZVVybCArICciIHN0eWxlPSJjb2xvcjogYmx1ZTsiPicgKyBwYWNrYWdlVXJsICsgJzwvYT48L3A+JzsKICAgICAgICAgICAgICAgIGh0bWwgKz0gJzxwPiZuYnNwOzwvcD4nOwogICAgICAgICAgICB9CgogICAgICAgICAgICBmaWxlTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpbmRleCkgewogICAgICAgICAgICAgICAgdmFyIGZpbGUgPSBpdGVtLmF0dHJpYnV0ZXM7CiAgICAgICAgICAgICAgICBpZiAoZmlsZS5pc0ZvbGRlcikgewogICAgICAgICAgICAgICAgICAgIGZpbGUuZG93bmxvYWRVcmwgPSBvYmouYnVpbGRQYWNrYWdlVXJsKGZpbGUuZmlsZUlkLCBmaWxlLmZpbGVOYW1lICsgIi56aXAiKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIGZpbGUuZG93bmxvYWRVcmwgPSBsb2NhdGlvbi5wcm90b2NvbCArIGZpbGUuZG93bmxvYWRVcmw7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBodG1sICs9ICc8cD4nICsgKCsraW5kZXgpICsgJ++8micgKyAoZmlsZS5maWxlTmFtZSA/IGZpbGUuZmlsZU5hbWUgOiBmaWxlLmZpbGVJZCkgKyAnPC9wPic7CiAgICAgICAgICAgICAgICBodG1sICs9ICc8cCBzdHlsZT0iJyArIHJvd1N0eWxlICsgJyI+PGEgdGl0bGU9IicgKyBmaWxlLmRvd25sb2FkVXJsICsgJyIgaHJlZj0iJyArIGZpbGUuZG93bmxvYWRVcmwgKyAnIiBzdHlsZT0iY29sb3I6IGJsdWU7Ij4nICsgZmlsZS5kb3dubG9hZFVybCArICc8L2E+PC9wPic7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgaHRtbCArPSAnPGRpdj4nOwogICAgICAgICAgICBvYmouc2hvd0JveChodG1sKTsKICAgICAgICB9OwoKICAgICAgICBvYmouc2hvd0JveCA9IGZ1bmN0aW9uIChib2R5KSB7CiAgICAgICAgICAgIHZhciB0ZW1wbGF0ZSA9ICc8ZGl2IGlkPSJKX0ZpbGVNb2RhbCIgY2xhc3M9InRyZWVCb3gtbW9kYWwgbW9kYWwgaW4iIHN0eWxlPSJkaXNwbGF5OmJsb2NrIj48ZGl2IGNsYXNzPSJtb2RhbC1kaWFsb2ciPjxkaXYgY2xhc3M9Im1vZGFsLWhlYWRlciI+PGEgY2xhc3M9ImNsb3NlIj7DlzwvYT48aDM+5paH5Lu25LiL6L29PC9oMz48L2Rpdj48ZGl2IGNsYXNzPSJtb2RhbC1ib2R5Ij48L2Rpdj48L2Rpdj48L2Rpdj4nOwogICAgICAgICAgICBpZiAoJCgiI0pfRmlsZU1vZGFsIikubGVuZ3RoID09IDApIHsKICAgICAgICAgICAgICAgICQoImJvZHkiKS5hcHBlbmQodGVtcGxhdGUpOwogICAgICAgICAgICAgICAgJCgiI0pfRmlsZU1vZGFsIC5jbG9zZSIpLm9uKCJjbGljayIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAkKCIjSl9GaWxlTW9kYWwiKS5oaWRlKCk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICAkKCIjSl9GaWxlTW9kYWwiKS5zaG93KCk7CiAgICAgICAgICAgICQoIiNKX0ZpbGVNb2RhbCAubW9kYWwtYm9keSIpLnNhZmVIdG1sKGJvZHkpOwogICAgICAgIH07CgogICAgICAgIG9iai5idWlsZFBhY2thZ2VVcmwgPSBmdW5jdGlvbiAoZmlsZUlkcywgZmlsZU5hbWUpIHsKICAgICAgICAgICAgdmFyIGRvd25sb2FkVXJsID0gdW5zYWZlV2luZG93LmVkcml2ZS5kb3dubG9hZFVybCwKICAgICAgICAgICAgICAgIHNlc3Npb25LZXkgPSB1bnNhZmVXaW5kb3cuZWRyaXZlLnNlc3Npb25LZXk7CiAgICAgICAgICAgIGZpbGVOYW1lIHx8IChmaWxlTmFtZSA9ICIiKTsKICAgICAgICAgICAgaWYgKHVuc2FmZVdpbmRvdy5fc2hhcmVJZCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGxvY2F0aW9uLnByb3RvY29sICsgZG93bmxvYWRVcmwgKyAiP3Nlc3Npb25LZXk9IiArIHNlc3Npb25LZXkgKyAiJmZpbGVJZFM9IiArIGZpbGVJZHMgKyAiJmRvd25sb2FkVHlwZT0zJnNoYXJlSWQ9IiArIHVuc2FmZVdpbmRvdy5fc2hhcmVJZCArICImZmlsZW5hbWU9IiArIGVuY29kZVVSSUNvbXBvbmVudChmaWxlTmFtZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSB7CiAgICAgICAgICAgICAgICByZXR1cm4gbG9jYXRpb24ucHJvdG9jb2wgKyBkb3dubG9hZFVybCArICI/c2Vzc2lvbktleT0iICsgc2Vzc2lvbktleSArICImZmlsZUlkUz0iICsgZmlsZUlkcyArICImZG93bmxvYWRUeXBlPTEmZmlsZW5hbWU9IiArIGVuY29kZVVSSUNvbXBvbmVudChmaWxlTmFtZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICBvYmouZ2V0U2VsZWN0ZWRGaWxlSWRzID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgZmlsZUlkTGlzdCA9IFtdOwogICAgICAgICAgICB2YXIgZmlsZUxpc3QgPSBvYmouZ2V0U2VsZWN0ZWRGaWxlTGlzdCgpOwogICAgICAgICAgICBmaWxlTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgICAgICBmaWxlSWRMaXN0LnB1c2goaXRlbS5hdHRyaWJ1dGVzLmZpbGVJZCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICByZXR1cm4gZmlsZUlkTGlzdC5qb2luKCIsIik7CiAgICAgICAgfTsKCiAgICAgICAgb2JqLmdldFNlbGVjdGVkRmlsZUxpc3QgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBtYWluVmlldyA9IG51bGwsIGZpbGVMaXN0ID0gW107CiAgICAgICAgICAgIGlmICh1bnNhZmVXaW5kb3cuZG93bmxvYWRVcmwpIHsKICAgICAgICAgICAgICAgIGZpbGVMaXN0ID0gWwogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczogdW5zYWZlV2luZG93CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgXTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIGlmICh1bnNhZmVXaW5kb3cuX3NoYXJlSWQpIHsKICAgICAgICAgICAgICAgIG1haW5WaWV3ID0gdW5zYWZlV2luZG93LmFwcFJvdXRlci5tYWluVmlldzsKICAgICAgICAgICAgICAgIGlmIChtYWluVmlldyBpbnN0YW5jZW9mIE9iamVjdCAmJiBtYWluVmlldy5maWxlTGlzdCkgewogICAgICAgICAgICAgICAgICAgIGZpbGVMaXN0ID0gbWFpblZpZXcuZmlsZUxpc3Q7CiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVMaXN0LnNlbGVjdGVkKCkubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVMaXN0ID0gZmlsZUxpc3Quc2VsZWN0ZWQoKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZWxzZSBpZiAodW5zYWZlV2luZG93Lm1haW5WaWV3KSB7CiAgICAgICAgICAgICAgICBtYWluVmlldyA9IHVuc2FmZVdpbmRvdy5tYWluVmlldzsKICAgICAgICAgICAgICAgIGlmIChtYWluVmlldy5maWxlTGlzdFRhYk9iaiAmJiBtYWluVmlldy5maWxlTGlzdFRhYk9ialttYWluVmlldy5vcHRpb25zLmZpbGVJZF0pIHsKICAgICAgICAgICAgICAgICAgICBmaWxlTGlzdCA9IG1haW5WaWV3LmZpbGVMaXN0VGFiT2JqW21haW5WaWV3Lm9wdGlvbnMuZmlsZUlkXS5maWxlTGlzdC5zZWxlY3RlZCgpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZWxzZSBpZiAobWFpblZpZXcuZ2V0U2VsZWN0ZWRNb2RlbHMpIHsKICAgICAgICAgICAgICAgICAgICBmaWxlTGlzdCA9IG1haW5WaWV3LmdldFNlbGVjdGVkTW9kZWxzKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciBzZWxlY3RlZEZpbGVMaXN0ID0gW107CiAgICAgICAgICAgIGZpbGVMaXN0LmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgICAgICAgIGlmIChpdGVtLmF0dHJpYnV0ZXMuZmlsZUlkID4gMCkgewogICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkRmlsZUxpc3QucHVzaChpdGVtKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHJldHVybiBzZWxlY3RlZEZpbGVMaXN0OwogICAgICAgIH07CgogICAgICAgIG9iai5nZXRTaGFyZUlkID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgdXJsID0gcm91dGVyLmdldFVybCgpOwogICAgICAgICAgICB2YXIgbWF0Y2ggPSB1cmwubWF0Y2goL2Nsb3VkXC4xODlcLmNuXC90XC8oWzAtOWEtel0rKS9pKTsKICAgICAgICAgICAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMV0gOiBudWxsOwogICAgICAgIH07CgogICAgICAgIG9iai5nZXRTaGFyZUxpbmsgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHJldHVybiBsb2NhdGlvbi5ocmVmOwogICAgICAgIH07CgogICAgICAgIG9iai5pc1B3ZFNoYXJlT3BlbiA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgcmV0dXJuIG9wdGlvbi5pc09wdGlvbkFjdGl2ZShvcHRpb24uY29uc3RhbnQudHkxODlfc2hhcmVfc3RhdHVzKTsKICAgICAgICB9OwoKICAgICAgICByZXR1cm4gb2JqOwogICAgfSk7CgogICAgY29udGFpbmVyLmRlZmluZSgiYXBwX21hbmFnZSIsIFsibWV0YSIsICJ1bnNhZmVXaW5kb3ciXSwgZnVuY3Rpb24gKG1ldGEsIHVuc2FmZVdpbmRvdykgewogICAgICAgIHZhciBvYmogPSB7fTsKCiAgICAgICAgb2JqLnJ1biA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgaWYgKG1ldGEuZXhpc3RNZXRhKCJtYW5hZ2UiKSkgewogICAgICAgICAgICAgICAgdW5zYWZlV2luZG93Lk9uZVBhbiA9IGNvbnRhaW5lcjsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgcmV0dXJuIG9iajsKICAgIH0pOwoKICAgIGNvbnRhaW5lci5kZWZpbmUoImFwcCIsIFsiYXBwUnVubmVyIl0sIGZ1bmN0aW9uIChhcHBSdW5uZXIpIHsKICAgICAgICB2YXIgb2JqID0ge307CgogICAgICAgIG9iai5ydW4gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGFwcFJ1bm5lci5ydW4oWwogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJhcHBfYmFpZHUiLAogICAgICAgICAgICAgICAgICAgIG1hdGNoczogWwogICAgICAgICAgICAgICAgICAgICAgICAiYmFpZHUuY29tIgogICAgICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgbmFtZTogImFwcF93ZWl5dW4iLAogICAgICAgICAgICAgICAgICAgIG1hdGNoczogWwogICAgICAgICAgICAgICAgICAgICAgICAid2VpeXVuLmNvbSIKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJhcHBfbGFuem91cyIsCiAgICAgICAgICAgICAgICAgICAgbWF0Y2hzOiBbCiAgICAgICAgICAgICAgICAgICAgICAgICJsYW56b3VzLmNvbSIsCiAgICAgICAgICAgICAgICAgICAgICAgICJsYW56b3V4LmNvbSIKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJhcHBfMTg5IiwKICAgICAgICAgICAgICAgICAgICBtYXRjaHM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgImNsb3VkLjE4OS5jbiIKICAgICAgICAgICAgICAgICAgICBdCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIG5hbWU6ICJhcHBfbWFuYWdlIiwKICAgICAgICAgICAgICAgICAgICBtYXRjaHM6IFsKICAgICAgICAgICAgICAgICAgICAgICAgIioiCiAgICAgICAgICAgICAgICAgICAgXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICBdKTsKICAgICAgICB9OwoKICAgICAgICByZXR1cm4gb2JqOwogICAgfSk7CgogICAgLyoqIGxpYiAqKi8KICAgIGNvbnRhaW5lci5kZWZpbmUoIiQiLCBbXSwgZnVuY3Rpb24gKCkgewogICAgICAgIHJldHVybiB3aW5kb3cuJDsKICAgIH0pOwogICAgY29udGFpbmVyLmRlZmluZSgiU25hcCIsIFtdLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgaWYgKHR5cGVvZiBTbmFwICE9ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgICAgIHJldHVybiBTbmFwOwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5TbmFwOwogICAgICAgIH0KICAgIH0pOwogICAgY29udGFpbmVyLmRlZmluZSgiRE9NUHVyaWZ5IiwgW10sIGZ1bmN0aW9uICgpIHsKICAgICAgICBpZiAodHlwZW9mIERPTVB1cmlmeSAhPSAidW5kZWZpbmVkIikgewogICAgICAgICAgICByZXR1cm4gRE9NUHVyaWZ5OwogICAgICAgIH0KICAgICAgICBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5ET01QdXJpZnk7CiAgICAgICAgfQogICAgfSk7CgogICAgY29udGFpbmVyLnVzZShbImdtIiwgImNvcmUiLCAiYXBwIl0sIGZ1bmN0aW9uIChnbSwgY29yZSwgYXBwKSB7CiAgICAgICAgZ20ucmVhZHkoZnVuY3Rpb24gKCkgewogICAgICAgICAgICBjb3JlLnJlYWR5KGFwcC5ydW4pOwogICAgICAgIH0pOwogICAgfSk7Cn0pKCk7","requires":[{"meta":{"name":"jquery.min.js","url":"https://cdn.staticfile.org/jquery/3.5.0/jquery.min.js","ts":1599486166732,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"purify.min.js","url":"https://cdn.staticfile.org/dompurify/2.0.10/purify.min.js","ts":1599486166717,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"snap.svg-min.js","url":"https://cdn.staticfile.org/snap.svg/0.5.1/snap.svg-min.js","ts":1599486166741,"mimetype":"text/javascript"},"source":""}]},{"name":"百度网盘直链提取","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["baidu.com","baidupcs.com","bilibili.com","111.229.37.218","127.0.0.1","localhost","self"],"orig_excludes":["https://message.bilibili.com/*"],"orig_includes":["https://*.bilibili.com/*","https://pan.baidu.com/disk/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"buinfo":"s{\"like\":1,\"coin\":0,\"mid\":310265481,\"vip\":0,\"level\":4,\"csrf\":\"1090dcab18bd920b7257447c4b66956e\"}"},"ts":1595584913106},"enabled":false,"position":2,"file_url":"https://greasyfork.org/scripts/400184-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%9B%B4%E9%93%BE%E6%8F%90%E5%8F%96/code/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%9B%B4%E9%93%BE%E6%8F%90%E5%8F%96.user.js","uuid":"65d400ef-6572-4c56-94b1-67c51b3696ba","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWVzcGFjZSB6eXh1YmluZwovLyBAbmFtZSDnmb7luqbnvZHnm5jnm7Tpk77mj5Dlj5YKLy8gQGRlc2NyaXB0aW9uIFRoaXMgc2NyaXB0IHdhcyBkZWxldGVkIGZyb20gR3JlYXN5IEZvcmssIGFuZCBkdWUgdG8gaXRzIG5lZ2F0aXZlIGVmZmVjdHMsIGl0IGhhcyBiZWVuIGF1dG9tYXRpY2FsbHkgcmVtb3ZlZCBmcm9tIHlvdXIgYnJvd3Nlci4KLy8gQHZlcnNpb24gMC4wLjIyLjEKLy8gQGluY2x1ZGUgaHR0cHM6Ly8qLmJpbGliaWxpLmNvbS8qCi8vIEBpbmNsdWRlIGh0dHBzOi8vcGFuLmJhaWR1LmNvbS9kaXNrLyoKLy8gQGV4Y2x1ZGUgaHR0cHM6Ly9tZXNzYWdlLmJpbGliaWxpLmNvbS8qCi8vIEBjb25uZWN0IGJhaWR1LmNvbQovLyBAY29ubmVjdCBiYWlkdXBjcy5jb20KLy8gQGNvbm5lY3QgYmlsaWJpbGkuY29tCi8vIEBjb25uZWN0IDExMS4yMjkuMzcuMjE4Ci8vIEBjb25uZWN0IDEyNy4wLjAuMQovLyBAY29ubmVjdCBsb2NhbGhvc3QKLy8gQGNvbm5lY3Qgc2VsZgovLyBAZ3JhbnQgR01fY29va2llCi8vIEBncmFudCBHTV9kb3dubG9hZAovLyBAZ3JhbnQgR01fZGVsZXRlVmFsdWUKLy8gQGdyYW50IEdNX2dldFZhbHVlCi8vIEBncmFudCBHTV9zZXRWYWx1ZQovLyBAZ3JhbnQgR01fc2V0Q2xpcGJvYXJkCi8vIEBncmFudCBHTV9vcGVuSW5UYWIKLy8gQGdyYW50IEdNX3htbGh0dHBSZXF1ZXN0Ci8vIEBncmFudCB1bnNhZmVXaW5kb3cKLy8gQHJ1bi1hdCBkb2N1bWVudC1pZGxlCi8vID09L1VzZXJTY3JpcHQ9PQo="},{"name":"懒人专用，全网VIP视频免费破解去广告、全网音乐直接下载、百度网盘直接下载、知乎视频下载等多合一版。长期更新，放心使用。","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["d.pcs.baidu.com"],"orig_excludes":["*://*.eggvod.cn/*"],"orig_includes":["*://pan.baidu.com/disk/home*","*://yun.baidu.com/disk/home*","*://pan.baidu.com/s*","*://yun.baidu.com/s*","*://*.zhihu.com/*","*://v.vzuu.com/video/*","*v.youku.com/v_*","*m.youku.com/v*","*m.youku.com/a*","*v.qq.com/x/*","*v.qq.com/p*","*v.qq.com/cover*","*v.qq.com/tv/*","*film.sohu.com/album/*","*tv.sohu.com/*","*.iqiyi.com/v_*","*.iqiyi.com/w_*","*.iqiyi.com/a_*","*.le.com/ptv/vplay/*","*.tudou.com/listplay/*","*.tudou.com/albumplay/*","*.tudou.com/programs/view/*","*.tudou.com/v*","*.mgtv.com/b/*","*.acfun.cn/v/*","*.bilibili.com/video/*","*.bilibili.com/anime/*","*.bilibili.com/bangumi/play/*","*.pptv.com/show/*","*://*.baofeng.com/play/*","*://*.wasu.cn/Play/show*","*://v.yinyuetai.com/video/*","*://v.yinyuetai.com/playlist/*","*://item.taobao.com/*","*://*detail.tmall.com/*","*://*detail.tmall.hk/*","*://*.liangxinyao.com/*","*://music.163.com/song*","*://music.163.com/m/song*","*://y.qq.com/n/*","*://*.kugou.com/song*","*://*.kuwo.cn/yinyue*","*://*.kuwo.cn/play_detail*","*://*.xiami.com/*","*://music.taihe.com/song*","*://*.1ting.com/player*","*://music.migu.cn/v*","*://*.lizhi.fm/*","*://*.qingting.fm/*","*://*.ximalaya.com/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"current_version":"s4.0.0","init":"n0","lastest_version":"s4.1.7","scode":"s94108"},"ts":1595075679989},"enabled":false,"position":3,"file_url":"https://greasyfork.org/scripts/370634-%E6%87%92%E4%BA%BA%E4%B8%93%E7%94%A8-%E5%85%A8%E7%BD%91vip%E8%A7%86%E9%A2%91%E5%85%8D%E8%B4%B9%E7%A0%B4%E8%A7%A3%E5%8E%BB%E5%B9%BF%E5%91%8A-%E5%85%A8%E7%BD%91%E9%9F%B3%E4%B9%90%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD-%E7%9F%A5%E4%B9%8E%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD%E7%AD%89%E5%A4%9A%E5%90%88%E4%B8%80%E7%89%88-%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0-%E6%94%BE%E5%BF%83%E4%BD%BF%E7%94%A8/code/%E6%87%92%E4%BA%BA%E4%B8%93%E7%94%A8%EF%BC%8C%E5%85%A8%E7%BD%91VIP%E8%A7%86%E9%A2%91%E5%85%8D%E8%B4%B9%E7%A0%B4%E8%A7%A3%E5%8E%BB%E5%B9%BF%E5%91%8A%E3%80%81%E5%85%A8%E7%BD%91%E9%9F%B3%E4%B9%90%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E3%80%81%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E3%80%81%E7%9F%A5%E4%B9%8E%E8%A7%86%E9%A2%91%E4%B8%8B%E8%BD%BD%E7%AD%89%E5%A4%9A%E5%90%88%E4%B8%80%E7%89%88%E3%80%82%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0%EF%BC%8C%E6%94%BE%E5%BF%83%E4%BD%BF%E7%94%A8%E3%80%82.user.js","uuid":"2c073b68-381f-47a0-9564-1d856b754d4a","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICDmh5LkurrkuJPnlKjvvIzlhajnvZFWSVDop4bpopHlhY3otLnnoLTop6Pljrvlub/lkYrjgIHlhajnvZHpn7PkuZDnm7TmjqXkuIvovb3jgIHnmb7luqbnvZHnm5jnm7TmjqXkuIvovb3jgIHnn6XkuY7op4bpopHkuIvovb3nrYnlpJrlkIjkuIDniYjjgILplb/mnJ/mm7TmlrDvvIzmlL7lv4Pkvb/nlKjjgIIKLy8gQG5hbWVzcGFjZSAJIGxhbmhhaGEKLy8gQHZlcnNpb24gICAgICAyLjMuNgovLyBAZGVzY3JpcHRpb24gIOiHqueUqOe7hOWQiOWei+WkmuWKn+iDveiEmuacrO+8jOmbhuWQiOS6huS8mOmFt+OAgeeIseWlh+iJuuOAgeiFvuiur+OAgeiKkuaenOetieWFqOe9kVZJUOinhumikeWFjei0ueegtOino+WOu+W5v+WRiu+8jOe9keaYk+S6kemfs+S5kOOAgVFR6Z+z5LmQ44CB6YW354uX44CB6YW35oiR44CB6Jm+57Gz44CB6Jy76JyTRk3jgIHojZTmnp1GTeOAgeWWnOmprOaLiembheetiee9keermemfs+S5kOWFjeWuouaIt+err+S4i+i9ve+8jOeZvuW6pue9keebmOebtOaOpeS4i+i9ve+8jOefpeS5juinhumikeS4i+i9ve+8jOS8mOaDoOWIuOafpeivouetieWHoOS4quiHquW3seW4uOeUqOeahOWKn+iDveOAggovLyBAYXV0aG9yICAgICAgIGxhbmhhaGHvvIxzeWh5ejE5OTDvvIxDaGFv77yMenVpaHVpbWFpCi8vIEBpbmNsdWRlICAgICAgKjovL3Bhbi5iYWlkdS5jb20vZGlzay9ob21lKgovLyBAaW5jbHVkZSAgICAgICo6Ly95dW4uYmFpZHUuY29tL2Rpc2svaG9tZSoKLy8gQGluY2x1ZGUgICAgICAqOi8vcGFuLmJhaWR1LmNvbS9zKgovLyBAaW5jbHVkZSAgICAgICo6Ly95dW4uYmFpZHUuY29tL3MqCi8vIEBpbmNsdWRlICAgICAgKjovLyouemhpaHUuY29tLyoKLy8gQGluY2x1ZGUgICAgICAqOi8vdi52enV1LmNvbS92aWRlby8qCi8vIEBpbmNsdWRlICAgICAgKnYueW91a3UuY29tL3ZfKgovLyBAaW5jbHVkZSAgICAgICptLnlvdWt1LmNvbS92KgovLyBAaW5jbHVkZSAgICAgICptLnlvdWt1LmNvbS9hKgovLyBAaW5jbHVkZSAgICAgICp2LnFxLmNvbS94LyoKLy8gQGluY2x1ZGUgICAgICAqdi5xcS5jb20vcCoKLy8gQGluY2x1ZGUgICAgICAqdi5xcS5jb20vY292ZXIqCi8vIEBpbmNsdWRlICAgICAgKnYucXEuY29tL3R2LyoKLy8gQGluY2x1ZGUgICAgICAqZmlsbS5zb2h1LmNvbS9hbGJ1bS8qCi8vIEBpbmNsdWRlICAgICAgKnR2LnNvaHUuY29tLyoKLy8gQGluY2x1ZGUgICAgICAqLmlxaXlpLmNvbS92XyoKLy8gQGluY2x1ZGUgICAgICAqLmlxaXlpLmNvbS93XyoKLy8gQGluY2x1ZGUgICAgICAqLmlxaXlpLmNvbS9hXyoKLy8gQGluY2x1ZGUgICAgICAqLmxlLmNvbS9wdHYvdnBsYXkvKgovLyBAaW5jbHVkZSAgICAgICoudHVkb3UuY29tL2xpc3RwbGF5LyoKLy8gQGluY2x1ZGUgICAgICAqLnR1ZG91LmNvbS9hbGJ1bXBsYXkvKgovLyBAaW5jbHVkZSAgICAgICoudHVkb3UuY29tL3Byb2dyYW1zL3ZpZXcvKgovLyBAaW5jbHVkZSAgICAgICoudHVkb3UuY29tL3YqCi8vIEBpbmNsdWRlICAgICAgKi5tZ3R2LmNvbS9iLyoKLy8gQGluY2x1ZGUgICAgICAqLmFjZnVuLmNuL3YvKgovLyBAaW5jbHVkZSAgICAgICouYmlsaWJpbGkuY29tL3ZpZGVvLyoKLy8gQGluY2x1ZGUgICAgICAqLmJpbGliaWxpLmNvbS9hbmltZS8qCi8vIEBpbmNsdWRlICAgICAgKi5iaWxpYmlsaS5jb20vYmFuZ3VtaS9wbGF5LyoKLy8gQGluY2x1ZGUgICAgICAqLnBwdHYuY29tL3Nob3cvKgovLyBAaW5jbHVkZSAgICAgICo6Ly8qLmJhb2ZlbmcuY29tL3BsYXkvKgovLyBAaW5jbHVkZSAgICAgICo6Ly8qLndhc3UuY24vUGxheS9zaG93KgovLyBAaW5jbHVkZSAgICAgICo6Ly92Lnlpbnl1ZXRhaS5jb20vdmlkZW8vKgovLyBAaW5jbHVkZSAgICAgICo6Ly92Lnlpbnl1ZXRhaS5jb20vcGxheWxpc3QvKgovLyBAaW5jbHVkZSAgICAgICo6Ly9pdGVtLnRhb2Jhby5jb20vKgovLyBAaW5jbHVkZSAgICAgICo6Ly8qZGV0YWlsLnRtYWxsLmNvbS8qCi8vIEBpbmNsdWRlICAgICAgKjovLypkZXRhaWwudG1hbGwuaGsvKgovLyBAaW5jbHVkZSAgICAgICo6Ly8qLmxpYW5neGlueWFvLmNvbS8qCi8vIEBpbmNsdWRlICAgICAgKjovL211c2ljLjE2My5jb20vc29uZyoKLy8gQGluY2x1ZGUgICAgICAqOi8vbXVzaWMuMTYzLmNvbS9tL3NvbmcqCi8vIEBpbmNsdWRlICAgICAgKjovL3kucXEuY29tL24vKgovLyBAaW5jbHVkZSAgICAgICo6Ly8qLmt1Z291LmNvbS9zb25nKgovLyBAaW5jbHVkZSAgICAgICo6Ly8qLmt1d28uY24veWlueXVlKgovLyBAaW5jbHVkZSAgICAgICo6Ly8qLmt1d28uY24vcGxheV9kZXRhaWwqCi8vIEBpbmNsdWRlICAgICAgKjovLyoueGlhbWkuY29tLyoKLy8gQGluY2x1ZGUgICAgICAqOi8vbXVzaWMudGFpaGUuY29tL3NvbmcqCi8vIEBpbmNsdWRlICAgICAgKjovLyouMXRpbmcuY29tL3BsYXllcioKLy8gQGluY2x1ZGUgICAgICAqOi8vbXVzaWMubWlndS5jbi92KgovLyBAaW5jbHVkZSAgICAgICo6Ly8qLmxpemhpLmZtLyoKLy8gQGluY2x1ZGUgICAgICAqOi8vKi5xaW5ndGluZy5mbS8qCi8vIEBpbmNsdWRlICAgICAgKjovLyoueGltYWxheWEuY29tLyoKLy8gQGV4Y2x1ZGUgICAgICAqOi8vKi5lZ2d2b2QuY24vKgovLyBAY29ubmVjdCAgICAgIGQucGNzLmJhaWR1LmNvbQovLyBAcmVxdWlyZSAgICAgIGh0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9ucG0vanF1ZXJ5QDMuMi4xL2Rpc3QvanF1ZXJ5Lm1pbi5qcwovLyBAcmVxdWlyZSAgICAgIGh0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9ucG0vc3dlZXRhbGVydDJAOQovLyBAbGljZW5zZSAgICAgIEdQTCBMaWNlbnNlCi8vIEBncmFudCAgICAgICAgR01fZG93bmxvYWQKLy8gQGdyYW50ICAgICAgICBHTV9vcGVuSW5UYWIKLy8gQGdyYW50ICAgICAgICBHTV9zZXRWYWx1ZQovLyBAZ3JhbnQgICAgICAgIEdNX2dldFZhbHVlCi8vIEBncmFudCAgICAgICAgR01feG1saHR0cFJlcXVlc3QKLy8gQGdyYW50ICAgICAgICBHTV9hZGRTdHlsZQovLyBAZ3JhbnQgICAgICAgIHVuc2FmZVdpbmRvdwovLyBAZ3JhbnQgICAgICAgIEdNX3NldENsaXBib2FyZAovLyBAZ3JhbnQgICAgICAgIEdNX2dldFJlc291cmNlVVJMCi8vIEBncmFudCAgICAgICAgR01fZ2V0UmVzb3VyY2VUZXh0Ci8vID09L1VzZXJTY3JpcHQ9PQoKLy/nmb7luqbnvZHnm5gKKGZ1bmN0aW9uKCkgewp2YXIgcGFuX3RpdGxlPW5ldyBBcnJheSgpCgkJcGFuX3RpdGxlWzBdPSAiaHR0cHM6Ly9wYW4uYmFpZHUuY29tLyIKCQlwYW5fdGl0bGVbMV09ICJodHRwczovL3l1bi5iYWlkdS5jb20vIgogICAgICAgIGxldCBwYW5fbGluayA9IGxvY2F0aW9uLmhyZWY7CgkJZm9yKHZhciBhPTA7YTxwYW5fdGl0bGUubGVuZ3RoO2ErKyl7CgkJCWlmKHBhbl9saW5rLmluZGV4T2YocGFuX3RpdGxlW2FdKSE9IC0xKXsKICAgICAgICAgICAgICAgIHBhbl9saW5rID0gcGFuX2xpbmsucmVwbGFjZSgnYmFpZHUuY29tJywnYmFpZHV3cC5jb20nKTsKCQkJCXZhciBwYW5faHRtbCA9ICI8YSBocmVmPSIrcGFuX2xpbmsrIiB0YXJnZXQ9J19ibGFuaycgc3R5bGU9J2N1cnNvcjpwb2ludGVyO3otaW5kZXg6OTg7ZGlzcGxheTpibG9jazt3aWR0aDozMHB4O2hlaWdodDozMHB4O2xpbmUtaGVpZ2h0OjMwcHg7cG9zaXRpb246Zml4ZWQ7bGVmdDowO3RvcDozMDBweDt0ZXh0LWFsaWduOmNlbnRlcjsnPjxpbWcgc3JjPSdodHRwczovL2Nkbi44MG5vdGUuY29tL3ZpcC5naWYnIHN0eWxlPSd3aWR0aDo1MHB4JyA+PC9hPiI7CgkJCQkkKCJib2R5IikuYXBwZW5kKHBhbl9odG1sKTsKCid1c2Ugc3RyaWN0JwovL+eZvuW6pue9keebmOiEmuacrOW8gOWniwp2YXIgX3R5cGVvZiA9ICJmdW5jdGlvbiIgPT0gdHlwZW9mIFN5bWJvbCAmJiAic3ltYm9sIiA9PSB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID8gZnVuY3Rpb24gKGUpIHsKICAgIHJldHVybiB0eXBlb2YgZTsKfSA6IGZ1bmN0aW9uIChlKSB7CiAgICByZXR1cm4gZSAmJiAiZnVuY3Rpb24iID09IHR5cGVvZiBTeW1ib2wgJiYgZS5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIGUgIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBlOwp9OwohZnVuY3Rpb24gKCkgewogICAgZnVuY3Rpb24gZShlLCB0LCBpKSB7CiAgICAgICAgZSA9IGUgfHwgIiIsIHQgPSB0IHx8ICIiLCBpID0gaSB8fCAiIiwgY29uc29sZS5ncm91cCgiW+eZvuW6pue9keebmOebtOmTvuS4i+i9veWKqeaJi10iKSwgY29uc29sZS5sb2coZSwgdCwgaSksIGNvbnNvbGUuZ3JvdXBFbmQoKTsKICAgIH0KCiAgICBmdW5jdGlvbiB0KCkgewogICAgICAgIHZhciBlID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oImJhaWR1eXVuUGx1Z2luX0JEVVNTIikgPyBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgiYmFpZHV5dW5QbHVnaW5fQkRVU1MiKSA6ICd7ImJhaWR1eXVuUGx1Z2luX0JEVVNTIjoiIn0nLAogICAgICAgICAgICB0ID0gSlNPTi5wYXJzZShlKS5CRFVTUzsKICAgICAgICByZXR1cm4gdCB8fCBTd2FsLmZpcmUoewogICAgICAgICAgICBpY29uOiAiZXJyb3IiLAogICAgICAgICAgICB0aXRsZTogIuaPkOekuiIsCiAgICAgICAgICAgIGh0bWw6ICdBcmlh6ZO+5o6l6I635Y+W6ZyA6KaB6YWN5ZCIPGEgaHJlZj0iaHR0cHM6Ly93d3cuYmFpZHV5dW4ud2lraS96aC1jbi9hc3Npc3RhbnQuaHRtbCIgdGFyZ2V0PSJfYmxhbmsiPuOAkOe9keebmOS4h+iDveWKqeaJi+OAkeS9v+eUqDwvYT4nLAogICAgICAgICAgICBmb290ZXI6ICLjgJDnvZHnm5jkuIfog73liqnmiYvjgJHmmK/kuIvovb3liqnmiYvnmoTlop7lvLrmianlsZXmj5Lku7YiLAogICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogIuWuieijhSIKICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgIGUudmFsdWUgJiYgR01fb3BlbkluVGFiKCJodHRwczovL3d3dy5iYWlkdXl1bi53aWtpL3poLWNuL2Fzc2lzdGFudC5odG1sIiwge2FjdGl2ZTogITB9KTsKICAgICAgICB9KSwgdDsKICAgIH0KCiAgICBmdW5jdGlvbiBpKGUsIGksIG4pIHsKICAgICAgICB2YXIgYSA9IHQoKTsKICAgICAgICByZXR1cm4gbiA9IG4gfHwgbSwgYSA/ICdhcmlhMmMgIicgKyBlICsgJyIgLS1vdXQgIicgKyBpICsgJyIgLS1oZWFkZXIgIlVzZXItQWdlbnQ6ICcgKyBuICsgJyIgLS1oZWFkZXIgIkNvb2tpZTogQkRVU1M9JyArIGEgKyAnIicgOiAi6K+35YWI5a6J6KOF572R55uY5LiH6IO95Yqp5omL77yM5a6J6KOF5ZCO6K+36YeN5ZCv5rWP6KeI5Zmo77yB77yB77yBIjsKICAgIH0KCiAgICBmdW5jdGlvbiBuKGUpIHsKICAgICAgICByZXR1cm4gZSA/IGUucmVwbGFjZSgvJi9nLCAiJmFtcDsiKSA6ICIiOwogICAgfQoKICAgIGZ1bmN0aW9uIGEoZSkgewogICAgICAgIHZhciB0ID0gdm9pZCAwLCBpID0gdm9pZCAwLCBuID0gdm9pZCAwLCBhID0gdm9pZCAwLCBvID0gdm9pZCAwLCByID0gdm9pZCAwLAogICAgICAgICAgICBsID0gIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky8iOwogICAgICAgIGZvciAobiA9IGUubGVuZ3RoLCBpID0gMCwgdCA9ICIiOyBuID4gaTspIHsKICAgICAgICAgICAgaWYgKGEgPSAyNTUgJiBlLmNoYXJDb2RlQXQoaSsrKSwgaSA9PSBuKSB7CiAgICAgICAgICAgICAgICB0ICs9IGwuY2hhckF0KGEgPj4gMiksIHQgKz0gbC5jaGFyQXQoKDMgJiBhKSA8PCA0KSwgdCArPSAiPT0iOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKG8gPSBlLmNoYXJDb2RlQXQoaSsrKSwgaSA9PSBuKSB7CiAgICAgICAgICAgICAgICB0ICs9IGwuY2hhckF0KGEgPj4gMiksIHQgKz0gbC5jaGFyQXQoKDMgJiBhKSA8PCA0IHwgKDI0MCAmIG8pID4+IDQpLCB0ICs9IGwuY2hhckF0KCgxNSAmIG8pIDw8IDIpLCB0ICs9ICI9IjsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHIgPSBlLmNoYXJDb2RlQXQoaSsrKSwgdCArPSBsLmNoYXJBdChhID4+IDIpLCB0ICs9IGwuY2hhckF0KCgzICYgYSkgPDwgNCB8ICgyNDAgJiBvKSA+PiA0KSwgdCArPSBsLmNoYXJBdCgoMTUgJiBvKSA8PCAyIHwgKDE5MiAmIHIpID4+IDYpLCB0ICs9IGwuY2hhckF0KDYzICYgcik7CiAgICAgICAgfQogICAgICAgIHJldHVybiB0OwogICAgfQoKICAgIGZ1bmN0aW9uIG8oKSB7CiAgICAgICAgdmFyIGUgPSAvW1wvXS4rW1wvXS9nOwogICAgICAgIHJldHVybiBsb2NhdGlvbi5wYXRobmFtZS5tYXRjaChlKVswXS5yZXBsYWNlKC9cLy9nLCAiIik7CiAgICB9CgogICAgZnVuY3Rpb24gcihlKSB7CiAgICAgICAgdmFyIHQgPSB2b2lkIDAsIGkgPSB2b2lkIDAsIG4gPSBkb2N1bWVudCwgYSA9IGRlY29kZVVSSTsKICAgICAgICByZXR1cm4gbi5jb29raWUubGVuZ3RoID4gMCAmJiAtMSAhPSAodCA9IG4uY29va2llLmluZGV4T2YoZSArICI9IikpID8gKHQgPSB0ICsgZS5sZW5ndGggKyAxLCBpID0gbi5jb29raWUuaW5kZXhPZigiOyIsIHQpLCAtMSA9PSBpICYmIChpID0gbi5jb29raWUubGVuZ3RoKSwgYShuLmNvb2tpZS5zdWJzdHJpbmcodCwgaSkpKSA6ICIiOwogICAgfQoKICAgIGZ1bmN0aW9uIGwoKSB7CiAgICAgICAgZnVuY3Rpb24gZShlKSB7CiAgICAgICAgICAgIGlmIChlLmxlbmd0aCA8IDIpIHsKICAgICAgICAgICAgICAgIHZhciB0ID0gZS5jaGFyQ29kZUF0KDApOwogICAgICAgICAgICAgICAgcmV0dXJuIDEyOCA+IHQgPyBlIDogMjA0OCA+IHQgPyBkKDE5MiB8IHQgPj4+IDYpICsgZCgxMjggfCA2MyAmIHQpIDogZCgyMjQgfCB0ID4+PiAxMiAmIDE1KSArIGQoMTI4IHwgdCA+Pj4gNiAmIDYzKSArIGQoMTI4IHwgNjMgJiB0KTsKICAgICAgICAgICAgfQogICAgICAgICAgICB2YXIgaSA9IDY1NTM2ICsgMTAyNCAqIChlLmNoYXJDb2RlQXQoMCkgLSA1NTI5NikgKyAoZS5jaGFyQ29kZUF0KDEpIC0gNTYzMjApOwogICAgICAgICAgICByZXR1cm4gZCgyNDAgfCBpID4+PiAxOCAmIDcpICsgZCgxMjggfCBpID4+PiAxMiAmIDYzKSArIGQoMTI4IHwgaSA+Pj4gNiAmIDYzKSArIGQoMTI4IHwgNjMgJiBpKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHQodCkgewogICAgICAgICAgICByZXR1cm4gKHQgKyAiIiArIE1hdGgucmFuZG9tKCkpLnJlcGxhY2UobCwgZSk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBpKGUpIHsKICAgICAgICAgICAgdmFyIHQgPSBbMCwgMiwgMV1bZS5sZW5ndGggJSAzXSwKICAgICAgICAgICAgICAgIGkgPSBlLmNoYXJDb2RlQXQoMCkgPDwgMTYgfCAoZS5sZW5ndGggPiAxID8gZS5jaGFyQ29kZUF0KDEpIDogMCkgPDwgOCB8IChlLmxlbmd0aCA+IDIgPyBlLmNoYXJDb2RlQXQoMikgOiAwKTsKICAgICAgICAgICAgcmV0dXJuIFtvLmNoYXJBdChpID4+PiAxOCksIG8uY2hhckF0KGkgPj4+IDEyICYgNjMpLCB0ID49IDIgPyAiPSIgOiBvLmNoYXJBdChpID4+PiA2ICYgNjMpLCB0ID49IDEgPyAiPSIgOiBvLmNoYXJBdCg2MyAmIGkpXS5qb2luKCIiKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIG4oZSkgewogICAgICAgICAgICByZXR1cm4gZS5yZXBsYWNlKC9bXHNcU117MSwzfS9nLCBpKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGEoKSB7CiAgICAgICAgICAgIHJldHVybiBuKHQoKG5ldyBEYXRlKS5nZXRUaW1lKCkpKTsKICAgICAgICB9CgogICAgICAgIHZhciBvID0gIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky9+77yBQCPvv6Ul4oCm4oCmJiIsCiAgICAgICAgICAgIGwgPSAvW1x1RDgwMC1cdURCRkZdW1x1REMwMC1cdURGRkZGXXxbXlx4MDAtXHg3Rl0vZywgZCA9IFN0cmluZy5mcm9tQ2hhckNvZGU7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgICAgIHJldHVybiB0ID8gYShTdHJpbmcoZSkpLnJlcGxhY2UoL1srXC9dL2csIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gIisiID09IGUgPyAiLSIgOiAiXyI7CiAgICAgICAgICAgIH0pLnJlcGxhY2UoLz0vZywgIiIpIDogYShTdHJpbmcoZSkpOwogICAgICAgIH0ocigiQkFJRFVJRCIpKTsKICAgIH0KCiAgICBmdW5jdGlvbiBkKCkgewogICAgICAgIGZ1bmN0aW9uIGUoKSB7CiAgICAgICAgICAgICQoImRpdi5kaWFsb2ctYm9keSIsIG8pLmNoaWxkcmVuKCkucmVtb3ZlKCksICQoImRpdi5kaWFsb2ctaGVhZGVyIGgzIHNwYW4uZGlhbG9nLXRpdGxlIiwgbykudGV4dCgiIiksICQoImRpdi5kaWFsb2ctdGlwIHAiLCBvKS50ZXh0KCIiKSwgJCgiZGl2LmRpYWxvZy1idXR0b24iLCBvKS5oaWRlKCksICQoImRpdi5kaWFsb2ctcmFkaW8gaW5wdXRbdHlwZT1yYWRpb11bbmFtZT1zaG93bW9kZV1bdmFsdWU9bXVsdGldIiwgbykucHJvcCgiY2hlY2tlZCIsICEwKSwgJCgiZGl2LmRpYWxvZy1yYWRpbyIsIG8pLmhpZGUoKSwgJCgiZGl2LmRpYWxvZy1idXR0b24gYnV0dG9uI2RpYWxvZy1jb3B5LWJ1dHRvbiIsIG8pLmhpZGUoKSwgJCgiZGl2LmRpYWxvZy1idXR0b24gYnV0dG9uI2RpYWxvZy1lZGl0LWJ1dHRvbiIsIG8pLmhpZGUoKSwgJCgiZGl2LmRpYWxvZy1idXR0b24gYnV0dG9uI2RpYWxvZy1leGl0LWJ1dHRvbiIsIG8pLmhpZGUoKSwgby5oaWRlKCksIHIuaGlkZSgpOwogICAgICAgIH0KCiAgICAgICAgdmFyIHQgPSBbXSwgYSA9IHZvaWQgMCwgbyA9IHZvaWQgMCwgciA9IHZvaWQgMDsKICAgICAgICB0aGlzLm9wZW4gPSBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICBpZiAoYSA9IGUsIHQgPSBbXSwgImxpbmsiID09IGUudHlwZSAmJiAodCA9IGUubGlzdC51cmxzLCAkKCJkaXYuZGlhbG9nLWhlYWRlciBoMyBzcGFuLmRpYWxvZy10aXRsZSIsIG8pLnRleHQoZS50aXRsZSArICLvvJoiICsgZS5saXN0LmZpbGVuYW1lKSwgJC5lYWNoKGUubGlzdC51cmxzLCBmdW5jdGlvbiAoZSwgdCkgewogICAgICAgICAgICAgICAgdC51cmwgPSBuKHQudXJsKTsKICAgICAgICAgICAgICAgIHZhciBpID0gJCgnPGRpdj48ZGl2IHN0eWxlPSJ3aWR0aDozMHB4O2Zsb2F0OmxlZnQiPicgKyB0LnJhbmsgKyAnOjwvZGl2PjxkaXYgc3R5bGU9IndoaXRlLXNwYWNlOm5vd3JhcDtvdmVyZmxvdzpoaWRkZW47dGV4dC1vdmVyZmxvdzplbGxpcHNpcyI+PGEgaHJlZj0iJyArIHQudXJsICsgJyI+JyArIHQudXJsICsgIjwvYT48L2Rpdj48L2Rpdj4iKTsKICAgICAgICAgICAgICAgICQoImRpdi5kaWFsb2ctYm9keSIsIG8pLmFwcGVuZChpKTsKICAgICAgICAgICAgfSkpLCAiYmF0Y2giICE9IGUudHlwZSAmJiAiYmF0Y2hBcmlhIiAhPSBlLnR5cGUgJiYgImJhdGNoQXJpYVJQQyIgIT0gZS50eXBlIHx8ICh0ID0gZS5saXN0LCAkKCJkaXYuZGlhbG9nLWhlYWRlciBoMyBzcGFuLmRpYWxvZy10aXRsZSIsIG8pLnRleHQoZS50aXRsZSksICQuZWFjaChlLmxpc3QsIGZ1bmN0aW9uICh0LCBuKSB7CiAgICAgICAgICAgICAgICB2YXIgYSA9IHZvaWQgMDsKICAgICAgICAgICAgICAgIGlmICgiYmF0Y2hBcmlhIiA9PSBlLnR5cGUpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgciA9IGkobi5kb3dubG9hZGxpbmssIG4uZmlsZW5hbWUsIGIpOwogICAgICAgICAgICAgICAgICAgIGEgPSAkKCc8ZGl2IHN0eWxlPSJvdmVyZmxvdzpoaWRkZW47dGV4dC1vdmVyZmxvdzplbGxpcHNpczt3aGl0ZS1zcGFjZTpub3dyYXAiPjxkaXYgc3R5bGU9IndpZHRoOjE1MHB4O2Zsb2F0OmxlZnQ7b3ZlcmZsb3c6aGlkZGVuO3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXMiIHRpdGxlPSInICsgbi5maWxlbmFtZSArICciPicgKyBuLmZpbGVuYW1lICsgJzwvZGl2PjxzcGFuPu+8mjwvc3Bhbj48YSBocmVmPSJqYXZhc2NyaXB0OjsiIGNsYXNzPSJhcmlhMmMtbGluayI+JyArIHIgKyAiPC9hPjwvZGl2PiIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgImJhdGNoIiA9PSBlLnR5cGUgJiYgKGEgPSAkKCc8ZGl2IHN0eWxlPSJvdmVyZmxvdzpoaWRkZW47dGV4dC1vdmVyZmxvdzplbGxpcHNpczt3aGl0ZS1zcGFjZTpub3dyYXAiPjxkaXYgc3R5bGU9IndpZHRoOjE1MHB4O2Zsb2F0OmxlZnQ7b3ZlcmZsb3c6aGlkZGVuO3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXMiIHRpdGxlPSInICsgbi5maWxlbmFtZSArICciPicgKyBuLmZpbGVuYW1lICsgJzwvZGl2PjxzcGFuPu+8mjwvc3Bhbj48YSBocmVmPSInICsgbi5kb3dubG9hZGxpbmsgKyAnIj4nICsgbi5kb3dubG9hZGxpbmsgKyAiPC9hPjwvZGl2PiIpKSwgImJhdGNoQXJpYVJQQyIgPT0gZS50eXBlICYmIChhID0gJCgnPGRpdiBzdHlsZT0ib3ZlcmZsb3c6aGlkZGVuO3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXM7d2hpdGUtc3BhY2U6bm93cmFwIj48ZGl2IHN0eWxlPSJ3aWR0aDoxNTBweDtmbG9hdDpsZWZ0O292ZXJmbG93OmhpZGRlbjt0ZXh0LW92ZXJmbG93OmVsbGlwc2lzIiB0aXRsZT0iJyArIG4uZmlsZW5hbWUgKyAnIj4nICsgbi5maWxlbmFtZSArICc8L2Rpdj48c3Bhbj7vvJo8L3NwYW4+PGJ1dHRvbiBjbGFzcz0iYXJpYS1ycGMiIGRhdGEtbGluaz0iJyArIG4uZG93bmxvYWRsaW5rICsgJyIgZGF0YS1maWxlbmFtZT0iJyArIG4uZmlsZW5hbWUgKyAnIj7ngrnlh7vlj5HpgIHliLBBcmlhPC9idXR0b24+PC9kaXY+JykpLCAkKCJkaXYuZGlhbG9nLWJvZHkiLCBvKS5hcHBlbmQoYSk7CiAgICAgICAgICAgIH0pKSwgInNoYXJlTGluayIgPT0gZS50eXBlICYmICh0ID0gZS5saXN0LCAkKCJkaXYuZGlhbG9nLWhlYWRlciBoMyBzcGFuLmRpYWxvZy10aXRsZSIsIG8pLnRleHQoZS50aXRsZSksICQuZWFjaChlLmxpc3QsIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgICAgICAgICBpZiAodC5kbGluayA9IG4odC5kbGluayksIDEgIT0gdC5pc2RpcikgewogICAgICAgICAgICAgICAgICAgIHZhciBpID0gJCgnPGRpdiBzdHlsZT0ib3ZlcmZsb3c6aGlkZGVuO3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXM7d2hpdGUtc3BhY2U6bm93cmFwIj48ZGl2IHN0eWxlPSJ3aWR0aDoxNTBweDtmbG9hdDpsZWZ0O292ZXJmbG93OmhpZGRlbjt0ZXh0LW92ZXJmbG93OmVsbGlwc2lzIiB0aXRsZT0iJyArIHQuc2VydmVyX2ZpbGVuYW1lICsgJyI+JyArIHQuc2VydmVyX2ZpbGVuYW1lICsgJzwvZGl2PjxzcGFuPu+8mjwvc3Bhbj48YSBocmVmPSInICsgdC5kbGluayArICciIGNsYXNzPSJzaGFyZS1kb3dubG9hZCI+JyArIHQuZGxpbmsgKyAiPC9hPjwvZGl2PiIpOwogICAgICAgICAgICAgICAgICAgICQoImRpdi5kaWFsb2ctYm9keSIsIG8pLmFwcGVuZChpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkpLCAicnBjTGluayIgPT0gZS50eXBlICYmICh0ID0gZS5saXN0LCAkKCJkaXYuZGlhbG9nLWhlYWRlciBoMyBzcGFuLmRpYWxvZy10aXRsZSIsIG8pLnRleHQoZS50aXRsZSksICQuZWFjaChlLmxpc3QsIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgICAgICAgICBpZiAodC5kbGluayA9IG4odC5kbGluayksIDEgIT0gdC5pc2RpcikgewogICAgICAgICAgICAgICAgICAgIHZhciBpID0gJCgnPGRpdiBzdHlsZT0ib3ZlcmZsb3c6aGlkZGVuO3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXM7d2hpdGUtc3BhY2U6bm93cmFwIj48ZGl2IHN0eWxlPSJ3aWR0aDoxNTBweDtmbG9hdDpsZWZ0O292ZXJmbG93OmhpZGRlbjt0ZXh0LW92ZXJmbG93OmVsbGlwc2lzIiB0aXRsZT0iJyArIHQuc2VydmVyX2ZpbGVuYW1lICsgJyI+JyArIHQuc2VydmVyX2ZpbGVuYW1lICsgJzwvZGl2PjxzcGFuPu+8mjwvc3Bhbj48YnV0dG9uIGNsYXNzPSJhcmlhLXJwYyIgZGF0YS1saW5rPSInICsgdC5kbGluayArICciIGRhdGEtZmlsZW5hbWU9IicgKyB0LnNlcnZlcl9maWxlbmFtZSArICciPueCueWHu+WPkemAgeWIsEFyaWE8L2J1dHRvbj48L2Rpdj4nKTsKICAgICAgICAgICAgICAgICAgICAkKCJkaXYuZGlhbG9nLWJvZHkiLCBvKS5hcHBlbmQoaSk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pKSwgInNoYXJlQXJpYUxpbmsiID09IGUudHlwZSAmJiAodCA9IGUubGlzdCwgJCgiZGl2LmRpYWxvZy1oZWFkZXIgaDMgc3Bhbi5kaWFsb2ctdGl0bGUiLCBvKS50ZXh0KGUudGl0bGUpLCAkLmVhY2goZS5saXN0LCBmdW5jdGlvbiAoZSwgdCkgewogICAgICAgICAgICAgICAgaWYgKDEgIT0gdC5pc2RpcikgewogICAgICAgICAgICAgICAgICAgIHZhciBuID0gaSh0LmRsaW5rLCB0LnNlcnZlcl9maWxlbmFtZSksCiAgICAgICAgICAgICAgICAgICAgICAgIGEgPSAkKCc8ZGl2IHN0eWxlPSJvdmVyZmxvdzpoaWRkZW47dGV4dC1vdmVyZmxvdzplbGxpcHNpczt3aGl0ZS1zcGFjZTpub3dyYXAiPjxkaXYgc3R5bGU9IndpZHRoOjE1MHB4O2Zsb2F0OmxlZnQ7b3ZlcmZsb3c6aGlkZGVuO3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXMiIHRpdGxlPSInICsgdC5zZXJ2ZXJfZmlsZW5hbWUgKyAnIj4nICsgdC5zZXJ2ZXJfZmlsZW5hbWUgKyAnPC9kaXY+PHNwYW4+77yaPC9zcGFuPjxhIGhyZWY9ImphdmFzY3RpcHQ6dm9pZCgwKSIgY2xhc3M9ImFyaWEyYy1saW5rIj4nICsgbiArICI8L2E+PC9kaXY+Iik7CiAgICAgICAgICAgICAgICAgICAgJCgiZGl2LmRpYWxvZy1ib2R5IiwgbykuYXBwZW5kKGEpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSksIGUudGlwICYmICQoImRpdi5kaWFsb2ctdGlwIHAiLCBvKS5odG1sKGUudGlwKSwgZS5zaG93Y29weSAmJiAoJCgiZGl2LmRpYWxvZy1idXR0b24iLCBvKS5zaG93KCksICQoImRpdi5kaWFsb2ctYnV0dG9uIGJ1dHRvbiNkaWFsb2ctY29weS1idXR0b24iLCBvKS5zaG93KCkpLCBlLnNob3dlZGl0KSB7CiAgICAgICAgICAgICAgICAkKCJkaXYuZGlhbG9nLWJ1dHRvbiIsIG8pLnNob3coKSwgJCgiZGl2LmRpYWxvZy1idXR0b24gYnV0dG9uI2RpYWxvZy1lZGl0LWJ1dHRvbiIsIG8pLnNob3coKTsKICAgICAgICAgICAgICAgIHZhciBsID0gJCgnPHRleHRhcmVhIG5hbWU9ImRpYWxvZy10ZXh0YXJlYSIgc3R5bGU9ImRpc3BsYXk6bm9uZTtyZXNpemU6bm9uZTt3aWR0aDo3NThweDtoZWlnaHQ6MzAwcHg7d2hpdGUtc3BhY2U6cHJlO3dvcmQtd3JhcDpub3JtYWw7b3ZlcmZsb3cteDpzY3JvbGwiPjwvdGV4dGFyZWE+JyksCiAgICAgICAgICAgICAgICAgICAgZCA9ICIiOwogICAgICAgICAgICAgICAgImJhdGNoIiA9PSBhLnR5cGUgPyAkLmVhY2godCwgZnVuY3Rpb24gKGUsIGkpIHsKICAgICAgICAgICAgICAgICAgICAiZXJyb3IiICE9IGkuZG93bmxvYWRsaW5rICYmIChlID09IHQubGVuZ3RoIC0gMSA/IGQgKz0gaS5kb3dubG9hZGxpbmsgOiBkICs9IGkuZG93bmxvYWRsaW5rICsgIlxyXG4iKTsKICAgICAgICAgICAgICAgIH0pIDogImxpbmsiID09IGEudHlwZSAmJiAkLmVhY2godCwgZnVuY3Rpb24gKGUsIGkpIHsKICAgICAgICAgICAgICAgICAgICAiZXJyb3IiICE9IGkudXJsICYmIChlID09IHQubGVuZ3RoIC0gMSA/IGQgKz0gaS51cmwgOiBkICs9IGkudXJsICsgIlxyXG4iKTsKICAgICAgICAgICAgICAgIH0pLCBsLnZhbChkKSwgJCgiZGl2LmRpYWxvZy1ib2R5IiwgbykuYXBwZW5kKGwpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHIuc2hvdygpLCBvLnNob3coKTsKICAgICAgICB9LCB0aGlzLmNsb3NlID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICBlKCk7CiAgICAgICAgfSwgbyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIG4gPSBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoLCByID0gbiA+IDgwMCA/IChuIC0gODAwKSAvIDIgOiAwLAogICAgICAgICAgICAgICAgbCA9ICQoJzxkaXYgY2xhc3M9ImRpYWxvZyIgc3R5bGU9IndpZHRoOiA4MDBweDsgdG9wOiAwcHg7IGJvdHRvbTogYXV0bzsgbGVmdDogJyArIHIgKyAncHg7IHJpZ2h0OiBhdXRvOyBkaXNwbGF5OiBoaWRkZW47IHZpc2liaWxpdHk6IHZpc2libGU7IHotaW5kZXg6IDUyOyI+PC9kaXY+JyksCiAgICAgICAgICAgICAgICBkID0gJCgnPGRpdiBjbGFzcz0iZGlhbG9nLWhlYWRlciI+PGgzPjxzcGFuIGNsYXNzPSJkaWFsb2ctdGl0bGUiIHN0eWxlPSJkaXNwbGF5OmlubGluZS1ibG9jazt3aWR0aDo3NDBweDt3aGl0ZS1zcGFjZTpub3dyYXA7b3ZlcmZsb3cteDpoaWRkZW47dGV4dC1vdmVyZmxvdzplbGxpcHNpcyI+PC9zcGFuPjwvaDM+PC9kaXY+JyksCiAgICAgICAgICAgICAgICBzID0gJCgnPGRpdiBjbGFzcz0iZGlhbG9nLWNvbnRyb2wiPjxzcGFuIGNsYXNzPSJkaWFsb2ctaWNvbiBkaWFsb2ctY2xvc2UiPsOXPC9zcGFuPjwvZGl2PicpLAogICAgICAgICAgICAgICAgYyA9ICQoJzxkaXYgY2xhc3M9ImRpYWxvZy1ib2R5IiBzdHlsZT0ibWF4LWhlaWdodDo0NTBweDtvdmVyZmxvdy15OmF1dG87cGFkZGluZzowIDIwcHg7Ij48L2Rpdj4nKSwKICAgICAgICAgICAgICAgIHAgPSAkKCc8ZGl2IGNsYXNzPSJkaWFsb2ctdGlwIiBzdHlsZT0icGFkZGluZy1sZWZ0OjIwcHg7YmFja2dyb3VuZC1jb2xvcjojZmZmO2JvcmRlci10b3A6IDFweCBzb2xpZCAjYzRkYmZlO2NvbG9yOiAjZGMzNzNjOyI+PHA+PC9wPjwvZGl2PicpOwogICAgICAgICAgICBsLmFwcGVuZChkLmFwcGVuZChzKSkuYXBwZW5kKGMpOwogICAgICAgICAgICB2YXIgdSA9ICQoJzxkaXYgY2xhc3M9ImRpYWxvZy1idXR0b24iIHN0eWxlPSJkaXNwbGF5Om5vbmUiPjwvZGl2PicpLAogICAgICAgICAgICAgICAgaCA9ICQoJzxkaXYgc3R5bGU9ImRpc3BsYXk6dGFibGU7bWFyZ2luOmF1dG8iPjwvZGl2PicpLAogICAgICAgICAgICAgICAgZiA9ICQoJzxidXR0b24gaWQ9ImRpYWxvZy1jb3B5LWJ1dHRvbiIgc3R5bGU9ImRpc3BsYXk6bm9uZTt3aWR0aDogMTAwcHg7IG1hcmdpbjogNXB4IDAgMTBweCAwOyBjdXJzb3I6IHBvaW50ZXI7IGJhY2tncm91bmQ6ICNjYzMyMzU7IGJvcmRlcjogbm9uZTsgaGVpZ2h0OiAzMHB4OyBjb2xvcjogI2ZmZjsgYm9yZGVyLXJhZGl1czogM3B4OyI+5aSN5Yi25YWo6YOo6ZO+5o6lPC9idXR0b24+JyksCiAgICAgICAgICAgICAgICB2ID0gJCgnPGJ1dHRvbiBpZD0iZGlhbG9nLWVkaXQtYnV0dG9uIiBzdHlsZT0iZGlzcGxheTpub25lIj7nvJbovpE8L2J1dHRvbj4nKSwKICAgICAgICAgICAgICAgIGcgPSAkKCc8YnV0dG9uIGlkPSJkaWFsb2ctZXhpdC1idXR0b24iIHN0eWxlPSJkaXNwbGF5Om5vbmUiPumAgOWHujwvYnV0dG9uPicpOwogICAgICAgICAgICByZXR1cm4gaC5hcHBlbmQoZikuYXBwZW5kKHYpLmFwcGVuZChnKSwgdS5hcHBlbmQoaCksIGwuYXBwZW5kKHUpLCBmLmNsaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHZhciBlID0gIiI7CiAgICAgICAgICAgICAgICAiYmF0Y2giID09IGEudHlwZSAmJiAkLmVhY2godCwgZnVuY3Rpb24gKGksIG4pIHsKICAgICAgICAgICAgICAgICAgICAiZXJyb3IiICE9IG4uZG93bmxvYWRsaW5rICYmIChpID09IHQubGVuZ3RoIC0gMSA/IGUgKz0gbi5kb3dubG9hZGxpbmsgOiBlICs9IG4uZG93bmxvYWRsaW5rICsgIlxyXG4iKTsKICAgICAgICAgICAgICAgIH0pLCAiYmF0Y2hBcmlhIiA9PSBhLnR5cGUgJiYgJC5lYWNoKHQsIGZ1bmN0aW9uIChuLCBhKSB7CiAgICAgICAgICAgICAgICAgICAgImVycm9yIiAhPSBhLmRvd25sb2FkbGluayAmJiAobiA9PSB0Lmxlbmd0aCAtIDEgPyBlICs9IGkoYS5kb3dubG9hZGxpbmssIGEuZmlsZW5hbWUsIGIpIDogZSArPSBpKGEuZG93bmxvYWRsaW5rLCBhLmZpbGVuYW1lLCBiKSArICJcclxuIik7CiAgICAgICAgICAgICAgICB9KSwgInJwYyIgPT0gYS50eXBlICYmICQuZWFjaCh0LCBmdW5jdGlvbiAoaSwgbikgewogICAgICAgICAgICAgICAgICAgICJlcnJvciIgIT0gbi5kb3dubG9hZGxpbmsgJiYgKGkgPT0gdC5sZW5ndGggLSAxID8gZSArPSBuLmRvd25sb2FkbGluayA6IGUgKz0gbi5kb3dubG9hZGxpbmsgKyAiXHJcbiIpOwogICAgICAgICAgICAgICAgfSksICJzaGFyZUxpbmsiID09IGEudHlwZSAmJiAkLmVhY2godCwgZnVuY3Rpb24gKGksIG4pIHsKICAgICAgICAgICAgICAgICAgICAiZXJyb3IiICE9IG4uZGxpbmsgJiYgKGkgPT0gdC5sZW5ndGggLSAxID8gZSArPSBuLmRsaW5rIDogZSArPSBuLmRsaW5rICsgIlxyXG4iKTsKICAgICAgICAgICAgICAgIH0pLCAic2hhcmVBcmlhTGluayIgPT0gYS50eXBlICYmICQuZWFjaCh0LCBmdW5jdGlvbiAobiwgYSkgewogICAgICAgICAgICAgICAgICAgICJlcnJvciIgIT0gYS5kbGluayAmJiAobiA9PSB0Lmxlbmd0aCAtIDEgPyBlICs9IGkoYS5kbGluaywgYS5zZXJ2ZXJfZmlsZW5hbWUpIDogZSArPSBpKGEuZGxpbmssIGEuc2VydmVyX2ZpbGVuYW1lKSArICJcclxuIik7CiAgICAgICAgICAgICAgICB9KSwgR01fc2V0Q2xpcGJvYXJkKGUsICJ0ZXh0IiksICIiICE9IGUgPyB4LmZpcmUoewogICAgICAgICAgICAgICAgICAgIGljb246ICJzdWNjZXNzIiwKICAgICAgICAgICAgICAgICAgICB0ZXh0OiAi5bey5bCG6ZO+5o6l5aSN5Yi25Yiw5Ymq6LS05p2/77yBIgogICAgICAgICAgICAgICAgfSkgOiB4LmZpcmUoe2ljb246ICJlcnJvciIsIHRleHQ6ICLlpI3liLblpLHotKXvvIzor7fmiYvliqjlpI3liLbvvIEifSk7CiAgICAgICAgICAgIH0pLCB2LmNsaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHZhciBlID0gJCgiZGl2LmRpYWxvZy1ib2R5IHRleHRhcmVhW25hbWU9ZGlhbG9nLXRleHRhcmVhXSIsIG8pOwogICAgICAgICAgICAgICAgJCgiZGl2LmRpYWxvZy1ib2R5IGRpdiIsIG8pLmhpZGUoKSwgZi5oaWRlKCksIHYuaGlkZSgpLCBlLnNob3coKSwgJGRpYWxvZ19yYWRpb19kaXYuc2hvdygpLCBnLnNob3coKTsKICAgICAgICAgICAgfSksIGcuY2xpY2soZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgdmFyIGUgPSAkKCJkaXYuZGlhbG9nLWJvZHkgdGV4dGFyZWFbbmFtZT1kaWFsb2ctdGV4dGFyZWFdIiwgbyksIHQgPSAkKCJkaXYuZGlhbG9nLWJvZHkgZGl2Iiwgbyk7CiAgICAgICAgICAgICAgICBlLmhpZGUoKSwgJGRpYWxvZ19yYWRpb19kaXYuaGlkZSgpLCB0LnNob3coKSwgZy5oaWRlKCksIGYuc2hvdygpLCB2LnNob3coKTsKICAgICAgICAgICAgfSksIGwuYXBwZW5kKHApLCAkKCJib2R5IikuYXBwZW5kKGwpLCBzLmNsaWNrKGUpLCBsOwogICAgICAgIH0oKSwgciA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIGUgPSAkKCc8ZGl2IGNsYXNzPSJkaWFsb2ctc2hhZG93IiBzdHlsZT0icG9zaXRpb246IGZpeGVkOyBsZWZ0OiAwcHg7IHRvcDogMHB4OyB6LWluZGV4OiA1MDsgYmFja2dyb3VuZDogcmdiKDAsIDAsIDApIG5vbmUgcmVwZWF0IHNjcm9sbCAwJSAwJTsgb3BhY2l0eTogMC41OyB3aWR0aDogMTAwJTsgaGVpZ2h0OiAxMDAlOyBkaXNwbGF5OiBub25lOyI+PC9kaXY+Jyk7CiAgICAgICAgICAgIHJldHVybiAkKCJib2R5IikuYXBwZW5kKGUpLCBlOwogICAgICAgIH0oKTsKICAgIH0KCiAgICBmdW5jdGlvbiBzKGUsIHQpIHsKICAgICAgICBmdW5jdGlvbiBpKCkgewogICAgICAgICAgICAkKCIjZGlhbG9nLWltZyIsIG4pLmF0dHIoInNyYyIsICIiKSwgJCgiI2RpYWxvZy1lcnIiKS50ZXh0KCIiKSwgbi5oaWRlKCksIGEuaGlkZSgpOwogICAgICAgIH0KCiAgICAgICAgdmFyIG4gPSB2b2lkIDAsIGEgPSB2b2lkIDA7CiAgICAgICAgdGhpcy5vcGVuID0gZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgZSAmJiAkKCIjZGlhbG9nLWltZyIpLmF0dHIoInNyYyIsIGUuaW1nKSwgbi5zaG93KCksIGEuc2hvdygpOwogICAgICAgIH0sIHRoaXMuY2xvc2UgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGkoKTsKICAgICAgICB9LCBuID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgbiA9IGRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGgsIGEgPSBuID4gNTIwID8gKG4gLSA1MjApIC8gMiA6IDAsCiAgICAgICAgICAgICAgICBvID0gJCgnPGRpdiBjbGFzcz0iZGlhbG9nIiBpZD0iZGlhbG9nLXZjb2RlIiBzdHlsZT0id2lkdGg6NTIwcHg7dG9wOjBweDtib3R0b206YXV0bztsZWZ0OicgKyBhICsgJ3B4O3JpZ2h0OmF1dG87ZGlzcGxheTpub25lO3Zpc2liaWxpdHk6dmlzaWJsZTt6LWluZGV4OjUyIj48L2Rpdj4nKSwKICAgICAgICAgICAgICAgIHIgPSAkKCc8ZGl2IGNsYXNzPSJkaWFsb2ctaGVhZGVyIj48aDM+PHNwYW4gY2xhc3M9ImRpYWxvZy1oZWFkZXItdGl0bGUiPjxlbSBjbGFzcz0ic2VsZWN0LXRleHQiPuaPkOekujwvZW0+PC9zcGFuPjwvaDM+PC9kaXY+JyksCiAgICAgICAgICAgICAgICBsID0gJCgnPGRpdiBjbGFzcz0iZGlhbG9nLWNvbnRyb2wiPjxzcGFuIGNsYXNzPSJkaWFsb2ctaWNvbiBkaWFsb2ctY2xvc2UgaWNvbiBpY29uLWNsb3NlIj48c3BhbiBjbGFzcz0ic2ljb24iPng8L3NwYW4+PC9zcGFuPjwvZGl2PicpLAogICAgICAgICAgICAgICAgZCA9ICQoJzxkaXYgY2xhc3M9ImRpYWxvZy1ib2R5Ij48L2Rpdj4nKSwgcyA9ICQoJzxkaXYgc3R5bGU9InRleHQtYWxpZ246Y2VudGVyO3BhZGRpbmc6MjJweCI+PC9kaXY+JyksCiAgICAgICAgICAgICAgICBjID0gJCgnPGRpdiBjbGFzcz0iZG93bmxvYWQtdmVyaWZ5IiBzdHlsZT0ibWFyZ2luLXRvcDoxMHB4O3BhZGRpbmc6MCAyOHB4O3RleHQtYWxpZ246bGVmdDtmb250LXNpemU6MTJweDsiPjwvZGl2PicpLAogICAgICAgICAgICAgICAgcCA9ICQoJzxkaXYgY2xhc3M9InZlcmlmeS1ib2R5Ij7or7fovpPlhaXpqozor4HnoIHvvJo8L2Rpdj4nKSwKICAgICAgICAgICAgICAgIHUgPSAkKCc8aW5wdXQgaWQ9ImRpYWxvZy1pbnB1dCIgdHlwZT0idGV4dCIgc3R5bGU9InBhZGRpbmc6M3B4O3dpZHRoOjg1cHg7aGVpZ2h0OjIzcHg7Ym9yZGVyOjFweCBzb2xpZCAjYzZjNmM2O2JhY2tncm91bmQtY29sb3I6d2hpdGU7dmVydGljYWwtYWxpZ246bWlkZGxlOyIgY2xhc3M9ImlucHV0LWNvZGUiIG1heGxlbmd0aD0iNCI+JyksCiAgICAgICAgICAgICAgICBoID0gJCgnPGltZyBpZD0iZGlhbG9nLWltZyIgY2xhc3M9ImltZy1jb2RlIiBzdHlsZT0ibWFyZ2luLWxlZnQ6MTBweDt2ZXJ0aWNhbC1hbGlnbjptaWRkbGU7IiBhbHQ9IueCueWHu+aNouS4gOW8oCIgc3JjPSIiIHdpZHRoPSIxMDAiIGhlaWdodD0iMzAiPicpLAogICAgICAgICAgICAgICAgZiA9ICQoJzxhIGhyZWY9ImphdmFzY3JpcHQ6OyIgc3R5bGU9InRleHQtZGVjb3JhdGlvbjp1bmRlcmxpbmU7IiBjbGFzcz0idW5kZXJsaW5lIj7mjaLkuIDlvKA8L2E+JyksCiAgICAgICAgICAgICAgICB2ID0gJCgnPGRpdiBpZD0iZGlhbG9nLWVyciIgc3R5bGU9InBhZGRpbmctbGVmdDo4NHB4O2hlaWdodDoxOHB4O2NvbG9yOiNkODAwMDAiIGNsYXNzPSJ2ZXJpZnktZXJyb3IiPjwvZGl2PicpLAogICAgICAgICAgICAgICAgZyA9ICQoJzxkaXYgY2xhc3M9ImRpYWxvZy1mb290ZXIgZy1jbGVhcmZpeCI+PC9kaXY+JyksCiAgICAgICAgICAgICAgICB3ID0gJCgnPGEgY2xhc3M9ImctYnV0dG9uIGctYnV0dG9uLWJsdWUiIGRhdGEtYnV0dG9uLWlkPSIiIGRhdGEtYnV0dG9uLWluZGV4IGhyZWY9ImphdmFzY3JpcHQ6OyIgc3R5bGU9InBhZGRpbmctbGVmdDozNnB4Ij48c3BhbiBjbGFzcz0iZy1idXR0b24tcmlnaHQiIHN0eWxlPSJwYWRkaW5nLXJpZ2h0OjM2cHg7Ij48c3BhbiBjbGFzcz0idGV4dCIgc3R5bGU9IndpZHRoOmF1dG87Ij7noa7lrpo8L3NwYW4+PC9zcGFuPjwvYT4nKSwKICAgICAgICAgICAgICAgIG0gPSAkKCc8YSBjbGFzcz0iZy1idXR0b24iIGRhdGEtYnV0dG9uLWlkPSIiIGRhdGEtYnV0dG9uLWluZGV4IGhyZWY9ImphdmFzY3JpcHQ6OyIgc3R5bGU9InBhZGRpbmctbGVmdDogMzZweDsiPjxzcGFuIGNsYXNzPSJnLWJ1dHRvbi1yaWdodCIgc3R5bGU9InBhZGRpbmctcmlnaHQ6IDM2cHg7Ij48c3BhbiBjbGFzcz0idGV4dCIgc3R5bGU9IndpZHRoOiBhdXRvOyI+5Y+W5raIPC9zcGFuPjwvc3Bhbj48L2E+Jyk7CiAgICAgICAgICAgIHJldHVybiByLmFwcGVuZChsKSwgcC5hcHBlbmQodSkuYXBwZW5kKGgpLmFwcGVuZChmKSwgYy5hcHBlbmQocCkuYXBwZW5kKHYpLCBzLmFwcGVuZChjKSwgZC5hcHBlbmQocyksIGcuYXBwZW5kKHcpLmFwcGVuZChtKSwgby5hcHBlbmQocikuYXBwZW5kKGQpLmFwcGVuZChnKSwgJCgiYm9keSIpLmFwcGVuZChvKSwgbC5jbGljayhpKSwgaC5jbGljayhlKSwgZi5jbGljayhlKSwgdS5rZXlwcmVzcyhmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgMTMgPT0gZS53aGljaCAmJiB0KCk7CiAgICAgICAgICAgIH0pLCB3LmNsaWNrKHQpLCBtLmNsaWNrKGkpLCB1LmNsaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICQoIiNkaWFsb2ctZXJyIikudGV4dCgiIik7CiAgICAgICAgICAgIH0pLCBvOwogICAgICAgIH0oKSwgYSA9ICQoImRpdi5kaWFsb2ctc2hhZG93Iik7CiAgICB9CgogICAgZnVuY3Rpb24gYygpIHsKICAgICAgICBmdW5jdGlvbiB0KCkgewogICAgICAgICAgICByZXR1cm4gcmVxdWlyZSgiZGlzay1zeXN0ZW06d2lkZ2V0L3BhZ2VNb2R1bGUvbGlzdC9saXN0SW5pdC5qcyIpLmdldENoZWNrZWRJdGVtcygpOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gaSgpIHsKICAgICAgICAgICAgTiA9IEMoKSwgVSA9IE8udGltZXN0YW1wLCBCID0gTy5NWUJEU1RPS0VOLCB6ID0gbCgpOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gbigpIHsKICAgICAgICAgICAgbygpLCByKCk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBvKCkgewogICAgICAgICAgICAkKGRvY3VtZW50KS5vbigiY2xpY2siLCAiLmV4ZS1kb3dubG9hZCIsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICBlLnRhcmdldC5pbm5lclRleHQgJiYgRShlLnRhcmdldC5pbm5lclRleHQpOwogICAgICAgICAgICB9KSwgJChkb2N1bWVudCkub24oImNsaWNrIiwgIi5hcmlhLXJwYyIsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICB2YXIgdCA9IChlLnRhcmdldC5kYXRhc2V0LmxpbmssIGUudGFyZ2V0LmRhdGFzZXQuZmlsZW5hbWUpLCBpID0ge307CiAgICAgICAgICAgICAgICBfKCkgfHwgKGkgPSB7IlVzZXItQWdlbnQiOiBtfSksIEdNX3htbGh0dHBSZXF1ZXN0KHsKICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICJIRUFEIiwKICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiBpLAogICAgICAgICAgICAgICAgICAgIHVybDogZS50YXJnZXQuZGF0YXNldC5saW5rLAogICAgICAgICAgICAgICAgICAgIG9ubG9hZDogZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBlLmZpbmFsVXJsOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBrLmRvbWFpbiArICI6IiArIGsucG9ydCArICIvanNvbnJwYyIsIGEgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IChuZXcgRGF0ZSkuZ2V0VGltZSgpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpzb25ycGM6ICIyLjAiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogImFyaWEyLmFkZFVyaSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiBbInRva2VuOiIgKyBrLnRva2VuLCBbaV0sIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlyOiBrLmRpciwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0OiB0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXI6IF8oKSA/IFsiVXNlci1BZ2VudDoiICsgYl0gOiBbIlVzZXItQWdlbnQ6IiArIG1dCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBHTV94bWxodHRwUmVxdWVzdCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAiUE9TVCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogeyJVc2VyLUFnZW50IjogbX0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBuLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlVHlwZTogImpzb24iLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQ6IDNlMywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBKU09OLnN0cmluZ2lmeShhKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmxvYWQ6IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucmVzcG9uc2UucmVzdWx0ID8geC5maXJlKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246ICJzdWNjZXNzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAi5Lu75Yqh5bey5Y+R6YCB6IezUlBD5LiL6L295ZmoIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSA6IHguZmlyZSh7aWNvbjogImVycm9yIiwgdGl0bGU6IGUucmVzcG9uc2UubWVzc2FnZX0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb250aW1lb3V0OiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHguZmlyZSh7aWNvbjogImVycm9yIiwgdGl0bGU6ICLml6Dms5Xov57mjqXliLBSUEPmnI3liqHvvIzor7fmo4Dmn6VSUEPphY3nva4ifSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiByKCkgewogICAgICAgICAgICAkKGRvY3VtZW50KS5vbigiY2xpY2siLCAnW3RpdGxlPSLliIbkuqsiXScsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHZhciBlID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgIDAgPT09ICQoIiNzaGFyZS1tZXRob2QtcHVibGljIikubGVuZ3RoID8gJCgiLnNoYXJlLW1ldGhvZC1saW5lIikucGFyZW50KCkuYXBwZW5kKCc8ZGl2IGNsYXNzPSJzaGFyZS1tZXRob2QtbGluZSI+PGlucHV0IHR5cGU9InJhZGlvIiBpZD0ic2hhcmUtbWV0aG9kLXB1YmxpYyIgbmFtZT0ic2hhcmUtbWV0aG9kIiB2YWx1ZT0icHVibGljIiBjaGVja2VkPjxzcGFuIGNsYXNzPSJpY29uIHJhZGlvLWljb24gaWNvbi1yYWRpby1ub24iPjwvc3Bhbj48bGFiZWwgZm9yPSJzaGFyZS1tZXRob2QtcHVibGljIj48Yj7lhazlvIDliIbkuqs8L2I+PHNwYW4+5Lu75L2V5Lq66K6/6Zeu6ZO+5o6l5Y2z5Y+v5p+l55yL77yM5LiL6L2977yBPC9zcGFuPjwvZGl2PicpIDogKGNsZWFySW50ZXJ2YWwoZSksICQoZG9jdW1lbnQpLm9mZigiY2xpY2siLCAnW3RpdGxlPSLliIbkuqsiXScpKTsKICAgICAgICAgICAgICAgIH0sIDEwMCk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gcygpIHsKICAgICAgICAgICAgJCgiZGl2LiIgKyBmWyJiYXItc2VhcmNoIl0pLmNzcygid2lkdGgiLCAiMTglIik7CiAgICAgICAgICAgIHZhciBlID0gJCgnPHNwYW4gY2xhc3M9ImctZHJvcGRvd24tYnV0dG9uIj48L3NwYW4+JyksCiAgICAgICAgICAgICAgICB0ID0gJCgnPGEgY2xhc3M9ImctYnV0dG9uIGctYnV0dG9uLWJsdWUiIGhyZWY9ImphdmFzY3JpcHQ6OyI+PHNwYW4gY2xhc3M9ImctYnV0dG9uLXJpZ2h0Ij48ZW0gY2xhc3M9Imljb24gaWNvbi1waWNwcmUtZG93bmxvYWQiIHRpdGxlPSLnmb7luqbnvZHnm5jkuIvovb3liqnmiYsiPjwvZW0+PHNwYW4gY2xhc3M9InRleHQiIHN0eWxlPSJ3aWR0aDogNjBweDsiPuS4i+i9veWKqeaJizwvc3Bhbj48L3NwYW4+PC9hPicpLAogICAgICAgICAgICAgICAgaSA9ICQoJzxzcGFuIGNsYXNzPSJtZW51IiBzdHlsZT0id2lkdGg6MTE0cHgiPjwvc3Bhbj4nKSwKICAgICAgICAgICAgICAgIG4gPSAkKCc8c3BhbiBjbGFzcz0iZy1idXR0b24tbWVudSIgc3R5bGU9ImRpc3BsYXk6YmxvY2siPjwvc3Bhbj4nKSwKICAgICAgICAgICAgICAgIGEgPSAkKCc8c3BhbiBjbGFzcz0iZy1kcm9wZG93bi1idXR0b24gZy1kcm9wZG93bi1idXR0b24tc2Vjb25kIiBtZW51bGV2ZWw9IjIiPjwvc3Bhbj4nKSwKICAgICAgICAgICAgICAgIG8gPSAkKCc8YSBjbGFzcz0iZy1idXR0b24iIGhyZWY9ImphdmFzY3JpcHQ6OyI+PHNwYW4gY2xhc3M9ImctYnV0dG9uLXJpZ2h0Ij48c3BhbiBjbGFzcz0idGV4dCIgc3R5bGU9IndpZHRoOmF1dG8iPuebtOmTvuS4i+i9vTwvc3Bhbj48L3NwYW4+PC9hPicpLAogICAgICAgICAgICAgICAgciA9ICQoJzxzcGFuIGNsYXNzPSJtZW51IiBzdHlsZT0id2lkdGg6MTIwcHg7bGVmdDo3OXB4Ij48L3NwYW4+JyksCiAgICAgICAgICAgICAgICBsID0gJCgnPGEgaWQ9ImJhdGNoaHR0cGxpbmstZGlyZWN0IiBjbGFzcz0iZy1idXR0b24tbWVudSIgaHJlZj0iamF2YXNjcmlwdDo7Ij7mmL7npLrpk77mjqU8L2E+Jyk7CiAgICAgICAgICAgIHIuYXBwZW5kKGwpLCBuLmFwcGVuZChhLmFwcGVuZChvKS5hcHBlbmQocikpLCBuLmhvdmVyKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIGEudG9nZ2xlQ2xhc3MoImJ1dHRvbi1vcGVuIik7CiAgICAgICAgICAgIH0pLCBsLmNsaWNrKEEpOwogICAgICAgICAgICB2YXIgZCA9ICQoJzxzcGFuIGNsYXNzPSJnLWJ1dHRvbi1tZW51IiBzdHlsZT0iZGlzcGxheTpibG9jayI+PC9zcGFuPicpLAogICAgICAgICAgICAgICAgcyA9ICQoJzxzcGFuIGNsYXNzPSJnLWRyb3Bkb3duLWJ1dHRvbiBnLWRyb3Bkb3duLWJ1dHRvbi1zZWNvbmQiIG1lbnVsZXZlbD0iMiI+PC9zcGFuPicpLAogICAgICAgICAgICAgICAgdiA9ICQoJzxhIGNsYXNzPSJnLWJ1dHRvbiIgaHJlZj0iamF2YXNjcmlwdDo7Ij48c3BhbiBjbGFzcz0iZy1idXR0b24tcmlnaHQiPjxzcGFuIGNsYXNzPSJ0ZXh0IiBzdHlsZT0id2lkdGg6YXV0byI+QXJpYeS4i+i9vTwvc3Bhbj48L3NwYW4+PC9hPicpLAogICAgICAgICAgICAgICAgZyA9ICQoJzxzcGFuIGNsYXNzPSJtZW51IiBzdHlsZT0id2lkdGg6MTIwcHg7bGVmdDo3OXB4Ij48L3NwYW4+JyksCiAgICAgICAgICAgICAgICB3ID0gJCgnPGEgaWQ9ImJhdGNoaHR0cGxpbmstYXJpYSIgY2xhc3M9ImctYnV0dG9uLW1lbnUiIGhyZWY9ImphdmFzY3JpcHQ6OyI+5pi+56S66ZO+5o6lPC9hPicpOwogICAgICAgICAgICBnLmFwcGVuZCh3KSwgZC5hcHBlbmQocy5hcHBlbmQodikuYXBwZW5kKGcpKSwgZC5ob3ZlcihmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBzLnRvZ2dsZUNsYXNzKCJidXR0b24tb3BlbiIpOwogICAgICAgICAgICB9KSwgdy5jbGljayhBKTsKICAgICAgICAgICAgdmFyIG0gPSAkKCc8c3BhbiBjbGFzcz0iZy1idXR0b24tbWVudSIgc3R5bGU9ImRpc3BsYXk6YmxvY2siPjwvc3Bhbj4nKSwKICAgICAgICAgICAgICAgIGIgPSAkKCc8c3BhbiBjbGFzcz0iZy1kcm9wZG93bi1idXR0b24gZy1kcm9wZG93bi1idXR0b24tc2Vjb25kIiBtZW51bGV2ZWw9IjIiPjwvc3Bhbj4nKSwKICAgICAgICAgICAgICAgIHkgPSAkKCc8YSBjbGFzcz0iZy1idXR0b24iIGhyZWY9ImphdmFzY3JpcHQ6OyI+PHNwYW4gY2xhc3M9ImctYnV0dG9uLXJpZ2h0Ij48c3BhbiBjbGFzcz0idGV4dCIgc3R5bGU9IndpZHRoOmF1dG8iPuWvvOWHuuWIsFJQQzwvc3Bhbj48L3NwYW4+PC9hPicpLAogICAgICAgICAgICAgICAgeCA9ICQoJzxzcGFuIGNsYXNzPSJtZW51IiBzdHlsZT0id2lkdGg6MTIwcHg7bGVmdDo3OXB4Ij48L3NwYW4+JyksCiAgICAgICAgICAgICAgICBrID0gJCgnPGEgaWQ9ImJhdGNoaHR0cGxpbmstcnBjIiBjbGFzcz0iZy1idXR0b24tbWVudSIgaHJlZj0iamF2YXNjcmlwdDo7Ij7mmL7npLrpk77mjqU8L2E+JyksCiAgICAgICAgICAgICAgICBfID0gJCgnPGEgY2xhc3M9ImctYnV0dG9uLW1lbnUiIGhyZWY9ImphdmFzY3JpcHQ6OyI+UlBD6YWN572uPC9hPicpOwogICAgICAgICAgICB4LmFwcGVuZChrKS5hcHBlbmQoXyksIG0uYXBwZW5kKGIuYXBwZW5kKHkpLmFwcGVuZCh4KSksIG0uaG92ZXIoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgYi50b2dnbGVDbGFzcygiYnV0dG9uLW9wZW4iKTsKICAgICAgICAgICAgfSksIGsuY2xpY2soQSksIF8uY2xpY2soYyk7CiAgICAgICAgICAgIHZhciBHID0gJCgnPHNwYW4gY2xhc3M9ImctYnV0dG9uLW1lbnUiIHN0eWxlPSJkaXNwbGF5OmJsb2NrIj48L3NwYW4+JyksCiAgICAgICAgICAgICAgICBNID0gJCgnPHNwYW4gY2xhc3M9ImctZHJvcGRvd24tYnV0dG9uIGctZHJvcGRvd24tYnV0dG9uLXNlY29uZCIgbWVudWxldmVsPSIyIj48L3NwYW4+JyksCiAgICAgICAgICAgICAgICBDID0gJCgnPGEgY2xhc3M9ImctYnV0dG9uIiBocmVmPSJqYXZhc2NyaXB0OjsiPjxzcGFuIGNsYXNzPSJnLWJ1dHRvbi1yaWdodCI+PHNwYW4gY2xhc3M9InRleHQiIHN0eWxlPSJ3aWR0aDphdXRvIj5BUEnkuIvovb08L3NwYW4+PC9zcGFuPjwvYT4nKSwKICAgICAgICAgICAgICAgIGogPSAkKCc8c3BhbiBjbGFzcz0ibWVudSIgc3R5bGU9IndpZHRoOjEyMHB4O2xlZnQ6NzdweCI+PC9zcGFuPicpLAogICAgICAgICAgICAgICAgRCA9ICQoJzxhIGlkPSJkb3dubG9hZC1hcGkiIGNsYXNzPSJnLWJ1dHRvbi1tZW51IiBocmVmPSJqYXZhc2NyaXB0OjsiPuebtOaOpeS4i+i9vTwvYT4nKSwKICAgICAgICAgICAgICAgIEkgPSAkKCc8YSBpZD0iYmF0Y2hodHRwbGluay1hcGkiIGNsYXNzPSJnLWJ1dHRvbi1tZW51IiBocmVmPSJqYXZhc2NyaXB0OjsiPuaYvuekuumTvuaOpTwvYT4nKSwKICAgICAgICAgICAgICAgIFYgPSAkKCc8YSBpZD0iYXBwaWQtc2V0dGluZyIgY2xhc3M9ImctYnV0dG9uLW1lbnUiIGhyZWY9ImphdmFzY3JpcHQ6OyI+56We56eY5Luj56CBPC9hPicpLAogICAgICAgICAgICAgICAgRSA9ICQoJzxhIGlkPSJkZWZhdWx0LXNldHRpbmciIGNsYXNzPSJnLWJ1dHRvbi1tZW51IiBocmVmPSJqYXZhc2NyaXB0OjsiIHN0eWxlPSJjb2xvcjogIzk5OTsiPuaBouWkjem7mOiupDwvYT4nKTsKICAgICAgICAgICAgai5hcHBlbmQoRCkuYXBwZW5kKEkpLmFwcGVuZChWKS5hcHBlbmQoRSk7CiAgICAgICAgICAgIHZhciBSID0gJCgnPHNwYW4gY2xhc3M9ImctYnV0dG9uLW1lbnUiIHN0eWxlPSJkaXNwbGF5OmJsb2NrO2N1cnNvcjogcG9pbnRlciI+5YiG5Lqr6YCJ5Lit5paH5Lu2PC9zcGFuPicpLAogICAgICAgICAgICAgICAgTyA9ICQoJzxhIGRhdGEtbWVudS1pZD0iYi1tZW51MjA5IiBzdHlsZT0iY29sb3I6ICNlODU2NTM7Zm9udC13ZWlnaHQ6IDcwMDsiIGNsYXNzPSJnLWJ1dHRvbi1tZW51IiBocmVmPSJqYXZhc2NyaXB0OjsiPlZlciAnICsgaCArICI8L2E+Iik7CiAgICAgICAgICAgIEcuYXBwZW5kKE0uYXBwZW5kKEMpLmFwcGVuZChqKSksIEcuaG92ZXIoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgTS50b2dnbGVDbGFzcygiYnV0dG9uLW9wZW4iKTsKICAgICAgICAgICAgfSksIEQuY2xpY2soVCksIEkuY2xpY2soQSksIFYuY2xpY2socCksIEUuY2xpY2sodSksIE8uY2xpY2soUyksIFIuY2xpY2soUCksIGkuYXBwZW5kKEcpLmFwcGVuZChkKS5hcHBlbmQobSkuYXBwZW5kKFIpLCBlLmFwcGVuZCh0KS5hcHBlbmQoaSksIGUuaG92ZXIoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgZS50b2dnbGVDbGFzcygiYnV0dG9uLW9wZW4iKTsKICAgICAgICAgICAgfSksICQoIi4iICsgZlsibGlzdC10b29scyJdKS5hcHBlbmQoZSksICQoIi4iICsgZlsibGlzdC10b29scyJdKS5jc3MoImhlaWdodCIsICI0MHB4Iik7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBjKCkgewogICAgICAgICAgICB2YXIgZSA9ICIiOwogICAgICAgICAgICBlICs9ICc8ZGl2IHN0eWxlPSJkaXNwbGF5OiBmbGV4O2FsaWduLWl0ZW1zOiBjZW50ZXI7anVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOyI+PGxhYmVsIGZvcj0icnBjRG9tYWluIiBzdHlsZT0ibWFyZ2luLXJpZ2h0OiA1cHg7ZmxleDogMCAwIDkwcHg7Ij7kuLvmnLrvvJo8L2xhYmVsPjxpbnB1dCB0eXBlPSJ0ZXh0IiBpZD0icnBjRG9tYWluIiB2YWx1ZT0iJyArIGsuZG9tYWluICsgJyIgY2xhc3M9InN3YWwyLWlucHV0IiBwbGFjZWhvbGRlcj0iaHR0cDovL2xvY2FsaG9zdCI+PC9kaXY+JywgZSArPSAnPGRpdiBzdHlsZT0iZGlzcGxheTogZmxleDthbGlnbi1pdGVtczogY2VudGVyO2p1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjsiPjxsYWJlbCBmb3I9InJwY1BvcnQiIHN0eWxlPSJtYXJnaW4tcmlnaHQ6IDVweDtmbGV4OiAwIDAgOTBweDsiPuerr+WPo++8mjwvbGFiZWw+PGlucHV0IHR5cGU9InRleHQiIGlkPSJycGNQb3J0IiB2YWx1ZT0iJyArIGsucG9ydCArICciIGNsYXNzPSJzd2FsMi1pbnB1dCIgcGxhY2Vob2xkZXI9IjY4MDAiPjwvZGl2PicsIGUgKz0gJzxkaXYgc3R5bGU9ImRpc3BsYXk6IGZsZXg7YWxpZ24taXRlbXM6IGNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47Ij48bGFiZWwgZm9yPSJycGNUb2tlbiIgc3R5bGU9Im1hcmdpbi1yaWdodDogNXB4O2ZsZXg6IDAgMCA5MHB4OyI+5a+G6ZKl77yaPC9sYWJlbD48aW5wdXQgdHlwZT0idGV4dCIgaWQ9InJwY1Rva2VuIiB2YWx1ZT0iJyArIGsudG9rZW4gKyAnIiBjbGFzcz0ic3dhbDItaW5wdXQiIHBsYWNlaG9sZGVyPSLmsqHmnInnlZnnqboiPjwvZGl2PicsIGUgKz0gJzxkaXYgc3R5bGU9ImRpc3BsYXk6IGZsZXg7YWxpZ24taXRlbXM6IGNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47Ij48bGFiZWwgZm9yPSJycGNEaXIiIHN0eWxlPSJtYXJnaW4tcmlnaHQ6IDVweDtmbGV4OiAwIDAgOTBweDsiPuS4i+i9vei3r+W+hO+8mjwvbGFiZWw+PGlucHV0IHR5cGU9InRleHQiIGlkPSJycGNEaXIiIHZhbHVlPSInICsgay5kaXIgKyAnIiBjbGFzcz0ic3dhbDItaW5wdXQiIHBsYWNlaG9sZGVyPSLpu5jorqTkuLpEOiI+PC9kaXY+JywgZSA9ICI8ZGl2PiIgKyBlICsgIjwvZGl2PiI7CiAgICAgICAgICAgIHZhciB0ID0gJChlKTsKICAgICAgICAgICAgU3dhbC5maXJlKHsKICAgICAgICAgICAgICAgIHRpdGxlOiAiUlBD6YWN572uIiwKICAgICAgICAgICAgICAgIGFsbG93T3V0c2lkZUNsaWNrOiAhMSwKICAgICAgICAgICAgICAgIGh0bWw6IHRbMF0sCiAgICAgICAgICAgICAgICBzaG93Q2FuY2VsQnV0dG9uOiAhMCwKICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiAi5L+d5a2YIiwKICAgICAgICAgICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6ICLlj5bmtogiCiAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgIGUudmFsdWUgJiYgKEdNX3NldFZhbHVlKCJycGNEb21haW4iLCAkKCIjcnBjRG9tYWluIikudmFsKCkgPyAkKCIjcnBjRG9tYWluIikudmFsKCkgOiBrLmRvbWFpbiksIEdNX3NldFZhbHVlKCJycGNQb3J0IiwgJCgiI3JwY1BvcnQiKS52YWwoKSA/ICQoIiNycGNQb3J0IikudmFsKCkgOiBrLnBvcnQpLCBHTV9zZXRWYWx1ZSgicnBjVG9rZW4iLCAkKCIjcnBjVG9rZW4iKS52YWwoKSksIEdNX3NldFZhbHVlKCJycGNEaXIiLCAkKCIjcnBjRGlyIikudmFsKCkgPyAkKCIjcnBjRGlyIikudmFsKCkgOiBrLmRpciksIGhpc3RvcnkuZ28oMCkpOwogICAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHAoKSB7CiAgICAgICAgICAgIFN3YWwuZmlyZSh7CiAgICAgICAgICAgICAgICB0aXRsZTogIuivt+i+k+WFpeelnuenmOS7o+eggSIsCiAgICAgICAgICAgICAgICBpbnB1dDogInRleHQiLAogICAgICAgICAgICAgICAgaW5wdXRWYWx1ZTogdywKICAgICAgICAgICAgICAgIHNob3dDYW5jZWxCdXR0b246ICEwLAogICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICLnoa7lrpoiLAogICAgICAgICAgICAgICAgY2FuY2VsQnV0dG9uVGV4dDogIuWPlua2iCIsCiAgICAgICAgICAgICAgICBpbnB1dFZhbGlkYXRvcjogZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoNiAhPSBlLmxlbmd0aCkgcmV0dXJuICLor7fovpPlhaXmraPnoa7nmoTnpZ7np5jku6PnoIEiOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICBHTV9zZXRWYWx1ZSgic2VjcmV0Q29kZU5ldyIsIGUudmFsdWUpLCB4LmZpcmUoewogICAgICAgICAgICAgICAgICAgIGljb246ICJzdWNjZXNzIiwKICAgICAgICAgICAgICAgICAgICB0ZXh0OiAi56We56eY5Luj56CB5omn6KGM5oiQ5Yqf77yMM3PlkI7lsIboh6rliqjliLfmlrDvvIEiCiAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICBoaXN0b3J5LmdvKDApOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gdSgpIHsKICAgICAgICAgICAgR01fc2V0VmFsdWUoInNlY3JldENvZGVOZXciLCBnKSwgeC5maXJlKHt0ZXh0OiAi5oGi5aSN6buY6K6k5oiQ5Yqf77yMM3PlkI7lsIboh6rliqjliLfmlrAiLCBpY29uOiAic3VjY2VzcyJ9KS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIGhpc3RvcnkuZ28oMCk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gXygpIHsKICAgICAgICAgICAgcmV0dXJuIDEgPT09IE8uSVNTVklQOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gUygpIHsKICAgICAgICAgICAgR01fb3BlbkluVGFiKCJodHRwczovL3d3dy5iYWlkdXl1bi53aWtpIiwge2FjdGl2ZTogITB9KTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIFQoaSkgewogICAgICAgICAgICBIID0gdCgpLCBlKCLpgInkuK3mlofku7bliJfooajvvJoiLCBIKTsKICAgICAgICAgICAgdmFyIG4gPSBpLnRhcmdldC5pZCwgYSA9IHZvaWQgMDsKICAgICAgICAgICAgaWYgKCJkb3dubG9hZC1kaXJlY3QiID09IG4pIHsKICAgICAgICAgICAgICAgIHZhciBvID0gdm9pZCAwOwogICAgICAgICAgICAgICAgaWYgKDAgPT09IEgubGVuZ3RoKSByZXR1cm4gdm9pZCB4LmZpcmUoe2ljb246ICJlcnJvciIsIHRleHQ6IHYudW5zZWxlY3RlZH0pOwogICAgICAgICAgICAgICAgMSA9PSBILmxlbmd0aCAmJiAobyA9IDEgPT09IEhbMF0uaXNkaXIgPyAiYmF0Y2giIDogImRsaW5rIiksIEgubGVuZ3RoID4gMSAmJiAobyA9ICJiYXRjaCIpLCBMID0gaihIKTsKICAgICAgICAgICAgICAgIHZhciByID0gSShvKTsKICAgICAgICAgICAgICAgIGlmICgwICE9PSByLmVycm5vKSByZXR1cm4gLTEgPT0gci5lcnJubyA/IHZvaWQgeC5maXJlKHsKICAgICAgICAgICAgICAgICAgICBpY29uOiAiZXJyb3IiLAogICAgICAgICAgICAgICAgICAgIHRleHQ6IHYuZGVsZXRlZAogICAgICAgICAgICAgICAgfSkgOiAxMTIgPT0gci5lcnJubyA/IHZvaWQgeC5maXJlKHtpY29uOiAiZXJyb3IiLCB0ZXh0OiB2LnRpbWVvdXR9KSA6IHZvaWQgeC5maXJlKHsKICAgICAgICAgICAgICAgICAgICBpY29uOiAiZXJyb3IiLAogICAgICAgICAgICAgICAgICAgIHRleHQ6IHYuZmFpbAogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBpZiAoImRsaW5rIiA9PSBvKSBhID0gci5kbGlua1swXS5kbGluazsgZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCJiYXRjaCIgIT0gbykgcmV0dXJuIHZvaWQgeC5maXJlKHtpY29uOiAiZXJyb3IiLCB0ZXh0OiB2LmZhaWx9KTsKICAgICAgICAgICAgICAgICAgICBhID0gci5kbGluaywgMSA9PT0gSC5sZW5ndGggJiYgKGEgPSBhICsgIiZ6aXBuYW1lPSIgKyBlbmNvZGVVUklDb21wb25lbnQoSFswXS5zZXJ2ZXJfZmlsZW5hbWUpICsgIi56aXAiKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGlmICgwID09PSBILmxlbmd0aCkgcmV0dXJuIHZvaWQgeC5maXJlKHtpY29uOiAiZXJyb3IiLCB0ZXh0OiB2LnVuc2VsZWN0ZWR9KTsKICAgICAgICAgICAgICAgIGlmIChILmxlbmd0aCA+IDEpIHJldHVybiB2b2lkIHguZmlyZSh7aWNvbjogImVycm9yIiwgdGV4dDogdi5tb3JldGhhbn0pOwogICAgICAgICAgICAgICAgaWYgKDEgPT0gSFswXS5pc2RpcikgcmV0dXJuIHZvaWQgeC5maXJlKHtpY29uOiAiZXJyb3IiLCB0ZXh0OiB2LmRpcn0pOwogICAgICAgICAgICAgICAgImRvd25sb2FkLWFwaSIgPT0gbiAmJiAoYSA9IFYoSFswXS5wYXRoKSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgRShhKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIEEoaSkgewogICAgICAgICAgICBpZiAoSCA9IHQoKSwgZSgi6YCJ5Lit5paH5Lu25YiX6KGo77yaIiwgSCksIDAgPT09IEgubGVuZ3RoKSByZXR1cm4gdm9pZCB4LmZpcmUoe2ljb246ICJlcnJvciIsIHRleHQ6IHYudW5zZWxlY3RlZH0pOwogICAgICAgICAgICB2YXIgbiA9IGkudGFyZ2V0LmlkLCBhID0gdm9pZCAwLCBvID0gdm9pZCAwOwogICAgICAgICAgICBpZiAoYSA9IC0xID09IG4uaW5kZXhPZigiaHR0cHMiKSA/IC0xID09IG4uaW5kZXhPZigiaHR0cCIpID8gbG9jYXRpb24ucHJvdG9jb2wgKyAiOiIgOiAiaHR0cDoiIDogImh0dHBzOiIsIHEgPSBbXSwgRiA9IFtdLCAtMSAhPSBuLmluZGV4T2YoImRpcmVjdCIpKSB7CiAgICAgICAgICAgICAgICBxID0gRyhhKTsKICAgICAgICAgICAgICAgIGlmICgwID09PSBxLmxlbmd0aCkgcmV0dXJuIHZvaWQgeC5maXJlKHtpY29uOiAiZXJyb3IiLCB0ZXh0OiB2LnVuc2VsZWN0ZWR9KTsKICAgICAgICAgICAgICAgIEoub3Blbih7CiAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICLnm7Tpk77kuIvovb0iLAogICAgICAgICAgICAgICAgICAgIHR5cGU6ICJiYXRjaCIsCiAgICAgICAgICAgICAgICAgICAgbGlzdDogcSwKICAgICAgICAgICAgICAgICAgICB0aXA6ICfngrnlh7vpk77mjqXnm7TmjqXkuIvovb3vvIzor7flhYjljYfnuqcgPGEgaHJlZj0iaHR0cHM6Ly93d3cuYmFpZHV5dW4ud2lraS96aC1jbi9hc3Npc3RhbnQuaHRtbCI+W+e9keebmOS4h+iDveWKqeaJi108L2E+IOiHsyA8Yj52Mi4yLjA8L2I+77yM5pys6ZO+5o6l5LuF5pSv5oyB5bCP5paH5Lu25LiL6L2977yIPDMwME3vvIknLAogICAgICAgICAgICAgICAgICAgIHNob3djb3B5OiAhMQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgaWYgKC0xICE9IG4uaW5kZXhPZigiYXJpYSIpKSB7CiAgICAgICAgICAgICAgICBpZiAocSA9IE0oYSksIG8gPSAn6K+35YWI5a6J6KOFIDxhICBocmVmPSJodHRwczovL3d3dy5iYWlkdXl1bi53aWtpL3poLWNuL2Fzc2lzdGFudC5odG1sIj7nvZHnm5jkuIfog73liqnmiYs8L2E+IOivt+WwhumTvuaOpeWkjeWItuWIsOaUr+aMgUFyaWHnmoTkuIvovb3lmajkuK0sIOaOqOiNkOS9v+eUqCA8YSBocmVmPSJodHRwOi8vcGFuLmJhaWR1eXVuLndpa2kvZG93biI+WERvd248L2E+JywgMCA9PT0gcS5sZW5ndGgpIHJldHVybiB2b2lkIHguZmlyZSh7CiAgICAgICAgICAgICAgICAgICAgaWNvbjogImVycm9yIiwKICAgICAgICAgICAgICAgICAgICB0ZXh0OiB2LnVuc2VsZWN0ZWQKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgSi5vcGVuKHt0aXRsZTogIkFyaWHpk77mjqUiLCB0eXBlOiAiYmF0Y2hBcmlhIiwgbGlzdDogcSwgdGlwOiBvLCBzaG93Y29weTogITB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAoLTEgIT0gbi5pbmRleE9mKCJycGMiKSkgewogICAgICAgICAgICAgICAgaWYgKHEgPSBNKGEpLCBvID0gJ+eCueWHu+aMiemSruWPkemAgemTvuaOpeiHs0FyaWHkuIvovb3lmajkuK08YSBocmVmPSJodHRwczovL3d3dy5iYWlkdXl1bi53aWtpL3poLWNuL3JwYy5odG1sIj7or6bnu4bor7TmmI48L2E+77yM6ZyA6YWN5ZCI5pyA5paw54mIIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmJhaWR1eXVuLndpa2kvemgtY24vYXNzaXN0YW50Lmh0bWwiPlvnvZHnm5jkuIfog73liqnmiYtdPC9hPu+8jOaUr+aMgeacrOWcsOWSjOi/nOeoi+S4i+i9ve+8jOatpOWKn+iDveW7uuiurumFjeWQiOeZvuW6puS8muWRmOS9v+eUqCcsIDAgPT09IHEubGVuZ3RoKSByZXR1cm4gdm9pZCB4LmZpcmUoewogICAgICAgICAgICAgICAgICAgIGljb246ICJlcnJvciIsCiAgICAgICAgICAgICAgICAgICAgdGV4dDogdi51bnNlbGVjdGVkCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIEoub3Blbih7dGl0bGU6ICJBcmlhIFJQQyIsIHR5cGU6ICJiYXRjaEFyaWFSUEMiLCBsaXN0OiBxLCB0aXA6IG8sIHNob3djb3B5OiAhMX0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmICgtMSAhPSBuLmluZGV4T2YoImFwaSIpKSB7CiAgICAgICAgICAgICAgICBpZiAocSA9IE0oYSksIG8gPSAn6K+35YWI5a6J6KOFIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmJhaWR1eXVuLndpa2kvemgtY24vYXNzaXN0YW50Lmh0bWwiPue9keebmOS4h+iDveWKqeaJizwvYT4gPGI+djIuMi4wPC9iPiDlkI7ngrnlh7vpk77mjqXkuIvovb3vvIzoi6XkuIvovb3lpLHotKXvvIzor7fmm7TmjaLnpZ7np5jku6PnoIEgPGEgaHJlZj0iaHR0cHM6Ly93d3cuYmFpZHV5dW4ud2lraS96aC1jbi9xdWVzdGlvbi5odG1sIiB0YXJnZXQ9Il9ibGFuayI+6I635Y+W56We56eY5Luj56CBPC9hPicsIDAgPT09IHEubGVuZ3RoKSByZXR1cm4gdm9pZCB4LmZpcmUoewogICAgICAgICAgICAgICAgICAgIGljb246ICJlcnJvciIsCiAgICAgICAgICAgICAgICAgICAgdGV4dDogdi51bnNlbGVjdGVkCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIEoub3Blbih7dGl0bGU6ICJBUEnkuIvovb3pk77mjqUiLCB0eXBlOiAiYmF0Y2giLCBsaXN0OiBxLCB0aXA6IG99KTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gRyhlKSB7CiAgICAgICAgICAgIHZhciB0ID0gW107CiAgICAgICAgICAgIHJldHVybiAkLmVhY2goSCwgZnVuY3Rpb24gKGksIG4pIHsKICAgICAgICAgICAgICAgIHZhciBhID0gdm9pZCAwLCBvID0gdm9pZCAwLCByID0gdm9pZCAwOwogICAgICAgICAgICAgICAgYSA9IDAgPT0gbi5pc2RpciA/ICJkbGluayIgOiAiYmF0Y2giLCBMID0gaihbbl0pLCByID0gSShhKSwgMCA9PSByLmVycm5vID8gKCJkbGluayIgPT0gYSA/IG8gPSByLmRsaW5rWzBdLmRsaW5rIDogImJhdGNoIiA9PSBhICYmIChvID0gci5kbGluayksIG8gPSBvLnJlcGxhY2UoL14oW0EtWmEtel0rKTovLCBlKSkgOiBvID0gImVycm9yIiwgdC5wdXNoKHsKICAgICAgICAgICAgICAgICAgICBmaWxlbmFtZTogbi5zZXJ2ZXJfZmlsZW5hbWUsCiAgICAgICAgICAgICAgICAgICAgZG93bmxvYWRsaW5rOiBvCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSksIHQ7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBNKGUpIHsKICAgICAgICAgICAgdmFyIHQgPSBbXTsKICAgICAgICAgICAgcmV0dXJuICQuZWFjaChILCBmdW5jdGlvbiAoaSwgbikgewogICAgICAgICAgICAgICAgaWYgKDEgIT0gbi5pc2RpcikgewogICAgICAgICAgICAgICAgICAgIHZhciBhID0gdm9pZCAwOwogICAgICAgICAgICAgICAgICAgIGEgPSBWKG4ucGF0aCksIGEgPSBhLnJlcGxhY2UoL14oW0EtWmEtel0rKTovLCBlKSwgdC5wdXNoKHsKICAgICAgICAgICAgICAgICAgICAgICAgZmlsZW5hbWU6IG4uc2VydmVyX2ZpbGVuYW1lLAogICAgICAgICAgICAgICAgICAgICAgICBkb3dubG9hZGxpbms6IGEKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksIHQ7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBDKCkgewogICAgICAgICAgICB2YXIgZSA9IHZvaWQgMDsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIGUgPSBuZXcgRnVuY3Rpb24oInJldHVybiAiICsgTy5zaWduMikoKTsKICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGUubWVzc2FnZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGEoZShPLnNpZ241LCBPLnNpZ24xKSk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBqKGUpIHsKICAgICAgICAgICAgaWYgKDAgPT09IGUubGVuZ3RoKSByZXR1cm4gbnVsbDsKICAgICAgICAgICAgdmFyIHQgPSBbXTsKICAgICAgICAgICAgcmV0dXJuICQuZWFjaChlLCBmdW5jdGlvbiAoZSwgaSkgewogICAgICAgICAgICAgICAgdC5wdXNoKGkuZnNfaWQpOwogICAgICAgICAgICB9KSwgIlsiICsgdCArICJdIjsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIFAoKSB7CiAgICAgICAgICAgIEggPSB0KCk7CiAgICAgICAgICAgIHZhciBlID0gW107CiAgICAgICAgICAgIGlmICgwID09PSBILmxlbmd0aCkgcmV0dXJuIHZvaWQgeC5maXJlKHtpY29uOiAiZXJyb3IiLCB0ZXh0OiB2LnVuc2VsZWN0ZWR9KTsKICAgICAgICAgICAgJC5lYWNoKEgsIGZ1bmN0aW9uICh0LCBpKSB7CiAgICAgICAgICAgICAgICBlLnB1c2goaS5wYXRoKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHZhciBpID0gImh0dHBzOi8vcGFuLmJhaWR1LmNvbS9zaGFyZS9zZXQ/Y2hhbm5lbD1jaHVubGVpJmNsaWVudHR5cGU9MCZ3ZWI9MSZjaGFubmVsPWNodW5sZWkmd2ViPTEmYXBwX2lkPTI1MDUyOCZiZHN0b2tlbj0iICsgQiArICImbG9naWQ9IiArIHogKyAiJmNsaWVudHR5cGU9MCIsCiAgICAgICAgICAgICAgICBuID0gRCgpLCBhID0ge3NjaGFubmVsOiA0LCBjaGFubmVsX2xpc3Q6IEpTT04uc3RyaW5naWZ5KFtdKSwgcGVyaW9kOiAwLCBwd2Q6IG4sIGZpZF9saXN0OiBqKEgpfTsKICAgICAgICAgICAgJC5hamF4KHsKICAgICAgICAgICAgICAgIHVybDogaSwgYXN5bmM6ICExLCBtZXRob2Q6ICJQT1NUIiwgZGF0YTogYSwgc3VjY2VzczogZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoMCA9PT0gZS5lcnJubykgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IGUubGluazsKICAgICAgICAgICAgICAgICAgICAgICAgU3dhbC5maXJlKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAi5YiG5Lqr6ZO+5o6lIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbG93T3V0c2lkZUNsaWNrOiAhMSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0bWw6ICc8YSBocmVmPSInICsgdCArICciIHRhcmdldD0iX2JsYW5rIj4nICsgdCArICI8L2E+PGJyPuaPkOWPlueggTogIiArIG4sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogIuWkjeWItumTvuaOpSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb290ZXI6IHkKICAgICAgICAgICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZS52YWx1ZSAmJiBHTV9zZXRDbGlwYm9hcmQodCArICIjIiArIG4pOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gRCgpIHsKICAgICAgICAgICAgZnVuY3Rpb24gZShlLCB0KSB7CiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogKGUgLSB0KSArIHQpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBmb3IgKHZhciB0ID0gIiIsIGkgPSAwOyBpIDwgNDsgaSsrKSB7CiAgICAgICAgICAgICAgICB0ID0gdCArIGUoMCwgOSkgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGUoOTcsIDEyMikpICsgU3RyaW5nLmZyb21DaGFyQ29kZShlKDY1LCA5MCkpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGZvciAodmFyIG4gPSAiIiwgaSA9IDA7IGkgPCA0OyBpKyspIG4gKz0gdFtlKDAsIHQubGVuZ3RoIC0gMSldOwogICAgICAgICAgICByZXR1cm4gbjsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIEkoZSkgewogICAgICAgICAgICB2YXIgdCA9IHZvaWQgMDsKICAgICAgICAgICAgeiA9IGwoKTsKICAgICAgICAgICAgdmFyIGkgPSB7c2lnbjogTiwgdGltZXN0YW1wOiBVLCBmaWRsaXN0OiBMLCB0eXBlOiBlfTsKICAgICAgICAgICAgcmV0dXJuICQuYWpheCh7CiAgICAgICAgICAgICAgICB1cmw6ICJodHRwczovL3Bhbi5iYWlkdS5jb20vYXBpL2Rvd25sb2FkP2NsaWVudHR5cGU9MSIsCiAgICAgICAgICAgICAgICBhc3luYzogITEsCiAgICAgICAgICAgICAgICBtZXRob2Q6ICJQT1NUIiwKICAgICAgICAgICAgICAgIGRhdGE6IGksCiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICAgIHQgPSBlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwgdDsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIFYoZSkgewogICAgICAgICAgICByZXR1cm4gVyArICJmaWxlP21ldGhvZD1kb3dubG9hZCZwYXRoPSIgKyBlbmNvZGVVUklDb21wb25lbnQoZSkgKyAiJmFwcF9pZD0iICsgdzsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIEUoZSkgewogICAgICAgICAgICAkKCIjaGVscGVyZG93bmxvYWRpZnJhbWUiKS5hdHRyKCJzcmMiLCBlKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIFIoKSB7CiAgICAgICAgICAgIHZhciBlID0gJCgnPGRpdiBjbGFzcz0iaGVscGVyLWhpZGUiIHN0eWxlPSJwYWRkaW5nOjA7bWFyZ2luOjA7ZGlzcGxheTpibG9jayI+PC9kaXY+JyksCiAgICAgICAgICAgICAgICB0ID0gJCgnPGlmcmFtZSBzcmM9ImphdmFzY3JpcHQ6OyIgaWQ9ImhlbHBlcmRvd25sb2FkaWZyYW1lIiBzdHlsZT0iZGlzcGxheTpub25lIj48L2lmcmFtZT4nKTsKICAgICAgICAgICAgZS5hcHBlbmQodCksICQoImJvZHkiKS5hcHBlbmQoZSk7CiAgICAgICAgfQoKICAgICAgICB2YXIgTyA9IHZvaWQgMCwgTiA9IHZvaWQgMCwgVSA9IHZvaWQgMCwgQiA9IHZvaWQgMCwgeiA9IHZvaWQgMCwgTCA9IHZvaWQgMCwgSCA9IFtdLCBxID0gW10sIEYgPSBbXSwgSiA9IHZvaWQgMCwKICAgICAgICAgICAgVyA9IChsb2NhdGlvbi5wcm90b2NvbCwgbG9jYXRpb24uaG9zdCwgbG9jYXRpb24ucHJvdG9jb2wgKyAiLy9wY3MuYmFpZHUuY29tL3Jlc3QvMi4wL3Bjcy8iKTsKICAgICAgICBsb2NhdGlvbi5wcm90b2NvbDsKICAgICAgICB0aGlzLmluaXQgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIGlmIChPID0gdW5zYWZlV2luZG93Lnl1bkRhdGEsIGUoIuWIneWni+WMluS/oeaBrzoiLCBPKSwgdm9pZCAwID09PSBPKSByZXR1cm4gZSgi6aG16Z2i5pyq5q2j5bi45Yqg6L2977yM5oiW6ICF55m+5bqm5bey57uP5pu05paw77yBIiksICExOwogICAgICAgICAgICBpKCksIG4oKSwgcygpLCBSKCksIEogPSBuZXcgZCh7YWRkQ29weTogITB9KSwgZSgi5LiL6L295Yqp5omL5Yqg6L295oiQ5Yqf77yB5b2T5YmN54mI5pys77yaIiwgaCk7CiAgICAgICAgfTsKICAgIH0KCiAgICBmdW5jdGlvbiBwKCkgewogICAgICAgIGZ1bmN0aW9uIHQoKSB7CiAgICAgICAgICAgIFogPSBvKCksIFYgPSBJLlNJR04sIEUgPSBJLlRJTUVTVEFNUCwgUiA9IEkuTVlCRFNUT0tFTiwgTyA9ICJjaHVubGVpIiwgTiA9IDAsIFUgPSAxLCBCID0gdywgeiA9IGwoKSwgTCA9IDAsIEggPSAic2hhcmUiLCBGID0gSS5TSEFSRV9JRCwgcSA9IEkuU0hBUkVfVUssICJzZWNyZXQiID09IFogJiYgKFcgPSBwKCkpLCBjKCkgfHwgKEsgPSBJLlNIQVJFX0lEKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGkoKSB7CiAgICAgICAgICAgIHJldHVybiBjKCkgPyBJLkZJTEVJTkZPIDogcmVxdWlyZSgiZGlzay1zaGFyZTp3aWRnZXQvcGFnZU1vZHVsZS9saXN0L2xpc3RJbml0LmpzIikuZ2V0Q2hlY2tlZEl0ZW1zKCk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBuKCkgewogICAgICAgICAgICB2YXIgZSA9IGxvY2F0aW9uLmhhc2ggJiYgL14jKFthLXpBLVowLTldezR9KSQvLnRlc3QobG9jYXRpb24uaGFzaCkgJiYgUmVnRXhwLiQxLAogICAgICAgICAgICAgICAgdCA9ICQoJy5waWNrcHcgaW5wdXRbdGFiaW5kZXg9IjEiXScpLCBpID0gJCgiLnBpY2twdyBhLmctYnV0dG9uIiksIG4gPSAkKCIucGlja3B3IC5pbnB1dC1hcmVhIiksCiAgICAgICAgICAgICAgICBvID0gJCgnPGRpdiBzdHlsZT0ibWFyZ2luOi04cHggMCAxMHB4IDtjb2xvcjogI2ZmNTg1OCI+5q2j5Zyo6I635Y+W5o+Q5Y+W56CBPC9kaXY+JyksCiAgICAgICAgICAgICAgICByID0gKGxvY2F0aW9uLmhyZWYubWF0Y2goL1wvaW5pdFw/KD86c3VybHxzaGFyZWlkKT0oKD86XHd8LSkrKS8pIHx8IGxvY2F0aW9uLmhyZWYubWF0Y2goL1wvc1wvMSgoPzpcd3wtKSspLykpWzFdOwogICAgICAgICAgICB0ICYmIGkgJiYgKG4ucHJlcGVuZChvKSwgZSAmJiAoby50ZXh0KCLlj5HnjrDmj5Dlj5bnoIHvvIzlt7Loh6rliqjkuLrmgqjloavlhpkiKSwgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB0LnZhbChlKSwgaS5jbGljaygpOwogICAgICAgICAgICB9LCA1MDApKSwgJC5hamF4KHsKICAgICAgICAgICAgICAgIG1ldGhvZDogIkdFVCIsIHVybDogImh0dHBzOi8vYXBpLmJhaWR1eXVuLndpa2kvcmVzZXQvIiArIHIsIHN1Y2Nlc3M6IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICAgICAgZS5saW5rID8gR01feG1saHR0cFJlcXVlc3QoewogICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICJHRVQiLCB1cmw6IGUubGluaywgb25sb2FkOiBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBKU09OLnBhcnNlKGUucmVzcG9uc2VUZXh0KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4uYWNjZXNzX2NvZGUgPyAoby50ZXh0KCLlj5HnjrDmj5Dlj5bnoIHvvIzlt7Loh6rliqjkuLrmgqjloavlhpkiKSwgdC52YWwobi5hY2Nlc3NfY29kZSksIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuY2xpY2soKSwgYShuLnJlZmVycmVyKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDMwMCkpIDogby50ZXh0KCLmnKrlj5HnjrDmj5Dlj5bnoIHvvIzor7fmiYvliqjloavlhpkiKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pIDogby50ZXh0KCLmnKrlj5HnjrDmj5Dlj5bnoIHvvIzor7fmiYvliqjloavlhpkiKTsKICAgICAgICAgICAgICAgIH0sIGVycm9yOiBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICAgIG8udGV4dCgi6L+e5o6l5pyN5Yqh5Zmo5aSx6LSl77yM6K+35omL5Yqo5aGr5YaZIik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGEoZSkgewogICAgICAgICAgICBpZiAoIm9iamVjdCIgIT09ICh2b2lkIDAgPT09IGUgPyAidW5kZWZpbmVkIiA6IF90eXBlb2YoZSkpKSByZXR1cm4gITE7CiAgICAgICAgICAgIHZhciB0ID0gT2JqZWN0LnZhbHVlcyhlKSwgaSA9IHt9LCBuID0gdC5yZWR1Y2UoZnVuY3Rpb24gKGUsIHQpIHsKICAgICAgICAgICAgICAgIHJldHVybiBpW3QudGl0bGVdIHx8IChpW3QudGl0bGVdID0gZS5wdXNoKHQpKSwgZTsKICAgICAgICAgICAgfSwgW10pLCBhID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgJCgiLnNsaWRlLXNob3ctaGVhZGVyIikubGVuZ3RoID4gMCAmJiAoY2xlYXJJbnRlcnZhbChhKSwgJC5lYWNoKG4sIGZ1bmN0aW9uIChlLCB0KSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCJ1bmRlZmluZWQiICE9IHQudGl0bGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSAkKCc8YSBzdHlsZT0iZGlzcGxheTogYmxvY2s7bWFyZ2luLXRvcDogN3B4O292ZXJmbG93OiBoaWRkZW47dGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7d2hpdGUtc3BhY2U6IG5vd3JhcDsiIGhyZWY9IicgKyB0LnVybCArICciIHRhcmdldD0iX2JsYW5rIj7jgJDmnaXmupDjgJHvvJonICsgdC50aXRsZSArICI8L2E+Iik7CiAgICAgICAgICAgICAgICAgICAgICAgICQoIi5zbGlkZS1zaG93LWhlYWRlciIpLmFwcGVuZChpKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KSk7CiAgICAgICAgICAgIH0sIDUwMCk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBvKCkgewogICAgICAgICAgICByZXR1cm4gMSA9PT0gSS5TSEFSRV9QVUJMSUMgPyAicHVibGljIiA6ICJzZWNyZXQiOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gYygpIHsKICAgICAgICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gSS5nZXRDb250ZXh0OwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gcCgpIHsKICAgICAgICAgICAgcmV0dXJuICd7InNla2V5IjoiJyArIGRlY29kZVVSSUNvbXBvbmVudChyKCJCRENMTkQiKSkgKyAnIn0nOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gdSgpIHsKICAgICAgICAgICAgYygpID8gKCQoImRpdi5zbGlkZS1zaG93LXJpZ2h0IikuY3NzKCJ3aWR0aCIsICI1MDBweCIpLCAkKCJkaXYuZnJhbWUtbWFpbiIpLmNzcygid2lkdGgiLCAiOTYlIiksICQoImRpdi5zaGFyZS1maWxlLXZpZXdlciIpLmNzcygid2lkdGgiLCAiNzQwcHgiKS5jc3MoIm1hcmdpbi1sZWZ0IiwgImF1dG8iKS5jc3MoIm1hcmdpbi1yaWdodCIsICJhdXRvIikpIDogJCgiZGl2LnNsaWRlLXNob3ctcmlnaHQiKS5jc3MoIndpZHRoIiwgIjUwMHB4Iik7CiAgICAgICAgICAgIHZhciBlID0gJCgnPHNwYW4gY2xhc3M9ImctZHJvcGRvd24tYnV0dG9uIj48L3NwYW4+JyksCiAgICAgICAgICAgICAgICB0ID0gJCgnPGEgY2xhc3M9ImctYnV0dG9uIGctYnV0dG9uLWJsdWUiIHN0eWxlPSJ3aWR0aDogMTE0cHg7IiBkYXRhLWJ1dHRvbi1pZD0iYjIwMCIgZGF0YS1idXR0b24taW5kZXg9IjIwMCIgaHJlZj0iamF2YXNjcmlwdDo7Ij48L2E+JyksCiAgICAgICAgICAgICAgICBpID0gJCgnPHNwYW4gY2xhc3M9ImctYnV0dG9uLXJpZ2h0Ij48ZW0gY2xhc3M9Imljb24gaWNvbi1waWNwcmUtZG93bmxvYWQiIHRpdGxlPSLnmb7luqbnvZHnm5jkuIvovb3liqnmiYsiPjwvZW0+PHNwYW4gY2xhc3M9InRleHQiIHN0eWxlPSJ3aWR0aDogNjBweDsiPuS4i+i9veWKqeaJizwvc3Bhbj48L3NwYW4+JyksCiAgICAgICAgICAgICAgICBuID0gJCgnPHNwYW4gY2xhc3M9Im1lbnUiIHN0eWxlPSJ3aWR0aDphdXRvO3otaW5kZXg6NDEiPjwvc3Bhbj4nKSwKICAgICAgICAgICAgICAgIGEgPSAkKCc8YSBkYXRhLW1lbnUtaWQ9ImItbWVudTIwNyIgY2xhc3M9ImctYnV0dG9uLW1lbnUiIGhyZWY9ImphdmFzY3JpcHQ6OyI+55u05o6l5LiL6L29PC9hPicpLAogICAgICAgICAgICAgICAgbyA9ICQoJzxhIGRhdGEtbWVudS1pZD0iYi1tZW51MjA4IiBjbGFzcz0iZy1idXR0b24tbWVudSIgaHJlZj0iamF2YXNjcmlwdDo7IiBkYXRhLXR5cGU9ImRvd24iPuaYvuekuumTvuaOpTwvYT4nKSwKICAgICAgICAgICAgICAgIHIgPSAkKCc8YSBkYXRhLW1lbnUtaWQ9ImItbWVudTIwOCIgY2xhc3M9ImctYnV0dG9uLW1lbnUiIGhyZWY9ImphdmFzY3JpcHQ6OyI+5pi+56S6QXJpYemTvuaOpTwvYT4nKSwKICAgICAgICAgICAgICAgIGwgPSAkKCc8YSBkYXRhLW1lbnUtaWQ9ImItbWVudTIwOCIgY2xhc3M9ImctYnV0dG9uLW1lbnUiIGhyZWY9ImphdmFzY3JpcHQ6OyIgZGF0YS10eXBlPSJycGMiPuWvvOWHuuWIsFJQQzwvYT4nKSwKICAgICAgICAgICAgICAgIGQgPSAkKCc8YSBkYXRhLW1lbnUtaWQ9ImItbWVudTIwOSIgc3R5bGU9ImNvbG9yOiAjZTg1NjUzO2ZvbnQtd2VpZ2h0OiA3MDA7IiBjbGFzcz0iZy1idXR0b24tbWVudSIgaHJlZj0iamF2YXNjcmlwdDo7Ij5WZXIgJyArIGggKyAiPC9hPiIpOwogICAgICAgICAgICBuLmFwcGVuZChhKS5hcHBlbmQobykuYXBwZW5kKHIpLmFwcGVuZChsKSwgdC5hcHBlbmQoaSksIGUuYXBwZW5kKHQpLmFwcGVuZChuKSwgZS5ob3ZlcihmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICBlLnRvZ2dsZUNsYXNzKCJidXR0b24tb3BlbiIpOwogICAgICAgICAgICB9KSwgYS5jbGljayhTKSwgbC5jbGljayhDKSwgby5jbGljayhDKSwgci5jbGljayhnKSwgZC5jbGljayhmKSwgJCgiZGl2Lm1vZHVsZS1zaGFyZS10b3AtYmFyIGRpdi5iYXIgZGl2LngtYnV0dG9uLWJveCIpLmFwcGVuZChlKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGYoKSB7CiAgICAgICAgICAgIEdNX29wZW5JblRhYigiaHR0cHM6Ly93d3cuYmFpZHV5dW4ud2lraSIsIHthY3RpdmU6ICEwfSk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBnKCkgewogICAgICAgICAgICByZXR1cm4gdGUgPSBpKCksIG51bGwgPT09IFIgPyAoeC5maXJlKHsKICAgICAgICAgICAgICAgIGljb246ICJlcnJvciIsCiAgICAgICAgICAgICAgICB0ZXh0OiB2LnVubG9naW4KICAgICAgICAgICAgfSksICExKSA6IChlKCLpgInkuK3mlofku7bliJfooajvvJoiLCB0ZSksIDAgPT09IHRlLmxlbmd0aCA/ICh4LmZpcmUoewogICAgICAgICAgICAgICAgaWNvbjogImVycm9yIiwKICAgICAgICAgICAgICAgIHRleHQ6IHYudW5zZWxlY3RlZAogICAgICAgICAgICB9KSwgITEpIDogMSA9PSB0ZVswXS5pc2RpciA/ICh4LmZpcmUoewogICAgICAgICAgICAgICAgaWNvbjogImVycm9yIiwKICAgICAgICAgICAgICAgIHRleHQ6IHYudG9vYmlnCiAgICAgICAgICAgIH0pLCAhMSkgOiAoWSA9ICJhcmljbGluayIsIHZvaWQgaihmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgaWYgKHZvaWQgMCAhPT0gZSkgaWYgKC0yMCA9PSBlLmVycm5vKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKCEoWCA9IFQoKSkgfHwgMCAhPT0gWC5lcnJubykgcmV0dXJuIHguZmlyZSh7aWNvbjogImVycm9yIiwgdGV4dDogdi53cm9uZ2NvZGV9KSwgITE7CiAgICAgICAgICAgICAgICAgICAgZWUub3BlbihYKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKDExMiA9PSBlLmVycm5vKSByZXR1cm4geC5maXJlKHtpY29uOiAiZXJyb3IiLCB0ZXh0OiB2LnRpbWVvdXR9KSwgITE7CiAgICAgICAgICAgICAgICAgICAgaWYgKDAgPT09IGUuZXJybm8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgUS5vcGVuKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAi5LiL6L296ZO+5o6l77yI5LuF5pi+56S65paH5Lu26ZO+5o6l77yJIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJzaGFyZUFyaWFMaW5rIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3Q6IGUubGlzdCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpcDogJ+ivt+WFiOWuieijhSA8YSAgaHJlZj0iaHR0cHM6Ly93d3cuYmFpZHV5dW4ud2lraS96aC1jbi9hc3Npc3RhbnQuaHRtbCI+572R55uY5LiH6IO95Yqp5omLPC9hPiDor7flsIbpk77mjqXlpI3liLbliLDmlK/mjIFBcmlh55qE5LiL6L295Zmo5LitLCDmjqjojZDkvb/nlKggPGEgIGhyZWY9Imh0dHA6Ly9wYW4uYmFpZHV5dW4ud2lraS9kb3duIj5YRG93bjwvYT4nLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd2NvcHk6ICEwCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB4LmZpcmUoe2ljb246ICJlcnJvciIsIHRleHQ6IHYuZmFpbH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSkpOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gYigpIHsKICAgICAgICAgICAgdmFyIGUgPSAkKCc8ZGl2IGNsYXNzPSJoZWxwZXItaGlkZSIgc3R5bGU9InBhZGRpbmc6MDttYXJnaW46MDtkaXNwbGF5OmJsb2NrIj48L2Rpdj4nKSwKICAgICAgICAgICAgICAgIHQgPSAkKCc8aWZyYW1lIHNyYz0iamF2YXNjcmlwdDo7IiBpZD0iaGVscGVyZG93bmxvYWRpZnJhbWUiIHN0eWxlPSJkaXNwbGF5Om5vbmUiPjwvaWZyYW1lPicpOwogICAgICAgICAgICBlLmFwcGVuZCh0KSwgJCgiYm9keSIpLmFwcGVuZChlKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIHkoKSB7CiAgICAgICAgICAgIF8oKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIF8oKSB7CiAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKCJjbGljayIsICIuYXJpYS1ycGMiLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgdmFyIHQgPSAoZS50YXJnZXQuZGF0YXNldC5saW5rLCBlLnRhcmdldC5kYXRhc2V0LmZpbGVuYW1lKTsKICAgICAgICAgICAgICAgIEdNX3htbGh0dHBSZXF1ZXN0KHsKICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICJIRUFEIiwKICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7IlVzZXItQWdlbnQiOiBtfSwKICAgICAgICAgICAgICAgICAgICB1cmw6IGUudGFyZ2V0LmRhdGFzZXQubGluaywKICAgICAgICAgICAgICAgICAgICBvbmxvYWQ6IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gZS5maW5hbFVybDsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gay5kb21haW4gKyAiOiIgKyBrLnBvcnQgKyAiL2pzb25ycGMiLCBhID0gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAobmV3IERhdGUpLmdldFRpbWUoKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBqc29ucnBjOiAiMi4wIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICJhcmlhMi5hZGRVcmkiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtczogWyJ0b2tlbjoiICsgay50b2tlbiwgW2ldLCB7ZGlyOiBrLmRpciwgb3V0OiB0LCBoZWFkZXI6IFsiVXNlci1BZ2VudDoiICsgbV19XQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIEdNX3htbGh0dHBSZXF1ZXN0KHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICJQT1NUIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiB7IlVzZXItQWdlbnQiOiBtfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IG4sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiAianNvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGltZW91dDogM2UzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KGEpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ubG9hZDogZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5yZXNwb25zZS5yZXN1bHQgPyB4LmZpcmUoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogInN1Y2Nlc3MiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICLku7vliqHlt7Llj5HpgIHoh7NSUEPkuIvovb3lmagiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pIDogeC5maXJlKHtpY29uOiAiZXJyb3IiLCB0aXRsZTogZS5yZXNwb25zZS5tZXNzYWdlfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbnRpbWVvdXQ6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeC5maXJlKHtpY29uOiAiZXJyb3IiLCB0aXRsZTogIuaXoOazlei/nuaOpeWIsFJQQ+acjeWKoe+8jOivt+ajgOafpVJQQ+mFjee9riJ9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIFMoKSB7CiAgICAgICAgICAgIHJldHVybiB0ZSA9IGkoKSwgbnVsbCA9PT0gUiA/ICh4LmZpcmUoewogICAgICAgICAgICAgICAgaWNvbjogImVycm9yIiwKICAgICAgICAgICAgICAgIHRleHQ6IHYudW5sb2dpbgogICAgICAgICAgICB9KSwgITEpIDogKGUoIumAieS4reaWh+S7tuWIl+ihqO+8miIsIHRlKSwgMCA9PT0gdGUubGVuZ3RoID8gKHguZmlyZSh7CiAgICAgICAgICAgICAgICBpY29uOiAiZXJyb3IiLAogICAgICAgICAgICAgICAgdGV4dDogdi51bnNlbGVjdGVkCiAgICAgICAgICAgIH0pLCAhMSkgOiB0ZS5sZW5ndGggPiAxID8gKHguZmlyZSh7CiAgICAgICAgICAgICAgICBpY29uOiAiZXJyb3IiLAogICAgICAgICAgICAgICAgdGV4dDogdi5tb3JldGhhbgogICAgICAgICAgICB9KSwgITEpIDogMSA9PSB0ZVswXS5pc2RpciA/ICh4LmZpcmUoewogICAgICAgICAgICAgICAgaWNvbjogImVycm9yIiwKICAgICAgICAgICAgICAgIHRleHQ6IHYuZGlyCiAgICAgICAgICAgIH0pLCAhMSkgOiAoWSA9ICJkb3dubG9hZCIsIHZvaWQgaihmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgaWYgKHZvaWQgMCAhPT0gZSkgaWYgKC0yMCA9PSBlLmVycm5vKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKFggPSBUKCksIDAgIT09IFguZXJybm8pIHJldHVybiB2b2lkIHguZmlyZSh7aWNvbjogImVycm9yIiwgdGV4dDogdi53cm9uZ2NvZGV9KTsKICAgICAgICAgICAgICAgICAgICBlZS5vcGVuKFgpOwogICAgICAgICAgICAgICAgfSBlbHNlIGlmICgxMTIgPT0gZS5lcnJubykgeC5maXJlKHtpY29uOiAiZXJyb3IiLCB0ZXh0OiB2LnRpbWVvdXR9KTsgZWxzZSBpZiAoMCA9PT0gZS5lcnJubykgewogICAgICAgICAgICAgICAgICAgIHZhciB0ID0gZS5saXN0WzBdLmRsaW5rOwogICAgICAgICAgICAgICAgICAgIEQodCk7CiAgICAgICAgICAgICAgICB9IGVsc2UgeC5maXJlKHtpY29uOiAiZXJyb3IiLCB0ZXh0OiB2LmZhaWx9KTsKICAgICAgICAgICAgfSkpKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIFQoKSB7CiAgICAgICAgICAgIHZhciBlID0gaWUgKyAiZ2V0dmNvZGUiLCB0ID0gdm9pZCAwOwogICAgICAgICAgICB6ID0gbCgpOwogICAgICAgICAgICB2YXIgaSA9IHsKICAgICAgICAgICAgICAgIHByb2Q6ICJwYW4iLAogICAgICAgICAgICAgICAgdDogTWF0aC5yYW5kb20oKSwKICAgICAgICAgICAgICAgIGJkc3Rva2VuOiBSLAogICAgICAgICAgICAgICAgY2hhbm5lbDogTywKICAgICAgICAgICAgICAgIGNsaWVudHR5cGU6IE4sCiAgICAgICAgICAgICAgICB3ZWI6IFUsCiAgICAgICAgICAgICAgICBhcHBfaWQ6IEIsCiAgICAgICAgICAgICAgICBsb2dpZDogegogICAgICAgICAgICB9OwogICAgICAgICAgICByZXR1cm4gJC5hamF4KHsKICAgICAgICAgICAgICAgIHVybDogZSwgbWV0aG9kOiAiR0VUIiwgYXN5bmM6ICExLCBkYXRhOiBpLCBzdWNjZXNzOiBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICAgIHQgPSBlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwgdDsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIEEoKSB7CiAgICAgICAgICAgIFggPSBUKCksICQoIiNkaWFsb2ctaW1nIikuYXR0cigic3JjIiwgWC5pbWcpOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gRygpIHsKICAgICAgICAgICAgdmFyIGUgPSAkKCIjZGlhbG9nLWlucHV0IikudmFsKCk7CiAgICAgICAgICAgIHJldHVybiAwID09PSBlLmxlbmd0aCA/IHZvaWQgJCgiI2RpYWxvZy1lcnIiKS50ZXh0KCLor7fovpPlhaXpqozor4HnoIEiKSA6IGUubGVuZ3RoIDwgNCA/IHZvaWQgJCgiI2RpYWxvZy1lcnIiKS50ZXh0KCLpqozor4HnoIHovpPlhaXplJnor6/vvIzor7fph43mlrDovpPlhaUiKSA6IHZvaWQgUChlLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgaWYgKC0yMCA9PSBlLmVycm5vKSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKGVlLmNsb3NlKCksICQoIiNkaWFsb2ctZXJyIikudGV4dCgi6aqM6K+B56CB6L6T5YWl6ZSZ6K+v77yM6K+36YeN5paw6L6T5YWlIiksIEEoKSwgIVggfHwgMCAhPT0gWC5lcnJubykgcmV0dXJuIHZvaWQgeC5maXJlKHsKICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogImVycm9yIiwKICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogdi53cm9uZ2NvZGUKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICBlZS5vcGVuKCk7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKDAgPT09IGUuZXJybm8pIHsKICAgICAgICAgICAgICAgICAgICBpZiAoZWUuY2xvc2UoKSwgImRvd25sb2FkIiA9PSBZKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlLmxpc3QubGVuZ3RoID4gMSB8fCAxID09IGUubGlzdFswXS5pc2RpcikgcmV0dXJuIHguZmlyZSh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiAiZXJyb3IiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogdi5tb3JldGhhbgogICAgICAgICAgICAgICAgICAgICAgICB9KSwgITE7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gZS5saXN0WzBdLmRsaW5rOwogICAgICAgICAgICAgICAgICAgICAgICBEKHQpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoImxpbmsiID09IFkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgUS5vcGVuKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAi5LiL6L296ZO+5o6l77yI5LuF5pi+56S65paH5Lu26ZO+5o6l77yJIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJzaGFyZUxpbmsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdDogZS5saXN0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGlwOiAn54K55Ye76ZO+5o6l55u05o6l5LiL6L2977yM6K+35YWI5Y2H57qnIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmJhaWR1eXVuLndpa2kvemgtY24vYXNzaXN0YW50Lmh0bWwiPlvnvZHnm5jkuIfog73liqnmiYtdPC9hPiDoh7MgPGI+djIuMi4wPC9iPu+8iOWHuueOsDQwM+ivt+WFiOemgeeUqElETeaJqeWxle+8jOiLpeS7jeWksei0peivt+WwneivlUFyaWHpk77mjqXvvIknLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd2NvcHk6ICExCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZiAoImFyaWNsaW5rIiA9PSBZKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIFEub3Blbih7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogIuS4i+i9vemTvuaOpe+8iOS7heaYvuekuuaWh+S7tumTvuaOpe+8iSIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAic2hhcmVBcmlhTGluayIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0OiBlLmxpc3QsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXA6ICfor7flhYjlronoo4UgPGEgIGhyZWY9Imh0dHBzOi8vd3d3LmJhaWR1eXVuLndpa2kvemgtY24vYXNzaXN0YW50Lmh0bWwiPue9keebmOS4h+iDveWKqeaJizwvYT4g6K+35bCG6ZO+5o6l5aSN5Yi25Yiw5pSv5oyBQXJpYeeahOS4i+i9veWZqOS4rSwg5o6o6I2Q5L2/55SoIDxhICBocmVmPSJodHRwOi8vcGFuLmJhaWR1eXVuLndpa2kvZG93biI+WERvd248L2E+JywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3djb3B5OiAhMQogICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9IGVsc2UgeC5maXJlKHtpY29uOiAiZXJyb3IiLCB0ZXh0OiB2LmZhaWx9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBNKCkgewogICAgICAgICAgICB2YXIgZSA9IFtdOwogICAgICAgICAgICByZXR1cm4gJC5lYWNoKHRlLCBmdW5jdGlvbiAodCwgaSkgewogICAgICAgICAgICAgICAgZS5wdXNoKGkuZnNfaWQpOwogICAgICAgICAgICB9KSwgIlsiICsgZSArICJdIjsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIEModCkgewogICAgICAgICAgICByZXR1cm4gdGUgPSBpKCksIG51bGwgPT09IFIgPyAoeC5maXJlKHsKICAgICAgICAgICAgICAgIGljb246ICJlcnJvciIsCiAgICAgICAgICAgICAgICB0ZXh0OiB2LnVubG9naW4KICAgICAgICAgICAgfSksICExKSA6IChlKCLpgInkuK3mlofku7bliJfooajvvJoiLCB0ZSksIDAgPT09IHRlLmxlbmd0aCA/ICh4LmZpcmUoewogICAgICAgICAgICAgICAgaWNvbjogImVycm9yIiwKICAgICAgICAgICAgICAgIHRleHQ6IHYudW5zZWxlY3RlZAogICAgICAgICAgICB9KSwgITEpIDogMSA9PSB0ZVswXS5pc2RpciA/ICh4LmZpcmUoe2ljb246ICJlcnJvciIsIHRleHQ6IHYuZGlyfSksICExKSA6IChZID0gImxpbmsiLCB2b2lkIGooZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgIT09IGUpIGlmICgtMjAgPT0gZS5lcnJubykgewogICAgICAgICAgICAgICAgICAgIGlmICghKFggPSBUKCkpIHx8IDAgIT09IFguZXJybm8pIHJldHVybiB4LmZpcmUoe2ljb246ICJlcnJvciIsIHRleHQ6IHYud3Jvbmdjb2RlfSksICExOwogICAgICAgICAgICAgICAgICAgIGVlLm9wZW4oWCk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgIGlmICgxMTIgPT0gZS5lcnJubykgcmV0dXJuIHguZmlyZSh7aWNvbjogImVycm9yIiwgdGV4dDogdi50aW1lb3V0fSksICExOwogICAgICAgICAgICAgICAgICAgIGlmICgwID09PSBlLmVycm5vKSBpZiAoInJwYyIgPT09IHQudGFyZ2V0LmRhdGFzZXQudHlwZSkgewogICAgICAgICAgICAgICAgICAgICAgICBRLm9wZW4oewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICLkuIvovb3pk77mjqXvvIjku4XmmL7npLrmlofku7bpk77mjqXvvIkiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogInJwY0xpbmsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdDogZS5saXN0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGlwOiAn54K55Ye75oyJ6ZKu5Y+R6YCB6ZO+5o6l6IezQXJpYeS4i+i9veWZqOS4rSA8YSBocmVmPSJodHRwczovL3d3dy5iYWlkdXl1bi53aWtpL3poLWNuL3JwYy5odG1sIj7or6bnu4bor7TmmI48L2E+77yM6ZyA6YWN5ZCI5pyA5paw54mIIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmJhaWR1eXVuLndpa2kvemgtY24vYXNzaXN0YW50Lmh0bWwiPlvnvZHnm5jkuIfog73liqnmiYtdPC9hPu+8jOaUr+aMgeacrOWcsOWSjOi/nOeoi+S4i+i9vScsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93Y29weTogITEKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgUS5vcGVuKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAi5LiL6L296ZO+5o6l77yI5LuF5pi+56S65paH5Lu26ZO+5o6l77yJIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICJzaGFyZUxpbmsiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdDogZS5saXN0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGlwOiAn54K55Ye76ZO+5o6l55u05o6l5LiL6L2977yM6K+35YWI5Y2H57qnIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmJhaWR1eXVuLndpa2kvemgtY24vYXNzaXN0YW50Lmh0bWwiPlvnvZHnm5jkuIfog73liqnmiYtdPC9hPiDoh7MgPGI+djIuMi4wPC9iPu+8iOWHuueOsDQwM+ivt+WFiOemgeeUqElETeaJqeWxle+8jOiLpeS7jeWksei0peivt+WwneivlUFyaWHpk77mjqXvvIknLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd2NvcHk6ICExCiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB4LmZpcmUoe2ljb246ICJlcnJvciIsIHRleHQ6IHYuZmFpbH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSkpOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gaihlKSB7CiAgICAgICAgICAgIGlmIChudWxsID09PSBSKSByZXR1cm4geC5maXJlKHtpY29uOiAiZXJyb3IiLCB0ZXh0OiB2LnVubG9naW59KSwgIiI7CiAgICAgICAgICAgIHZhciB0ID0gdm9pZCAwOwogICAgICAgICAgICBpZiAoYykgewogICAgICAgICAgICAgICAgSiA9IE0oKSwgeiA9IGwoKTsKICAgICAgICAgICAgICAgIHZhciBpID0gbmV3IEZvcm1EYXRhOwogICAgICAgICAgICAgICAgaS5hcHBlbmQoImVuY3J5cHQiLCBMKSwgaS5hcHBlbmQoInByb2R1Y3QiLCBIKSwgaS5hcHBlbmQoInVrIiwgcSksIGkuYXBwZW5kKCJwcmltYXJ5aWQiLCBGKSwgaS5hcHBlbmQoImZpZF9saXN0IiwgSiksICJzZWNyZXQiID09IFogJiYgaS5hcHBlbmQoImV4dHJhIiwgVyksICQuYWpheCh7CiAgICAgICAgICAgICAgICAgICAgdXJsOiAiaHR0cHM6Ly9hcGkuYmFpZHV5dW4ud2lraS9kb3dubG9hZD9zaWduPSIgKyBWICsgIiZ0aW1lc3RhbXA9IiArIEUgKyAiJmxvZ2lkPSIgKyB6ICsgIiZpbml0PSIgKyBHTV9nZXRWYWx1ZSgiaW5pdCIpLAogICAgICAgICAgICAgICAgICAgIGNhY2hlOiAhMSwKICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICJHRVQiLAogICAgICAgICAgICAgICAgICAgIGFzeW5jOiAhMSwKICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdCA9IGUucmVzcG9uc2VUZXh0OwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pLCBHTV94bWxodHRwUmVxdWVzdCh7CiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAiUE9TVCIsIGRhdGE6IGksIHVybDogYXRvYihhdG9iKHQpKSwgb25sb2FkOiBmdW5jdGlvbiAodCkgewogICAgICAgICAgICAgICAgICAgICAgICBlKEpTT04ucGFyc2UodC5yZXNwb25zZSkpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBQKGUsIHQpIHsKICAgICAgICAgICAgdmFyIGkgPSB2b2lkIDA7CiAgICAgICAgICAgIGlmIChjKSB7CiAgICAgICAgICAgICAgICBKID0gTSgpLCB6ID0gbCgpOwogICAgICAgICAgICAgICAgdmFyIG4gPSBuZXcgRm9ybURhdGE7CiAgICAgICAgICAgICAgICBuLmFwcGVuZCgiZW5jcnlwdCIsIEwpLCBuLmFwcGVuZCgicHJvZHVjdCIsIEgpLCBuLmFwcGVuZCgidWsiLCBxKSwgbi5hcHBlbmQoInByaW1hcnlpZCIsIEYpLCBuLmFwcGVuZCgiZmlkX2xpc3QiLCBKKSwgbi5hcHBlbmQoInZjb2RlX2lucHV0IiwgZSksIG4uYXBwZW5kKCJ2Y29kZV9zdHIiLCBYLnZjb2RlKSwgInNlY3JldCIgPT0gWiAmJiBuLmFwcGVuZCgiZXh0cmEiLCBXKSwgJC5hamF4KHsKICAgICAgICAgICAgICAgICAgICB1cmw6ICJodHRwczovL2FwaS5iYWlkdXl1bi53aWtpL2Rvd25sb2FkP3NpZ249IiArIFYgKyAiJnRpbWVzdGFtcD0iICsgRSArICImbG9naWQ9IiArIHosCiAgICAgICAgICAgICAgICAgICAgY2FjaGU6ICExLAogICAgICAgICAgICAgICAgICAgIG1ldGhvZDogIkdFVCIsCiAgICAgICAgICAgICAgICAgICAgYXN5bmM6ICExLAogICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICAgICAgICBpID0gZS5yZXNwb25zZVRleHQ7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSksIEdNX3htbGh0dHBSZXF1ZXN0KHsKICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICJQT1NUIiwgZGF0YTogbiwgdXJsOiBhdG9iKGF0b2IoaSkpLCBvbmxvYWQ6IGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHQoSlNPTi5wYXJzZShlLnJlc3BvbnNlKSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIEQodCkgewogICAgICAgICAgICBlKCLkuIvovb3pk77mjqXvvJoiICsgdCksIHQgJiYgR01feG1saHR0cFJlcXVlc3QoewogICAgICAgICAgICAgICAgbWV0aG9kOiAiUE9TVCIsCiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7IlVzZXItQWdlbnQiOiBtfSwKICAgICAgICAgICAgICAgIHVybDogdCwKICAgICAgICAgICAgICAgIG9ubG9hZDogZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICB2YXIgSSA9IHZvaWQgMCwgViA9IHZvaWQgMCwgRSA9IHZvaWQgMCwgUiA9IHZvaWQgMCwgTyA9IHZvaWQgMCwgTiA9IHZvaWQgMCwgVSA9IHZvaWQgMCwgQiA9IHZvaWQgMCwgeiA9IHZvaWQgMCwKICAgICAgICAgICAgTCA9IHZvaWQgMCwgSCA9IHZvaWQgMCwgcSA9IHZvaWQgMCwgRiA9IHZvaWQgMCwgSiA9IHZvaWQgMCwgVyA9IHZvaWQgMCwgSyA9IHZvaWQgMCwgWCA9IHZvaWQgMCwgWiA9IHZvaWQgMCwKICAgICAgICAgICAgWSA9IHZvaWQgMCwgUSA9IHZvaWQgMCwgZWUgPSB2b2lkIDAsIHRlID0gW10sIGllID0gbG9jYXRpb24ucHJvdG9jb2wgKyAiLy8iICsgbG9jYXRpb24uaG9zdCArICIvYXBpLyI7CiAgICAgICAgdGhpcy5pbml0ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICBpZiAoR01fZ2V0VmFsdWUoIlNFVFRJTkdfUCIpICYmIG4oKSwgSSA9IHVuc2FmZVdpbmRvdy55dW5EYXRhLCBlKCLliJ3lp4vljJbkv6Hmga86IiwgSSksIHZvaWQgMCA9PT0gSSkgcmV0dXJuIHZvaWQgZSgi6aG16Z2i5pyq5q2j5bi45Yqg6L2977yM5oiW6ICF55m+5bqm5bey57uP5pu05paw77yBIik7CiAgICAgICAgICAgIHQoKSwgdSgpLCBRID0gbmV3IGQoe2FkZENvcHk6ICExfSksIGVlID0gbmV3IHMoQSwgRyksIGIoKSwgeSgpLCBlKCLkuIvovb3liqnmiYvliqDovb3miJDlip/vvIHlvZPliY3niYjmnKzvvJoiLCBoKTsKICAgICAgICB9OwogICAgfQoKICAgIGZ1bmN0aW9uIHUoKSB7CiAgICAgICAgZnVuY3Rpb24gdCgpIHsKICAgICAgICAgICAgc3dpdGNoIChvKCkpIHsKICAgICAgICAgICAgICAgIGNhc2UiZGlzayI6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgKG5ldyBjKS5pbml0KCk7CiAgICAgICAgICAgICAgICBjYXNlInNoYXJlIjoKICAgICAgICAgICAgICAgIGNhc2UicyI6CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgKG5ldyBwKS5pbml0KCk7CiAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gaSgpIHsKICAgICAgICAgICAgJC5hamF4KHsKICAgICAgICAgICAgICAgIHVybDogImh0dHBzOi8vYXBpLmJhaWR1eXVuLndpa2kvdXBkYXRlP3Zlcj0iICsgaCArICImcz13ZWIiLCBtZXRob2Q6ICJHRVQiLCBzdWNjZXNzOiBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICAgIGlmIChHTV9zZXRWYWx1ZSgibGFzdGVzdF92ZXJzaW9uIiwgZS52ZXJzaW9uKSwgbSA9IGUudWEsIDIwMCA9PT0gZS5jb2RlICYmIGUudmVyc2lvbiA+IGggJiYgU3dhbC5maXJlKHsKICAgICAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHQudmFsdWUgJiYgKGxvY2F0aW9uLmhyZWYgPSBlLnVwZGF0ZVVSTCk7CiAgICAgICAgICAgICAgICAgICAgfSksIGUuc2NvZGUgIT0gR01fZ2V0VmFsdWUoInNjb2RlIikpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSAkKCc8ZGl2PjxpbnB1dCBjbGFzcz0ic3dhbDItaW5wdXQiIGlkPSJzY29kZSIgdHlwZT0idGV4dCIgcGxhY2Vob2xkZXI9Iuecn+eahOmaj+S+v+i+k++8jOWIq+e6oOe7k+OAgiI+PC9kaXY+Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgIFN3YWwuZmlyZSh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogIuWIneasoeS9v+eUqOivt+maj+S+v+i+k+WFpeS4gOS4suaVsOWtlyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBodG1sOiBpWzBdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsb3dPdXRzaWRlQ2xpY2s6ICExLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICLnoa7lrpoiCiAgICAgICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuc2NvZGUgPT0gJCgiI3Njb2RlIikudmFsKCkgPyAoR01fc2V0VmFsdWUoInNjb2RlIiwgZS5zY29kZSksIEdNX3NldFZhbHVlKCJpbml0IiwgMCksIHguZmlyZSh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogInN1Y2Nlc3MiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6ICLmmpflj7fmraPnoa7vvIzmraPlnKjliJ3lp4vljJbkuK3jgILjgILjgIIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaXN0b3J5LmdvKDApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpIDogKEdNX3NldFZhbHVlKCJzY29kZSIsIGUuc2NvZGUpLCBHTV9zZXRWYWx1ZSgiaW5pdCIsIDApLCB4LmZpcmUoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246ICJzdWNjZXNzIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiAi5pqX5Y+35q2j56Gu77yM5q2j5Zyo5Yid5aeL5YyW5Lit44CC44CC44CCIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGlzdG9yeS5nbygwKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHQoKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICBmdW5jdGlvbiBuKCkgewogICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHZhciBlID0gJCgiLiIgKyBmLmhlYWRlciksCiAgICAgICAgICAgICAgICAgICAgdCA9ICQoJzxzcGFuIGNsYXNzPSJjTUVNRUYiIG5vZGUtdHlwZT0iaGVscC1hdXRob3IiIHN0eWxlPSJvcGFjaXR5OiAuNSIgPjxhIGhyZWY9Imh0dHBzOi8vd3d3LmJhaWR1eXVuLndpa2kvIiB0YXJnZXQ9Il9ibGFuayI+5pWZ56iLPC9hPjxpIGNsYXNzPSJmaW5kLWxpZ2h0LWljb24iIHN0eWxlPSJkaXNwbGF5OiBpbmxpbmU7YmFja2dyb3VuZC1jb2xvcjogIzAwOWZlODsiPjwvaT48L3NwYW4+Jyk7CiAgICAgICAgICAgICAgICBlLmFwcGVuZCh0KTsKICAgICAgICAgICAgfSwgMmUzKTsKICAgICAgICB9CgogICAgICAgIGZ1bmN0aW9uIGEoKSB7CiAgICAgICAgICAgIEdNX3JlZ2lzdGVyTWVudUNvbW1hbmQoIuiuvue9riIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHZvaWQgMCA9PT0gR01fZ2V0VmFsdWUoIlNFVFRJTkdfUCIpICYmIEdNX3NldFZhbHVlKCJTRVRUSU5HX1AiLCAhMSksIHZvaWQgMCA9PT0gR01fZ2V0VmFsdWUoIlNFVFRJTkdfSCIpICYmIEdNX3NldFZhbHVlKCJTRVRUSU5HX0giLCAhMCk7CiAgICAgICAgICAgICAgICB2YXIgZSA9ICIiOwogICAgICAgICAgICAgICAgR01fZ2V0VmFsdWUoIlNFVFRJTkdfUCIpID8gZSArPSAnPGxhYmVsIHN0eWxlPSJkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6IGNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47cGFkZGluZy10b3A6IDIwcHg7Ij7oh6rliqjloavlhpnmj5Dlj5bnoIE8aW5wdXQgdHlwZT0iY2hlY2tib3giIGlkPSJTLVAiIGNoZWNrZWQgc3R5bGU9IndpZHRoOiAxNnB4O2hlaWdodDogMTZweDsiPjwvbGFiZWw+JyA6IGUgKz0gJzxsYWJlbCBzdHlsZT0iZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOiBjZW50ZXI7anVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO3BhZGRpbmctdG9wOiAyMHB4OyI+6Ieq5Yqo5aGr5YaZ5o+Q5Y+W56CBPGlucHV0IHR5cGU9ImNoZWNrYm94IiBpZD0iUy1QIiBzdHlsZT0id2lkdGg6IDE2cHg7aGVpZ2h0OiAxNnB4OyI+PC9sYWJlbD4nLCBHTV9nZXRWYWx1ZSgiU0VUVElOR19IIikgPyBlICs9ICc8bGFiZWwgc3R5bGU9ImRpc3BsYXk6ZmxleDthbGlnbi1pdGVtczogY2VudGVyO2p1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtwYWRkaW5nLXRvcDogMjBweDsiPuW8gOWQr+aVmeeoizxpbnB1dCB0eXBlPSJjaGVja2JveCIgaWQ9IlMtSCIgY2hlY2tlZCBzdHlsZT0id2lkdGg6IDE2cHg7aGVpZ2h0OiAxNnB4OyI+PC9sYWJlbD4nIDogZSArPSAnPGxhYmVsIHN0eWxlPSJkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6IGNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47cGFkZGluZy10b3A6IDIwcHg7Ij7lvIDlkK/mlZnnqIs8aW5wdXQgdHlwZT0iY2hlY2tib3giIGlkPSJTLUgiIHN0eWxlPSJ3aWR0aDogMTZweDtoZWlnaHQ6IDE2cHg7Ij48L2xhYmVsPicsIGUgPSAiPGRpdj4iICsgZSArICI8L2Rpdj4iOwogICAgICAgICAgICAgICAgdmFyIHQgPSAkKGUpOwogICAgICAgICAgICAgICAgU3dhbC5maXJlKHt0aXRsZTogIuiEmuacrOmFjee9riIsIGh0bWw6IHRbMF0sIGNvbmZpcm1CdXR0b25UZXh0OiAi5L+d5a2YIiwgZm9vdGVyOiB5fSkudGhlbihmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICAgIGhpc3RvcnkuZ28oMCk7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSksICQoZG9jdW1lbnQpLm9uKCJjaGFuZ2UiLCAiI1MtSCIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIEdNX3NldFZhbHVlKCJTRVRUSU5HX0giLCAkKHRoaXMpWzBdLmNoZWNrZWQpOwogICAgICAgICAgICB9KSwgJChkb2N1bWVudCkub24oImNoYW5nZSIsICIjUy1QIiwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgR01fc2V0VmFsdWUoIlNFVFRJTkdfUCIsICQodGhpcylbMF0uY2hlY2tlZCk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgZnVuY3Rpb24gcigpIHsKICAgICAgICAgICAgR01fc2V0VmFsdWUoImN1cnJlbnRfdmVyc2lvbiIsIGgpOwogICAgICAgICAgICB2YXIgZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoInNjcmlwdCIpOwogICAgICAgICAgICBlLnR5cGUgPSAidGV4dC9qYXZhc2NyaXB0IiwgZS5hc3luYyA9ICEwLCBlLnNyYyA9ICJodHRwczovL2pzLnVzZXJzLjUxLmxhLzE5OTg4MTE3LmpzIiwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImhlYWQiKVswXS5hcHBlbmRDaGlsZChlKTsKICAgICAgICAgICAgdmFyIHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJtZXRhIik7CiAgICAgICAgICAgIHQuaHR0cEVxdWl2ID0gIkNvbnRlbnQtU2VjdXJpdHktUG9saWN5IiwgdC5jb250ZW50ID0gInVwZ3JhZGUtaW5zZWN1cmUtcmVxdWVzdHMiLCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgiaGVhZCIpWzBdLmFwcGVuZENoaWxkKHQpLCAkKGRvY3VtZW50KS5vbigiY29udGV4dG1lbnUiLCAiLmFyaWEyYy1saW5rIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiBlLnByZXZlbnREZWZhdWx0KCksICExOwogICAgICAgICAgICB9KSwgJChkb2N1bWVudCkub24oIm1vdXNlZG93biIsICIuYXJpYTJjLWxpbmsiLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgdmFyIHQgPSAkKHRoaXMpLnRleHQoKTsKICAgICAgICAgICAgICAgIHJldHVybiBHTV9zZXRDbGlwYm9hcmQodCwgInRleHQiKSwgeC5maXJlKHtpY29uOiAic3VjY2VzcyIsIHRleHQ6ICLlt7LlsIbpk77mjqXlpI3liLbliLDliarotLTmnb/vvIEifSksICExOwogICAgICAgICAgICB9KSwgJChkb2N1bWVudCkub24oImNsaWNrIiwgIi5ob21lLWRvd25sb2FkIiwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgfSksICQoZG9jdW1lbnQpLm9uKCJjbGljayIsICIuc2hhcmUtZG93bmxvYWQiLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpLCBlLnRhcmdldC5pbm5lclRleHQgJiYgR01feG1saHR0cFJlcXVlc3QoewogICAgICAgICAgICAgICAgICAgIG1ldGhvZDogIlBPU1QiLAogICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IHsiVXNlci1BZ2VudCI6IG19LAogICAgICAgICAgICAgICAgICAgIHVybDogZS50YXJnZXQuaW5uZXJUZXh0LAogICAgICAgICAgICAgICAgICAgIG9ubG9hZDogZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICBlKCJSUEPvvJoiLCBrKSwgdGhpcy5pbml0ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICByKCksIGkoKSwgR01fZ2V0VmFsdWUoIlNFVFRJTkdfSCIpICYmIG4oKSwgYSgpOwogICAgICAgIH07CiAgICB9CgogICAgdmFyIGggPSAiNC4wLjAiLCBmID0geyJiYXItc2VhcmNoIjogIk9GYVBhTyIsICJsaXN0LXRvb2xzIjogInRjdUxBdSIsIGhlYWRlcjogInZ5UUhOeWIifSwgdiA9IHsKICAgICAgICAgICAgZGlyOiAi5o+Q56S677ya5LiN5pSv5oyB5pW05Liq5paH5Lu25aS55LiL6L2977yM5Y+v6L+b5YWl5paH5Lu25aS55YaF6I635Y+W5paH5Lu26ZO+5o6l5LiL6L2977yBIiwKICAgICAgICAgICAgdW5sb2dpbjogIuaPkOekuu+8mueZu+W9leeZvuW6pue9keebmOWQjuaJjeiDveS9v+eUqOatpOWKn+iDveWTpu+8gSIsCiAgICAgICAgICAgIGZhaWw6ICLmj5DnpLrvvJrojrflj5bkuIvovb3pk77mjqXlpLHotKXvvIHor7fliLfmlrDnvZHpobXlkI7ph43or5XvvIEiLAogICAgICAgICAgICB1bnNlbGVjdGVkOiAi5o+Q56S677ya6K+35YWI6YCJ5oup6KaB5LiL6L2955qE5paH5Lu277yBIiwKICAgICAgICAgICAgbW9yZXRoYW46ICLmj5DnpLrvvJrlpJrkuKrmlofku7bor7fngrnlh7vjgJDmmL7npLrpk77mjqXjgJHvvIEiLAogICAgICAgICAgICB0b29iaWc6ICLmj5DnpLrvvJrlj6rmlK/mjIEzMDBN5Lul5LiL55qE5paH5Lu25aS577yM6Iul6ZO+5o6l5peg5rOV5LiL6L2977yM6K+36L+b5YWl5paH5Lu25aS55ZCO5Yu+6YCJ5paH5Lu26I635Y+W77yBIiwKICAgICAgICAgICAgdGltZW91dDogIuaPkOekuu+8mumhtemdoui/h+acn++8jOivt+WIt+aWsOmHjeivle+8gSIsCiAgICAgICAgICAgIHdyb25nY29kZTogIuaPkOekuu+8muiOt+WPlumqjOivgeeggeWksei0pe+8gSIsCiAgICAgICAgICAgIGRlbGV0ZWQ6ICLmj5DnpLrvvJrmlofku7bkuI3lrZjlnKjmiJblt7Looqvnmb7luqblkozosJDvvIzml6Dms5XkuIvovb3vvIEiCiAgICAgICAgfSwgZyA9IDI1MDUyOCwgdyA9IEdNX2dldFZhbHVlKCJzZWNyZXRDb2RlTmV3IikgPyBHTV9nZXRWYWx1ZSgic2VjcmV0Q29kZU5ldyIpIDogZywKICAgICAgICBtID0gKEdNX2dldFZhbHVlKCJzYXZlUGF0aCIpICYmIEdNX2dldFZhbHVlKCJzYXZlUGF0aCIpLCAiIiksIGIgPSBuYXZpZ2F0b3IudXNlckFnZW50LAogICAgICAgIHkgPSAnUG93ZXJkIEJ5IDxhIHN0eWxlPSJtYXJnaW4tbGVmdDogNXB4OyIgaHJlZj0iaHR0cHM6Ly93d3cuYmFpZHV5dW4ud2lraSIgdGFyZ2V0PSJfYmxhbmsiPue9keebmOebtOmTvuS4i+i9veWKqeaJizwvYT4nLAogICAgICAgIHggPSBTd2FsLm1peGluKHsKICAgICAgICAgICAgdG9hc3Q6ICEwLAogICAgICAgICAgICBwb3NpdGlvbjogInRvcCIsCiAgICAgICAgICAgIHNob3dDb25maXJtQnV0dG9uOiAhMSwKICAgICAgICAgICAgdGltZXI6IDNlMywKICAgICAgICAgICAgdGltZXJQcm9ncmVzc0JhcjogITEsCiAgICAgICAgICAgIG9uT3BlbjogZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgIGUuYWRkRXZlbnRMaXN0ZW5lcigibW91c2VlbnRlciIsIFN3YWwuc3RvcFRpbWVyKSwgZS5hZGRFdmVudExpc3RlbmVyKCJtb3VzZWxlYXZlIiwgU3dhbC5yZXN1bWVUaW1lcik7CiAgICAgICAgICAgIH0KICAgICAgICB9KSwgayA9IHsKICAgICAgICAgICAgZG9tYWluOiBHTV9nZXRWYWx1ZSgicnBjRG9tYWluIikgPyBHTV9nZXRWYWx1ZSgicnBjRG9tYWluIikgOiAiaHR0cDovL2xvY2FsaG9zdCIsCiAgICAgICAgICAgIHBvcnQ6IEdNX2dldFZhbHVlKCJycGNQb3J0IikgPyBHTV9nZXRWYWx1ZSgicnBjUG9ydCIpIDogNjgwMCwKICAgICAgICAgICAgdG9rZW46IEdNX2dldFZhbHVlKCJycGNUb2tlbiIpID8gR01fZ2V0VmFsdWUoInJwY1Rva2VuIikgOiAiIiwKICAgICAgICAgICAgZGlyOiBHTV9nZXRWYWx1ZSgicnBjRGlyIikgPyBHTV9nZXRWYWx1ZSgicnBjRGlyIikgOiAiRDovIgogICAgICAgIH07CiAgICAkKGZ1bmN0aW9uICgpIHsKICAgICAgICAobmV3IHUpLmluaXQoKTsKICAgIH0pOwp9KCk7Ci8v55m+5bqm572R55uY6ISa5pys57uT5p2fCgkJCX0KCQl9Cn0pKCk7Ci8v55m+5bqm572R55uY57uT5p2fCihmdW5jdGlvbigpIHsKICAgIHZhciBjb3Vwb25VcmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjsKICAgIGlmKGNvdXBvblVybC5pbmRleE9mKCd0YW9iYW8nKSAhPSAtMSB8fCBjb3Vwb25VcmwuaW5kZXhPZigndG1hbGwnKSAhPSAtMSl7CiAgICAvL2lzX29mZgogICAgJC5nZXQoJ2h0dHBzOi8vd3d3Lnp1aWh1aW1haS5uZXQvdnJoci9sb2FkaW5nLnBocCcsZnVuY3Rpb24obG9hZGluZ19odG1sKXsKICAgIGlmKGxvYWRpbmdfaHRtbCl7CiAgICB2YXIgaGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0sCgljc3NVUkwgPSAnaHR0cHM6Ly93d3cuenVpaHVpbWFpLm5ldC90bS9zdHlsZS5jc3MnLAoJbGlua1RhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKTsKCWxpbmtUYWcuaWQgPSAnZHluYW1pYy1zdHlsZSc7CglsaW5rVGFnLmhyZWYgPSBjc3NVUkw7CglsaW5rVGFnLnNldEF0dHJpYnV0ZSgncmVsJywnc3R5bGVzaGVldCcpOwoJbGlua1RhZy5zZXRBdHRyaWJ1dGUoJ21lZGlhJywnYWxsJyk7CglsaW5rVGFnLnNldEF0dHJpYnV0ZSgndHlwZScsJ3RleHQvY3NzJyk7CgloZWFkLmFwcGVuZENoaWxkKGxpbmtUYWcpOwoJdmFyIGdvb2RzX2lkID0gZ2V0UXVlcnlTdHJpbmcoJ2lkJyk7Cgl2YXIgemhtX3VybCA9ICdodHRwczovL3d3dy56dWlodWltYWkubmV0L3ZyaHIvaW5kZXgucGhwJzsKCWlmKGdvb2RzX2lkKXsKCgkJJCgnI0pfTGlua0Jhc2tldCcpLnBhcmVudCgpLmFmdGVyKGxvYWRpbmdfaHRtbCk7CgkJJCgnLkpfTGlua0FkZCcpLnBhcmVudCgpLmFmdGVyKGxvYWRpbmdfaHRtbCk7CgkJaWYod2luZG93LmxvY2F0aW9uLmhvc3Quc2VhcmNoKCd0YW9iYW8uY29tJykgIT0gLTEpewoJCQkkKCcjemhtX3RhYmxlJykuYWRkQ2xhc3MoJ3pobV90YWJfdGFvYmFvJyk7CgkJfWVsc2V7CgkJCSQoJyN6aG1fdGFibGUnKS5hZGRDbGFzcygnemhtX3RhYl90bWFsbCcpOwoJCX0KCgkJJC5nZXQoemhtX3VybCx7Z29vZHNfaWQ6Z29vZHNfaWR9LGZ1bmN0aW9uKGRhdGEpewoJCQkkKCcjemhtX2Rpdl9zJykuaHRtbChkYXRhKTsKCQkJJCgnI3pobV9kaXZfcycpLmh0bWwoZGF0YSk7CgkJCWlmKHdpbmRvdy5sb2NhdGlvbi5ob3N0LnNlYXJjaCgndGFvYmFvLmNvbScpICE9IC0xKXsKCQkJCSQoJyN6aG1fdGFibGUnKS5hZGRDbGFzcygnemhtX3RhYl90YW9iYW8nKTsKCQkJfWVsc2V7CgkJCQkkKCcjemhtX3RhYmxlJykuYWRkQ2xhc3MoJ3pobV90YWJfdG1hbGwnKTsKCQkJfQoJCX0pOwoJfQogICAgfQogICAgfSk7CiAgICB9CgoJdmFyIHBsYXlfdXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWY7Cgl2YXIgYXJyID0gbmV3IEFycmF5KCk7CglhcnIgPSBwbGF5X3VybC5zcGxpdCgnPycpCgl2YXIgZ2V0X3VybCA9IGFyclswXTsKCWlmKGdldF91cmwuaW5kZXhPZignZWdndm9kLmNuJykgPT0gLTEpewoJCXZhciBqeF90aXRsZT1uZXcgQXJyYXkoKQoJCWp4X3RpdGxlWzBdPSJ5b3VrdS5jb20iCgkJanhfdGl0bGVbMV09ImlxaXlpLmNvbSIKCQlqeF90aXRsZVsyXT0ibGUuY29tIgoJCWp4X3RpdGxlWzNdPSJxcS5jb20iCgkJanhfdGl0bGVbNF09InR1ZG91LmNvbSIKCQlqeF90aXRsZVs1XT0ibWd0di5jb20iCgkJanhfdGl0bGVbNl09InNvaHUuY29tIgoJCWp4X3RpdGxlWzddPSJhY2Z1bi5jbiIKCQlqeF90aXRsZVs4XT0iYmlsaWJpbGkuY29tIgoJCWp4X3RpdGxlWzldPSJwcHR2LmNvbSIKCQlqeF90aXRsZVsxMF09ImJhb2ZlbmcuY29tIgoJCWp4X3RpdGxlWzExXT0ieWlueXVldGFpLmNvbSIKCQlqeF90aXRsZVsxMl09Indhc3UuY24iCgkJdmFyIHRpdGxlX3Jlc3VsdCA9IGZhbHNlOwoJCWZvcih2YXIgbj0wO248anhfdGl0bGUubGVuZ3RoO24rKyl7CgkJCWlmKGdldF91cmwuaW5kZXhPZihqeF90aXRsZVtuXSkhPSAtMSl7CgkJCQl2YXIgemhtX2h0bWwgPSAiPGRpdiBocmVmPSdqYXZhc2NyaXB0OnZvaWQoMCknIHRhcmdldD0nX2JsYW5rJyBpZD0nemhtX2p4X3VybF9scicgc3R5bGU9J2N1cnNvcjpwb2ludGVyO3otaW5kZXg6OTg7ZGlzcGxheTpibG9jazt3aWR0aDozMHB4O2hlaWdodDozMHB4O2xpbmUtaGVpZ2h0OjMwcHg7cG9zaXRpb246Zml4ZWQ7bGVmdDowO3RvcDozMDBweDt0ZXh0LWFsaWduOmNlbnRlcjtvdmVyZmxvdzp2aXNpYmxlJz48aW1nIHNyYz0naHR0cHM6Ly9jZG4uODBub3RlLmNvbS92aXAuZ2lmJyBzdHlsZT0nd2lkdGg6NTBweCcgPjwvZGl2PiI7CgkJCQkkKCJib2R5IikuYXBwZW5kKHpobV9odG1sKTsKCQkJfQoJCX0KCQkkKCIjemhtX2p4X3VybF9sciIpLmNsaWNrKGZ1bmN0aW9uKCl7CgkJCXZhciBwbGF5X2p4X3VybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmOwogICAgICAgICAgICBpZigvQW5kcm9pZHx3ZWJPU3xpUGhvbmV8aVBvZHxCbGFja0JlcnJ5L2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkgewogICAgICAgICAgICAgICAgdmFyIG1vYmlsZV9odG1sID0gIjxkaXYgc3R5bGU9J21hcmdpbjowIGF1dG87cGFkZGluZzoxMHB4Oyc+IjsKICAgICAgICAgICAgICAgIG1vYmlsZV9odG1sICs9IjxidXR0b24gdHlwZT0nYnV0dG9uJyBzdHlsZT0ncG9zaXRpb246YWJzb2x1dGU7dG9wOjA7cmlnaHQ6MzBweDtmb250LXNpemU6MzBweDtsaW5lLWhlaWdodDogMTtjb2xvcjogIzAwMDt0ZXh0LXNoYWRvdzogMCAxcHggMCAjZmZmO2N1cnNvcjogcG9pbnRlcjtib3JkZXI6MDtiYWNrZ3JvdW5kOjAgMDsnIG9uY2xpY2s9J2xvY2F0aW9uLnJlbG9hZCgpOyc+w5c8L2J1dHRvbj4iOwogICAgICAgICAgICAgICAgbW9iaWxlX2h0bWwgKz0gIjxkaXY+PGlmcmFtZSBzcmM9J2h0dHBzOi8vd3d3LmVnZ3ZvZC5jbi9tb2JpbGUucGhwP3pobV9qeD0iK3BsYXlfanhfdXJsICsiJyBhbGxvd3RyYW5zcGFyZW5jeT10cnVlIGZyYW1lYm9yZGVyPScwJyBzY3JvbGxpbmc9J25vJyBhbGxvd2Z1bGxzY3JlZW49dHJ1ZSBhbGxvd3RyYW5zcGFyZW5jeT10cnVlIG5hbWU9J2p4X3BsYXknc3R5bGU9J2hlaWdodDo2MDBweDt3aWR0aDoxMDAlJz48L2lmcmFtZT48L2Rpdj4iCiAgICAgICAgICAgICAgICBtb2JpbGVfaHRtbCArPSAiPC9kaXY+IjsKICAgICAgICAgICAgICAgJCgiYm9keSIpLmh0bWwobW9iaWxlX2h0bWwpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgJC5nZXQoJ2h0dHBzOi8vd3d3LmVnZ3ZvZC5jbi9qeGNvZGUucGhwJyx7aW46ODE1NjY2OTl9LGZ1bmN0aW9uKGRhdGEpewogICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLmhyZWY9J2h0dHBzOi8vd3d3LmVnZ3ZvZC5jbi9qeC5waHA/bHJzcG09JytkYXRhKycmemhtX2p4PScrcGxheV9qeF91cmw7CiAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CgkJfSk7CgkJdmFyIG11c2ljX3RpdGxlPW5ldyBBcnJheSgpCgkJbXVzaWNfdGl0bGVbMF09IjE2My5jb20iCgkJbXVzaWNfdGl0bGVbMV09ICJ5LnFxLmNvbSIKCQltdXNpY190aXRsZVsyXT0gImt1Z291LmNvbSIKCQltdXNpY190aXRsZVszXT0gImt1d28uY24iCgkJbXVzaWNfdGl0bGVbNF09ICJ4aWFtaS5jb20iCgkJbXVzaWNfdGl0bGVbNV09ICJ0YWloZS5jb20iCgkJbXVzaWNfdGl0bGVbNl09ICIxdGluZy5jb20iCgkJbXVzaWNfdGl0bGVbN109ICJtaWd1LmNuIgoJCW11c2ljX3RpdGxlWzhdPSAicWluZ3RpbmcuZm0iCgkJbXVzaWNfdGl0bGVbOV09ICJsaXpoaS5mbSIKCQltdXNpY190aXRsZVsxMF09ICJ4aW1hbGF5YS5jb20iCgkJZm9yKHZhciBpPTA7aTxtdXNpY190aXRsZS5sZW5ndGg7aSsrKXsKCQkJaWYoZ2V0X3VybC5pbmRleE9mKG11c2ljX3RpdGxlW2ldKSE9IC0xKXsKCQkJCXZhciBtdXNpY19odG1sID0gIjxkaXYgaHJlZj0namF2YXNjcmlwdDp2b2lkKDApJyBpZD0nemhtX211c2ljX3VybF9scicgc3R5bGU9J2N1cnNvcjpwb2ludGVyO3otaW5kZXg6OTg7ZGlzcGxheTpibG9jazt3aWR0aDozMHB4O2hlaWdodDozMHB4O2xpbmUtaGVpZ2h0OjMwcHg7cG9zaXRpb246Zml4ZWQ7bGVmdDowO3RvcDozMDBweDt0ZXh0LWFsaWduOmNlbnRlcjsnPjxpbWcgc3JjPSdodHRwczovL2Nkbi44MG5vdGUuY29tL3ZpcC5naWYnIHN0eWxlPSd3aWR0aDo1MHB4JyA+PC9kaXY+IjsKCQkJCSQoImJvZHkiKS5hcHBlbmQobXVzaWNfaHRtbCk7CgkJCX0KCQl9CgkJJCgiI3pobV9tdXNpY191cmxfbHIiKS5jbGljayhmdW5jdGlvbigpewoJCQl2YXIgbXVzaWNfanhfdXJsID0gZW5jb2RlVVJJQ29tcG9uZW50KHdpbmRvdy5sb2NhdGlvbi5ocmVmKTsKCQkJd2luZG93Lm9wZW4oJ2h0dHA6Ly93d3cuZWdndm9kLmNuL211c2ljLz91cmw9JyttdXNpY19qeF91cmwpOwoJCX0pOwoJfQoJLy/ojrflj5Z1cmzlj4LmlbA7CglmdW5jdGlvbiBnZXRRdWVyeVN0cmluZyhlKSB7CgkJdmFyIHQgPSBuZXcgUmVnRXhwKCIoXnwmKSIgKyBlICsgIj0oW14mXSopKCZ8JCkiKTsKCQl2YXIgYSA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2guc3Vic3RyKDEpLm1hdGNoKHQpOwoJCWlmIChhICE9IG51bGwpIHJldHVybiBhWzJdOwoJCXJldHVybiAiIjsKCX0KfSkoKTsKLy/nn6XkuY7op4bpopEKKGFzeW5jICgpID0+IHsKICAgIGlmICh3aW5kb3cubG9jYXRpb24uaG9zdCA9PSAnd3d3LnpoaWh1LmNvbScpIHJldHVybjsKCiAgICBjb25zdCBwbGF5bGlzdEJhc2VVcmwgPSAnaHR0cHM6Ly9sZW5zLnpoaWh1LmNvbS9hcGkvdmlkZW9zLyc7CiAgICAvL2NvbnN0IHZpZGVvQmFzZVVybCA9ICdodHRwczovL3ZpZGVvLnpoaWh1LmNvbS92aWRlby8nOwogICAgY29uc3QgdmlkZW9JZCA9IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZS5zcGxpdCgnLycpLnBvcCgpOyAvLyDop4bpopFpZAogICAgY29uc3QgbWVudVN0eWxlID0gJ3RyYW5zZm9ybTpub25lICFpbXBvcnRhbnQ7IGxlZnQ6YXV0byAhaW1wb3J0YW50OyByaWdodDotMC41ZW0gIWltcG9ydGFudDsnOwogICAgY29uc3QgcGxheWVySWQgPSAncGxheWVyJzsKICAgIGNvbnN0IGNvdmVyU2VsZWN0b3IgPSAnIycgKyBwbGF5ZXJJZCArICcgPiBkaXY6Zmlyc3QtY2hpbGQgPiBkaXY6Zmlyc3QtY2hpbGQgPiBkaXY6bnRoLW9mLXR5cGUoMiknOwogICAgY29uc3QgY29udHJvbEJhclNlbGVjdG9yID0gJyMnICsgcGxheWVySWQgKyAnID4gZGl2OmZpcnN0LWNoaWxkID4gZGl2OmZpcnN0LWNoaWxkID4gZGl2Omxhc3QtY2hpbGQgPiBkaXY6bGFzdC1jaGlsZCA+IGRpdjpmaXJzdC1jaGlsZCc7CiAgICBjb25zdCBzdmdEb3dubG9hZCA9ICc8cGF0aCBkPSJNOS41LDQgSDE0LjUgVjEwIEgxNy44IEwxMiwxNS44IEw2LjIsMTAgSDkuNSBaIE02LjIsMTggSDE3LjggVjIwIEg2LjIgWiI+PC9wYXRoPic7CiAgICBsZXQgcGxheWVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQocGxheWVySWQpOwogICAgbGV0IHJlc29sdXRpb25NYXAgPSB7J+agh+a4hSc6ICdzZCcsICfpq5jmuIUnOiAnbGQnLCAn6LaF5riFJzogJ2hkJ307CiAgICBsZXQgdmlkZW9zID0gW107IC8vIOWtmOWCqOWQhOWIhui+qOeOh+eahOinhumikeS/oeaBrwogICAgbGV0IGRvd25sb2FkaW5nID0gZmFsc2U7CgogICAgZnVuY3Rpb24gZ2V0QnJvd2VySW5mbygpIHsKICAgICAgICBsZXQgYnJvd3NlciA9IChmdW5jdGlvbiAod2luZG93KSB7CiAgICAgICAgICAgIGxldCBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudDsKICAgICAgICAgICAgbGV0IG5hdmlnYXRvciA9IHdpbmRvdy5uYXZpZ2F0b3I7CiAgICAgICAgICAgIGxldCBhZ2VudCA9IG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTsKICAgICAgICAgICAgLy8gSUU4K+aUr+aMgS7ov5Tlm57mtY/op4jlmajmuLLmn5PlvZPliY3mlofmoaPmiYDnlKjnmoTmqKHlvI8KICAgICAgICAgICAgLy8gSUU2LElFNzp1bmRlZmluZWQuSUU4Ojgo5YW85a655qih5byP6L+U5ZueNykuSUU5Ojko5YW85a655qih5byP6L+U5ZueN3x8OCkKICAgICAgICAgICAgLy8gSUUxMDoxMCjlhbzlrrnmqKHlvI83fHw4fHw5KQogICAgICAgICAgICBsZXQgSUVNb2RlID0gZG9jdW1lbnQuZG9jdW1lbnRNb2RlOwogICAgICAgICAgICBsZXQgY2hyb21lID0gd2luZG93LmNocm9tZSB8fCBmYWxzZTsKICAgICAgICAgICAgbGV0IHN5c3RlbSA9IHsKICAgICAgICAgICAgICAgIC8vIHVzZXItYWdlbnQKICAgICAgICAgICAgICAgIGFnZW50OiBhZ2VudCwKICAgICAgICAgICAgICAgIC8vIOaYr+WQpuS4uklFCiAgICAgICAgICAgICAgICBpc0lFOiAvdHJpZGVudC8udGVzdChhZ2VudCksCiAgICAgICAgICAgICAgICAvLyBHZWNrb+WGheaguAogICAgICAgICAgICAgICAgaXNHZWNrbzogYWdlbnQuaW5kZXhPZignZ2Vja28nKSA+IDAgJiYgYWdlbnQuaW5kZXhPZignbGlrZSBnZWNrbycpIDwgMCwKICAgICAgICAgICAgICAgIC8vIHdlYmtpdOWGheaguAogICAgICAgICAgICAgICAgaXNXZWJraXQ6IGFnZW50LmluZGV4T2YoJ3dlYmtpdCcpID4gMCwKICAgICAgICAgICAgICAgIC8vIOaYr+WQpuS4uuagh+WHhuaooeW8jwogICAgICAgICAgICAgICAgaXNTdHJpY3Q6IGRvY3VtZW50LmNvbXBhdE1vZGUgPT09ICdDU1MxQ29tcGF0JywKICAgICAgICAgICAgICAgIC8vIOaYr+WQpuaUr+aMgXN1YnRpdGxlCiAgICAgICAgICAgICAgICBzdXBwb3J0U3ViVGl0bGU6IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RyYWNrJyBpbiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0cmFjaycpOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIC8vIOaYr+WQpuaUr+aMgXNjb3BlZAogICAgICAgICAgICAgICAgc3VwcG9ydFNjb3BlOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdzY29wZWQnIGluIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7CiAgICAgICAgICAgICAgICB9LAoKICAgICAgICAgICAgICAgIC8vIOiOt+WPlklF55qE54mI5pys5Y+3CiAgICAgICAgICAgICAgICBpZVZlcnNpb246IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICBsZXQgck1zaWUgPSAvKG1zaWVcc3x0cmlkZW50LipydjopKFtcdy5dKykvOwogICAgICAgICAgICAgICAgICAgIGxldCBtYXRjaCA9IHJNc2llLmV4ZWMoYWdlbnQpOwogICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaFsyXTsKICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBJRU1vZGU7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIC8vIE9wZXJh54mI5pys5Y+3CiAgICAgICAgICAgICAgICBvcGVyYVZlcnNpb246IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93Lm9wZXJhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWdlbnQubWF0Y2goL29wZXJhLihbXGQuXSspLylbMV07CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoYWdlbnQuaW5kZXhPZignb3ByJykgPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWdlbnQubWF0Y2goL29wclwvKFtcZC5dKykvKVsxXTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9OwoKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIC8vIOa1j+iniOWZqOexu+WeiyhJReOAgU9wZXJh44CBQ2hyb21l44CBU2FmYXJp44CBRmlyZWZveCkKICAgICAgICAgICAgICAgIHN5c3RlbS50eXBlID0gc3lzdGVtLmlzSUUgPyAnSUUnIDoKICAgICAgICAgICAgICAgICAgICB3aW5kb3cub3BlcmEgfHwgKGFnZW50LmluZGV4T2YoJ29wcicpID4gMCkgPyAnT3BlcmEnIDoKICAgICAgICAgICAgICAgICAgICAgICAgKGFnZW50LmluZGV4T2YoJ2Nocm9tZScpID4gMCkgPyAnQ2hyb21lJyA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3NhZmFyaeS5n+aPkOS+m+S6huS4k+mXqOeahOWIpOWumuaWueW8jwogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Lm9wZW5EYXRhYmFzZSA/ICdTYWZhcmknIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYWdlbnQuaW5kZXhPZignZmlyZWZveCcpID4gMCkgPyAnRmlyZWZveCcgOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndW5rbm93JzsKCiAgICAgICAgICAgICAgICAvLyDniYjmnKzlj7cKICAgICAgICAgICAgICAgIHN5c3RlbS52ZXJzaW9uID0gKHN5c3RlbS50eXBlID09PSAnSUUnKSA/IHN5c3RlbS5pZVZlcnNpb24oKSA6CiAgICAgICAgICAgICAgICAgICAgKHN5c3RlbS50eXBlID09PSAnRmlyZWZveCcpID8gYWdlbnQubWF0Y2goL2ZpcmVmb3hcLyhbXGQuXSspLylbMV0gOgogICAgICAgICAgICAgICAgICAgICAgICAoc3lzdGVtLnR5cGUgPT09ICdDaHJvbWUnKSA/IGFnZW50Lm1hdGNoKC9jaHJvbWVcLyhbXGQuXSspLylbMV0gOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgKHN5c3RlbS50eXBlID09PSAnT3BlcmEnKSA/IHN5c3RlbS5vcGVyYVZlcnNpb24oKSA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHN5c3RlbS50eXBlID09PSAnU2FmYXJpJykgPyBhZ2VudC5tYXRjaCgvdmVyc2lvblwvKFtcZC5dKykvKVsxXSA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICcwJzsKCiAgICAgICAgICAgICAgICAvLyDmtY/op4jlmajlpJblo7MKICAgICAgICAgICAgICAgIHN5c3RlbS5zaGVsbCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICBpZiAoYWdlbnQuaW5kZXhPZignZWRnZScpID4gMCkgewogICAgICAgICAgICAgICAgICAgICAgICBzeXN0ZW0udmVyc2lvbiA9IGFnZW50Lm1hdGNoKC9lZGdlXC8oW1xkLl0rKS8pWzFdIHx8IHN5c3RlbS52ZXJzaW9uOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ0VkZ2UnOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAvLyDpgajmuLjmtY/op4jlmagKICAgICAgICAgICAgICAgICAgICBpZiAoYWdlbnQuaW5kZXhPZignbWF4dGhvbicpID4gMCkgewogICAgICAgICAgICAgICAgICAgICAgICBzeXN0ZW0udmVyc2lvbiA9IGFnZW50Lm1hdGNoKC9tYXh0aG9uXC8oW1xkLl0rKS8pWzFdIHx8IHN5c3RlbS52ZXJzaW9uOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ01heHRob24nOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAvLyBRUea1j+iniOWZqAogICAgICAgICAgICAgICAgICAgIGlmIChhZ2VudC5pbmRleE9mKCdxcWJyb3dzZXInKSA+IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3lzdGVtLnZlcnNpb24gPSBhZ2VudC5tYXRjaCgvcXFicm93c2VyXC8oW1xkLl0rKS8pWzFdIHx8IHN5c3RlbS52ZXJzaW9uOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1FRQnJvd3Nlcic7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIC8vIOaQnOeLl+a1j+iniOWZqAogICAgICAgICAgICAgICAgICAgIGlmIChhZ2VudC5pbmRleE9mKCdzZSAyLngnKSA+IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICfmkJzni5fmtY/op4jlmagnOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgLy8gQ2hyb21lOuS5n+WPr+S7peS9v+eUqHdpbmRvdy5jaHJvbWUgJiYgd2luZG93LmNocm9tZS53ZWJzdG9yZeWIpOaWrQogICAgICAgICAgICAgICAgICAgIGlmIChjaHJvbWUgJiYgc3lzdGVtLnR5cGUgIT09ICdPcGVyYScpIHsKICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGV4dGVybmFsID0gd2luZG93LmV4dGVybmFsOwogICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2xpZW50SW5mbyA9IHdpbmRvdy5jbGllbnRJbmZvcm1hdGlvbjsKICAgICAgICAgICAgICAgICAgICAgICAgLy8g5a6i5oi356uv6K+t6KiAOnpoLWNuLHpoLjM2MOS4i+mdouS8mui/lOWbnnVuZGVmaW5lZAogICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2xpZW50TGFuZ3VhZ2UgPSBjbGllbnRJbmZvLmxhbmd1YWdlczsKCiAgICAgICAgICAgICAgICAgICAgICAgIC8vIOeMjuixuea1j+iniOWZqDrmiJbogIVhZ2VudC5pbmRleE9mKCJsYmJyb3dzZXIiKT4wCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChleHRlcm5hbCAmJiAnTGllYmFvR2V0VmVyc2lvbicgaW4gZXh0ZXJuYWwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnTEJCcm93c2VyJzsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAvLyDnmb7luqbmtY/op4jlmagKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFnZW50LmluZGV4T2YoJ2JpZHVicm93c2VyJykgPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzeXN0ZW0udmVyc2lvbiA9IGFnZW50Lm1hdGNoKC9iaWR1YnJvd3NlclwvKFtcZC5dKykvKVsxXSB8fAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFnZW50Lm1hdGNoKC9jaHJvbWVcLyhbXGQuXSspLylbMV07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ0JhaUR1QnJvd3Nlcic7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgLy8gMzYw5p6B6YCf5rWP6KeI5Zmo5ZKMMzYw5a6J5YWo5rWP6KeI5ZmoCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzeXN0ZW0uc3VwcG9ydFN1YlRpdGxlKCkgJiYgdHlwZW9mIGNsaWVudExhbmd1YWdlID09PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN0b3JlS2V5TGVuID0gT2JqZWN0LmtleXMoY2hyb21lLndlYnN0b3JlKS5sZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdjhMb2NhbGUgPSAndjhMb2NhbGUnIGluIHdpbmRvdzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdG9yZUtleUxlbiA+IDEgPyAnMzYw5p6B6YCf5rWP6KeI5ZmoJyA6ICczNjDlronlhajmtY/op4jlmagnOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnQ2hyb21lJzsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN5c3RlbS50eXBlOwogICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAvLyDmtY/op4jlmajlkI3np7Ao5aaC5p6c5piv5aOz5rWP6KeI5ZmoLOWImei/lOWbnuWjs+WQjeensCkKICAgICAgICAgICAgICAgIHN5c3RlbS5uYW1lID0gc3lzdGVtLnNoZWxsKCk7CiAgICAgICAgICAgICAgICAvLyDlr7nniYjmnKzlj7fov5vooYzov4fmu6Tov4flpITnkIYKICAgICAgICAgICAgICAgIC8vIFN5c3RlbS52ZXJzaW9uID0gU3lzdGVtLnZlcnNpb25GaWx0ZXIoU3lzdGVtLnZlcnNpb24pOwoKICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coZS5tZXNzYWdlKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgcmV0dXJuIHN5c3RlbTsKCiAgICAgICAgfSkod2luZG93KTsKCiAgICAgICAgaWYgKGJyb3dzZXIubmFtZSA9PSB1bmRlZmluZWQgfHwgYnJvd3Nlci5uYW1lID09ICcnKSB7CiAgICAgICAgICAgIGJyb3dzZXIubmFtZSA9ICdVbmtub3duJzsKICAgICAgICAgICAgYnJvd3Nlci52ZXJzaW9uID0gJ1Vua25vd24nOwogICAgICAgIH0KICAgICAgICBlbHNlIGlmIChicm93c2VyLnZlcnNpb24gPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgIGJyb3dzZXIudmVyc2lvbiA9ICdVbmtub3duJzsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIGJyb3dzZXI7CiAgICB9CgogICAgZnVuY3Rpb24gZmV0Y2hSZXRyeSh1cmwsIG9wdGlvbnMgPSB7fSwgdGltZXMgPSAxLCBkZWxheSA9IDEwMDAsIGNoZWNrU3RhdHVzID0gdHJ1ZSkgewogICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7CiAgICAgICAgICAgIC8vIGZldGNoIOaIkOWKn+WkhOeQhuWHveaVsAogICAgICAgICAgICBmdW5jdGlvbiBzdWNjZXNzKHJlcykgewogICAgICAgICAgICAgICAgaWYgKGNoZWNrU3RhdHVzICYmICFyZXMub2spIHsKICAgICAgICAgICAgICAgICAgICBmYWlsdXJlKHJlcyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBlbHNlIHsKICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJlcyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIOWNleasoeWksei0peWkhOeQhuWHveaVsAogICAgICAgICAgICBmdW5jdGlvbiBmYWlsdXJlKGVycm9yKSB7CiAgICAgICAgICAgICAgICB0aW1lcy0tOwoKICAgICAgICAgICAgICAgIGlmICh0aW1lcykgewogICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZmV0Y2hVcmwsIGRlbGF5KTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGVsc2UgewogICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnJvcik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIOaAu+S9k+Wksei0peWkhOeQhuWHveaVsAogICAgICAgICAgICBmdW5jdGlvbiBmaW5hbEhhbmRsZXIoZXJyb3IpIHsKICAgICAgICAgICAgICAgIHRocm93IGVycm9yOwogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiBmZXRjaFVybCgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBmZXRjaCh1cmwsIG9wdGlvbnMpCiAgICAgICAgICAgICAgICAgICAgLnRoZW4oc3VjY2VzcykKICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZmFpbHVyZSkKICAgICAgICAgICAgICAgICAgICAuY2F0Y2goZmluYWxIYW5kbGVyKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZmV0Y2hVcmwoKTsKICAgICAgICB9KTsKICAgIH0KCiAgICAvLyDkuIvovb3mjIflrpp1cmznmoTotYTmupAKICAgIGFzeW5jIGZ1bmN0aW9uIGRvd25sb2FkVXJsKHVybCwgbmFtZSA9IChuZXcgRGF0ZSgpKS52YWx1ZU9mKCkgKyAnLm1wNCcpIHsKICAgICAgICBsZXQgYnJvd3NlciA9IGdldEJyb3dlckluZm8oKTsKCiAgICAgICAgLy8gR3JlYXNlbW9ua2V5IOmcgOimgeaKiiB1cmwg6L2s5Li6IGJsb2JVcmwKICAgICAgICBpZiAoR01faW5mby5zY3JpcHRIYW5kbGVyID09ICdHcmVhc2Vtb25rZXknKSB7CiAgICAgICAgICAgIGxldCByZXMgPSBhd2FpdCBmZXRjaFJldHJ5KHVybCk7CiAgICAgICAgICAgIGxldCBibG9iID0gYXdhaXQgcmVzLmJsb2IoKTsKICAgICAgICAgICAgdXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTsKICAgICAgICB9CgogICAgICAgIC8vIENocm9tZSDlj6/ku6Xkvb/nlKggVGFtcGVybW9ua2V5IOeahCBHTV9kb3dubG9hZCDlh73mlbDnu5Xov4cgQ1NQKENvbnRlbnQgU2VjdXJpdHkgUG9saWN5KSDnmoTpmZDliLYKICAgICAgICBpZiAod2luZG93LkdNX2Rvd25sb2FkKSB7CiAgICAgICAgICAgIEdNX2Rvd25sb2FkKHt1cmwsIG5hbWV9KTsKICAgICAgICB9CiAgICAgICAgZWxzZSB7CiAgICAgICAgICAgIC8vIGZpcmVmb3gg6ZyA6KaB56aB55SoIENTUCwgYWJvdXQ6Y29uZmlnIC0+IHNlY3VyaXR5LmNzcC5lbmFibGUgPT4gZmFsc2UKICAgICAgICAgICAgbGV0IGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7CiAgICAgICAgICAgIGEuaHJlZiA9IHVybDsKICAgICAgICAgICAgYS5kb3dubG9hZCA9IG5hbWU7CiAgICAgICAgICAgIC8vIGEudGFyZ2V0ID0gJ19ibGFuayc7CiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYSk7CiAgICAgICAgICAgIGEuY2xpY2soKTsKICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChhKTsKCiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgVVJMLnJldm9rZU9iamVjdFVSTCh1cmwpOwogICAgICAgICAgICB9LCAxMDApOwogICAgICAgIH0KICAgIH0KCiAgICBmdW5jdGlvbiBodW1hblNpemUoc2l6ZSkgewogICAgICAgIGxldCBuID0gTWF0aC5sb2coc2l6ZSkgLyBNYXRoLmxvZygxMDI0KSB8IDA7CiAgICAgICAgcmV0dXJuIChzaXplIC8gTWF0aC5wb3coMTAyNCwgbikpLnRvRml4ZWQoMCkgKyAnICcgKyAobiA/ICdLTUdUUEVaWSdbLS1uXSArICdCJyA6ICdCeXRlcycpOwogICAgfQoKICAgIGlmICghcGxheWVyKSByZXR1cm47CgogICAgLy8g6I635Y+W6KeG6aKR5L+h5oGvCiAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaFJldHJ5KHBsYXlsaXN0QmFzZVVybCArIHZpZGVvSWQsIHsKICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICdyZWZlcmVyJzogJ3JlZmVyZXJCYXNlVXJsICsgdmlkZW9JZCcsCiAgICAgICAgICAgICdhdXRob3JpemF0aW9uJzogJ29hdXRoIGMzY2VmN2M2NmExODQzZjhiM2E5ZTZhMWUzMTYwZTIwJyAvLyBpbiB6cGxheWVyLm1pbi5qcyBvZiB6aGlodQogICAgICAgIH0KICAgIH0sIDMpOwogICAgY29uc3QgdmlkZW9JbmZvID0gYXdhaXQgcmVzLmpzb24oKTsKCiAgICAvLyDojrflj5bkuI3lkIzliIbovqjnjofop4bpopHnmoTkv6Hmga8KICAgIGZvciAobGV0IFtrZXksIHZpZGVvXSBvZiBPYmplY3QuZW50cmllcyh2aWRlb0luZm8ucGxheWxpc3QpKSB7CiAgICAgICAgdmlkZW8ubmFtZSA9IGtleTsKCiAgICAgICAgaWYgKCF2aWRlb3MuZmluZCh2ID0+IHYud2lkdGggPT0gdmlkZW8ud2lkdGgpKSB7CiAgICAgICAgICAgIHZpZGVvcy5wdXNoKHZpZGVvKTsKICAgICAgICB9CiAgICB9CgogICAgLy8g5oyJ5YiG6L6o546H5aSn5bCP5o6S5bqPCiAgICB2aWRlb3MgPSB2aWRlb3Muc29ydChmdW5jdGlvbiAodjEsIHYyKSB7CiAgICAgICAgcmV0dXJuIHYxLndpZHRoID09IHYyLndpZHRoID8gMCA6ICh2MS53aWR0aCA+IHYyLndpZHRoID8gMSA6IC0xKTsKICAgIH0pLnJldmVyc2UoKTsKCiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Ob2RlSW5zZXJ0ZWQnLCAoZXZ0KSA9PiB7CiAgICAgICAgbGV0IGRvbUNvbnRyb2xCYXIgPSBldnQucmVsYXRlZE5vZGUucXVlcnlTZWxlY3RvcignOnNjb3BlID4gZGl2Omxhc3QtY2hpbGQgPiBkaXY6Zmlyc3QtY2hpbGQnKTsKICAgICAgICBpZiAoIWRvbUNvbnRyb2xCYXIgfHwgZG9tQ29udHJvbEJhci5xdWVyeVNlbGVjdG9yKCcuZG93bmxvYWQnKSkgcmV0dXJuOwoKICAgICAgICBsZXQgZG9tRnVsbFNjcmVlbkJ0biA9IGRvbUNvbnRyb2xCYXIucXVlcnlTZWxlY3RvcignOnNjb3BlID4gZGl2Om50aC1sYXN0LW9mLXR5cGUoMSknKTsKICAgICAgICBsZXQgZG9tUmVzb2x1dGlvbkJ0biA9IGRvbUNvbnRyb2xCYXIucXVlcnlTZWxlY3RvcignOnNjb3BlID4gZGl2Om50aC1sYXN0LW9mLXR5cGUoMyknKTsKICAgICAgICBsZXQgZG9tRG93bmxvYWRCdG4sIGRlZmF1bHRSZXNvbHV0aW9uLCBidXR0b25zOwogICAgICAgIGlmICghZG9tRnVsbFNjcmVlbkJ0biB8fCAhZG9tRnVsbFNjcmVlbkJ0bi5xdWVyeVNlbGVjdG9yKCdidXR0b24nKSkgcmV0dXJuOwoKICAgICAgICAvLyDlhYvpmobliIbovqjnjofoj5zljZXmiJblhajlsY/mjInpkq7kuLrkuIvovb3mjInpkq4KICAgICAgICBkb21Eb3dubG9hZEJ0biA9IChkb21SZXNvbHV0aW9uQnRuICYmIChkb21SZXNvbHV0aW9uQnRuLmNsYXNzTmFtZSA9PSBkb21GdWxsU2NyZWVuQnRuLmNsYXNzTmFtZSkpCiAgICAgICAgICAgID8gZG9tUmVzb2x1dGlvbkJ0bi5jbG9uZU5vZGUodHJ1ZSkKICAgICAgICAgICAgOiBkb21GdWxsU2NyZWVuQnRuLmNsb25lTm9kZSh0cnVlKTsKCiAgICAgICAgZGVmYXVsdFJlc29sdXRpb24gPSBkb21Eb3dubG9hZEJ0bi5xdWVyeVNlbGVjdG9yKCdidXR0b24nKS5pbm5lclRleHQ7CgogICAgICAgIC8vIOeUn+aIkOS4i+i9veaMiemSruWbvuaghwogICAgICAgIGRvbURvd25sb2FkQnRuLnF1ZXJ5U2VsZWN0b3IoJ2J1dHRvbjpmaXJzdC1jaGlsZCcpLm91dGVySFRNTCA9IGRvbUZ1bGxTY3JlZW5CdG4uY2xvbmVOb2RlKHRydWUpLnF1ZXJ5U2VsZWN0b3IoJ2J1dHRvbicpLm91dGVySFRNTDsKICAgICAgICBkb21Eb3dubG9hZEJ0bi5xdWVyeVNlbGVjdG9yKCdzdmcnKS5pbm5lckhUTUwgPSBzdmdEb3dubG9hZDsKICAgICAgICBkb21Eb3dubG9hZEJ0bi5jbGFzc05hbWUgPSBkb21Eb3dubG9hZEJ0bi5jbGFzc05hbWUgKyAnIGRvd25sb2FkJzsKCiAgICAgICAgYnV0dG9ucyA9IGRvbURvd25sb2FkQnRuLnF1ZXJ5U2VsZWN0b3JBbGwoJ2J1dHRvbicpOwoKICAgICAgICAvLyBidXR0b24g5YWD57Sg5re75Yqg5a+55bqU55qE5LiL6L295Zyw5Z2ACiAgICAgICAgYnV0dG9ucy5mb3JFYWNoKGRvbSA9PiB7CiAgICAgICAgICAgIGxldCB2aWRlbyA9IHZpZGVvcy5maW5kKHYgPT4gdi5uYW1lID09IHJlc29sdXRpb25NYXBbZG9tLmlubmVyVGV4dCB8fCBkZWZhdWx0UmVzb2x1dGlvbl0pOwogICAgICAgICAgICB2aWRlbyA9IHZpZGVvIHx8IHZpZGVvc1swXTsKICAgICAgICAgICAgZG9tLmRhdGFzZXQudmlkZW8gPSB2aWRlby5wbGF5X3VybDsKICAgICAgICAgICAgaWYgKGRvbS5pbm5lclRleHQpIHsKICAgICAgICAgICAgICAgIChkb20uaW5uZXJUZXh0ID0gYCR7ZG9tLmlubmVyVGV4dH0gKCR7aHVtYW5TaXplKHZpZGVvLnNpemUpfSlgKTsKICAgICAgICAgICAgfQogICAgICAgICAgICBlbHNlIGlmIChidXR0b25zLmxlbmd0aCA9PSAxKSB7CiAgICAgICAgICAgICAgICBkb20ubmV4dFNpYmxpbmcucXVlcnlTZWxlY3RvcignZGl2JykuaW5uZXJUZXh0ID0gaHVtYW5TaXplKHZpZGVvLnNpemUpOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIC8vIOm8oOagh+S6i+S7tiAtIOaYvuekuuiPnOWNlQogICAgICAgIGRvbURvd25sb2FkQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJlbnRlcicsICgpID0+IHsKICAgICAgICAgICAgbGV0IGRvbU1lbnUgPSBkb21Eb3dubG9hZEJ0bi5xdWVyeVNlbGVjdG9yKCdkaXY6bnRoLW9mLXR5cGUoMSknKTsKICAgICAgICAgICAgaWYgKGRvbU1lbnUpIHsKICAgICAgICAgICAgICAgIGRvbU1lbnUuc3R5bGUuY3NzVGV4dCA9IG1lbnVTdHlsZSArICdvcGFjaXR5OjEgIWltcG9ydGFudDsgdmlzaWJpbGl0eTp2aXNpYmxlICFpbXBvcnRhbnQnOwogICAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIC8vIOm8oOagh+S6i+S7tiAtIOmakOiXj+iPnOWNlQogICAgICAgIGRvbURvd25sb2FkQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJsZWF2ZScsICgpID0+IHsKICAgICAgICAgICAgbGV0IGRvbU1lbnUgPSBkb21Eb3dubG9hZEJ0bi5xdWVyeVNlbGVjdG9yKCdkaXY6bnRoLW9mLXR5cGUoMSknKTsKICAgICAgICAgICAgaWYgKGRvbU1lbnUpIHsKICAgICAgICAgICAgICAgIGRvbU1lbnUuc3R5bGUuY3NzVGV4dCA9IG1lbnVTdHlsZTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICAvLyDpvKDmoIfkuovku7YgLSDpgInmi6noj5zljZXpobkKICAgICAgICBkb21Eb3dubG9hZEJ0bi5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVydXAnLCBldmVudCA9PiB7CiAgICAgICAgICAgIGlmIChkb3dubG9hZGluZykgewogICAgICAgICAgICAgICAgYWxlcnQoJ+W9k+WJjeato+WcqOaJp+ihjOS4i+i9veS7u+WKoe+8jOivt+etieW+heS7u+WKoeWujOaIkOOAgicpOwogICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICB9CgogICAgICAgICAgICBsZXQgZSA9IGV2ZW50LnNyY0VsZW1lbnQgfHwgZXZlbnQudGFyZ2V0OwoKICAgICAgICAgICAgd2hpbGUgKGUudGFnTmFtZSAhPSAnQlVUVE9OJykgewogICAgICAgICAgICAgICAgZSA9IGUucGFyZW50Tm9kZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZG93bmxvYWRVcmwoZS5kYXRhc2V0LnZpZGVvKTsKICAgICAgICB9KTsKCiAgICAgICAgLy8g5pi+56S65LiL6L295oyJ6ZKuCiAgICAgICAgZG9tQ29udHJvbEJhci5hcHBlbmRDaGlsZChkb21Eb3dubG9hZEJ0bik7CgogICAgfSk7Cn0pKCk7","requires":[{"meta":{"name":"jquery.min.js","url":"https://cdn.jsdelivr.net/npm/jquery@3.2.1/dist/jquery.min.js","ts":1595498418485,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"sweetalert2@9","url":"https://cdn.jsdelivr.net/npm/sweetalert2@9","ts":1595498418493,"mimetype":"text/plain"},"source":""}]},{"name":"【玩的嗨】VIP工具箱,全网VIP视频免费破解去广告,一站式音乐搜索下载,获取B站封面,上学吧答案获取等众多功能聚合 2020-06-01 更新，报错请及时反馈","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["shangxueba365.com","api.wandhi.com"],"orig_excludes":["*://*.wandhi.com/*"],"orig_includes":["*://m.youku.com/v*","*://m.youku.com/a*","*://v.youku.com/v_*","*://*.iqiyi.com/v_*","*://*.iqiyi.com/w_*","*://*.iqiyi.com/a_*","*://*.iqiyi.com/adv*","*://*.le.com/ptv/vplay/*","*v.qq.com/x/cover/*","*v.qq.com/x/page/*","*v.qq.com/*play*","*v.qq.com/cover*","*://*.tudou.com/listplay/*","*://*.tudou.com/albumplay/*","*://*.tudou.com/programs/view/*","*://*.tudou.com/v*","*://*.mgtv.com/b/*","*://film.sohu.com/album/*","*://tv.sohu.com/v/*","*://*.acfun.cn/v/*","*://*.bilibili.com/video/*","*://*.bilibili.com/anime/*","*://*.bilibili.com/bangumi/play/*","*://*.pptv.com/show/*","*://*.baofeng.com/play/*","*://*.wasu.cn/Play/show*","*://v.yinyuetai.com/video/*","*://v.yinyuetai.com/playlist/*","*://*.wasu.cn/Play/show/*","*://music.taihe.com/song*","*://item.taobao.com/*","*://detail.tmall.com/*","*://detail.tmall.hk/*","*://item.jd.com/*","*://music.163.com/song*","*://music.163.com/m/song*","*://y.qq.com/*","*://*.kugou.com/*","*://*.kuwo.cn/*","*://*.xiami.com/*","*://music.taihe.com/*","*://*.1ting.com/player*","*://www.qingting.fm/*","*://www.lizhi.fm/*","*://music.migu.cn/*","*://www.shangxueba.com/ask/*.html","*://www.ximalaya.com/*","*://www.shangxueba.com/ask/*.html","*://pan.baidu.com/disk/home*","*://yun.baidu.com/disk/home*","*://pan.baidu.com/s/*","*://yun.baidu.com/s/*","*://pan.baidu.com/share/link*","*://yun.baidu.com/share/link*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-end","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1591001487038,"data":{}},"enabled":false,"position":4,"file_url":"https://greasyfork.org/scripts/384538-%E7%8E%A9%E7%9A%84%E5%97%A8-vip%E5%B7%A5%E5%85%B7%E7%AE%B1-%E5%85%A8%E7%BD%91vip%E8%A7%86%E9%A2%91%E5%85%8D%E8%B4%B9%E7%A0%B4%E8%A7%A3%E5%8E%BB%E5%B9%BF%E5%91%8A-%E4%B8%80%E7%AB%99%E5%BC%8F%E9%9F%B3%E4%B9%90%E6%90%9C%E7%B4%A2%E4%B8%8B%E8%BD%BD-%E8%8E%B7%E5%8F%96b%E7%AB%99%E5%B0%81%E9%9D%A2-%E4%B8%8A%E5%AD%A6%E5%90%A7%E7%AD%94%E6%A1%88%E8%8E%B7%E5%8F%96%E7%AD%89%E4%BC%97%E5%A4%9A%E5%8A%9F%E8%83%BD%E8%81%9A%E5%90%88-2020-06-01-%E6%9B%B4%E6%96%B0-%E6%8A%A5%E9%94%99%E8%AF%B7%E5%8F%8A%E6%97%B6%E5%8F%8D%E9%A6%88/code/%E3%80%90%E7%8E%A9%E7%9A%84%E5%97%A8%E3%80%91VIP%E5%B7%A5%E5%85%B7%E7%AE%B1,%E5%85%A8%E7%BD%91VIP%E8%A7%86%E9%A2%91%E5%85%8D%E8%B4%B9%E7%A0%B4%E8%A7%A3%E5%8E%BB%E5%B9%BF%E5%91%8A,%E4%B8%80%E7%AB%99%E5%BC%8F%E9%9F%B3%E4%B9%90%E6%90%9C%E7%B4%A2%E4%B8%8B%E8%BD%BD,%E8%8E%B7%E5%8F%96B%E7%AB%99%E5%B0%81%E9%9D%A2,%E4%B8%8A%E5%AD%A6%E5%90%A7%E7%AD%94%E6%A1%88%E8%8E%B7%E5%8F%96%E7%AD%89%E4%BC%97%E5%A4%9A%E5%8A%9F%E8%83%BD%E8%81%9A%E5%90%88%202020-06-01%20%E6%9B%B4%E6%96%B0%EF%BC%8C%E6%8A%A5%E9%94%99%E8%AF%B7%E5%8F%8A%E6%97%B6%E5%8F%8D%E9%A6%88.user.js","uuid":"412a8e03-cbd2-48ac-baa9-ec376176780a","source":"","requires":[{"meta":{"name":"jquery.min.js","url":"https://lib.baomitu.com/jquery/1.12.4/jquery.min.js","ts":1591001487141,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"sweetalert2.min.js","url":"https://cdn.jsdelivr.net/npm/sweetalert2@9.14.0/dist/sweetalert2.min.js","ts":1591001487099,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"echarts.min.js","url":"https://lib.baomitu.com/echarts/4.6.0/echarts.min.js","ts":1591001487213,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"layer.js","url":"https://lib.baomitu.com/layer/2.3/layer.js","ts":1591001487157,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"Reflect.min.js","url":"https://lib.baomitu.com/reflect-metadata/0.1.13/Reflect.min.js","ts":1591001487158,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"vue.min.js","url":"https://cdn.jsdelivr.net/npm/vue@2.6.11/dist/vue.min.js","ts":1591001487094,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"vuex.min.js","url":"https://cdn.jsdelivr.net/npm/vuex@3.4.0/dist/vuex.min.js","ts":1591001487096,"mimetype":"text/javascript"},"source":""}]},{"name":"破解VIP会员视频集合","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":["*://*.bilibili.com/blackboard/*"],"orig_includes":[],"orig_matches":["*://*.iqiyi.com/*","*://*.youku.com/*","*://*.le.com/*","*://*.letv.com/*","*://v.qq.com/*","*://*.tudou.com/*","*://*.mgtv.com/*","*://film.sohu.com/*","*://tv.sohu.com/*","*://*.acfun.cn/*","*://*.bilibili.com/*","*://vip.1905.com/play/*","*://*.pptv.com/*","*://v.yinyuetai.com/video/*","*://v.yinyuetai.com/playlist/*","*://*.fun.tv/vplay/*","*://*.wasu.cn/Play/show/*","*://*.56.com/*"],"orig_noframes":true,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":["/(^[^:\\/#\\?]*:\\/\\/([^#\\?\\/]*\\.)?www\\.bilibili\\.com(:[0-9]{1,5})?\\/.*$)/"],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"topSet":"o{\"wwwbilibilicom\":50}"},"ts":1591001864196},"enabled":false,"position":5,"file_url":"https://greasyfork.org/scripts/27530-%E7%A0%B4%E8%A7%A3vip%E4%BC%9A%E5%91%98%E8%A7%86%E9%A2%91%E9%9B%86%E5%90%88/code/%E7%A0%B4%E8%A7%A3VIP%E4%BC%9A%E5%91%98%E8%A7%86%E9%A2%91%E9%9B%86%E5%90%88.user.js","uuid":"92471d8d-a0c1-48a8-a29b-fe69e0420499","source":"","requires":[{"meta":{"name":"vue.runtime.min.js","url":"https://cdn.jsdelivr.net/npm/vue@2.6.11/dist/vue.runtime.min.js","ts":1591001859142,"mimetype":"text/javascript"},"source":""}]},{"name":"bilibili merged flv+mp4+ass+enhance","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["*://www.bilibili.com/video/av*","*://www.bilibili.com/video/bv*","*://www.bilibili.com/video/BV*","*://bangumi.bilibili.com/anime/*/play*","*://www.bilibili.com/bangumi/play/ep*","*://www.bilibili.com/bangumi/play/ss*","*://www.bilibili.com/bangumi/media/md*","*://www.biligame.com/detail/*","*://vc.bilibili.com/video/*","*://www.bilibili.com/watchlater/"],"orig_noframes":null,"orig_run_at":"document-start","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1591003760908,"data":{}},"enabled":true,"position":6,"file_url":"https://greasyfork.org/scripts/372516-bilibili-merged-flv-mp4-ass-enhance/code/bilibili%20merged%20flv+mp4+ass+enhance.user.js","uuid":"cd6b8b06-371d-40ea-ad5d-916fef097d03","source":""},{"name":"2020!非解析!BiliBili清晰度破解","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["*://www.bilibili.com/*","*://xbeibeix.com/api/bilibili*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1591011319414,"data":{}},"enabled":false,"position":7,"uuid":"65719789-7bc0-4118-9c16-cb332306edd3","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAyMDIwIemdnuino+aekCFCaWxpQmlsaea4heaZsOW6puegtOinowovLyBAc3VwcG9ydFVSTCAgIGh0dHBzOi8vYmJzLmJsdWVhZ2xlLnRvcC9kLzMKLy8gQGhvbWVwYWdlICAgICBodHRwczovL2Jicy5ibHVlYWdsZS50b3AvZC8zCi8vIEBpY29uICAgICAgICAgZGF0YTppbWFnZS9qcGVnO2Jhc2U2NCwvOWovNEFBUVNrWkpSZ0FCQVFBQUFRQUJBQUQvMndDRUFBa0dCeE1QRUJVUEVCQVNEeEFRRWhBUUR4SVFFQkFRRUE4UUZoRWFGaFVTRnhVWUlDZ2dHQm9sR3hVVklURWhKU2tyTGk0dUZ4OHpPRE10TnlndExpc0JDZ29LRGcwT0d4QVFHaThtSHlVdEx5MHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMZi9BQUJFSUFPRUE0UU1CRVFBQ0VRRURFUUgveEFBYkFBRUFBZ01CQVFBQUFBQUFBQUFBQUFBQUFRWUVCUWNEQXYvRUFEOFFBQUlCQWdJRkNRWURCZ2NCQUFBQUFBQUJBZ01SQkFZRkVpRlJrUll4TWpSVFlYRnlzUk1WUVVKU2dSUWlvUWNqSkdLQ3dUTkRrckxSNGZDaS84UUFHd0VCQUFJREFRRUFBQUFBQUFBQUFBQUFBQVVHQVFNRUFnZi94QUF5RVFBQkF3TUJCZ1lCQkFJREFRQUFBQUFBQVFJREJBVVJVaElVSVRFMFVSTVZNak5CZ1hFaVlaR3hJNkZDUThFay85b0FEQU1CQUFJUkF4RUFQd0R1SUFBQUFBQUFBQUFBSWpKUG1hZmc3akJoRlJlUklNZ0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBRlJ6bG1HVkovaDZMdE5xODUvU3R5N3lXdDlFa242MzhpQXU5eGRGL2lqNS9LbGUwSG1Xcmg2bDV5ZFNuSi9uaTNkcitaRWhVMEVjcmYwcGhTSm9ycEpDL3dEV3VVWG1kSHdPTmhYZ3FsT1NsRmxka2lkRzdaY25FdUVNekptN2JGeWhrR3MyZ0FBQUFBQUFBQUFBRlF6UG12MmV0Unc3dk5iSlQrRWZEdkphaXQrM2gwbklyOXl1NlI1amk1OSt4cmN2WnNxUW5HblhscjA1UFYxbjA0dHZaZDdqcHE3Y3hXcTZOTUtoeVVGNGUxNk1sWEtMOC9KMENNcnE2MnA4eEFLbUMxSXVVeWhJTWdBQUFBQUFBQUFBQUFBQUFBQUFBcGVkTXZTbTNpYVMxckw4OFBtdHZSTVc2dGF4UERmL0FDVjI3MjU3bDhhUDdRby82ZXFKMzRLd2JiTDJuSjRTcGZwVTVQOEFQSCs2N3prcTZSczdmM1RrZDl2cm4wei9BTmw1b2ROd0dOaFhncWxPV3RGL3AzRlpsaWRHN1pjbkV1a0U3Sm1iYkZ5aGttczNBQUFBQUFBQUFGTHpabWhLOUREeTI3VlVtdVpmQnhSTTBGQm5Fa2ljUGhDdTNTNjRSWW9WNC9LbEhKMHE1dE12NkduaTZpVWRrSXRPYzN6Slg1bHZaeVZkVzJGbkhuMk8rZ29YMVQwN0p6VTZwUXBLRVZCYzBVa3ZzVlp6bGN1Vkx5eGlNYWpVK0QwUEo2QUFBQUFBQUFBQUFBQUFBQUFBQUFBS1JtN0xPMTRpaEhuMjFJcjFSTlVGZmovSEl2NFVyVjF0Zi9iRW41UXBUWHczZm9UZkFyV0RaNkIwekxDVk5aWGNIMDQ3MXZYZWN0VlN0cUc0K2U1M1VGYTZtZmxPWHloMURSK05oWHBxcFRkNHk0cnVLeExFNk55dGR6THZCTXlaaVBZdkJUSk5adEFBQUFBQUtUbS9NMng0ZkR5M3FwVVg2eFg5eVp0OUR5a2tUOElWdTYzUk9NTVMvbGYvQUFwSzRXL1VuUGtySnROQWFGbmpKMmorV25HMnZQNFczTHZPV3FxMndOejgvQ0hmUTBENnArUCtLYzFPb1lIQndvVTFUcHEwWXJqM3NyRXNycEhLNTNNdTBNTElXSXhpY0VNZzFtMEFBQUFBQUFBQUFBQUFBQStYTkxuYVgzTTRVd3FvaEh0by9VdUtHeXZZeHR0N256K0lqOVVlS003THV4anhHOXgrSmg5Y2VLR3c3c1BFWjNJL0ZRK3VQRkdkaDNZZUt6dVB4VUg4OGVLR3c3c1k4VmkvSlRjNGFGcHlUeEZHVUl1TzJwRmZOMytKTDIrcWUxZkRlaTQvb3I5MW9ZM0lzMGFvaXB6VHVVci9BTXQ1TmxaTm5vVFM4OEpVVW90dUxmNTQ3MS95YzFUVE5uYmhlZndkdEZXdnA1TnBPWHloMDNCYVVwVm9LcEdhczk3Mm9yTWtENDNiS29YV0dxamxZajJxZS80cUgxeDRvOGJEdXhzOFZuY2Zpb2ZYSGloc083RHhXZHlWaVlmWEhpakd3N3NaOFJuY3BtY016WHZoNkV0bk5WbXZqL0xGK3BNMEZCLzJTSitFSzVkcnBuL0RDdjVYL3dBUXBaTktWdkpzdEE2Sy9GVmxUMWxDSy9OTnZkdVhlYzFYVWVDektKbFR1b2FUZVpOak9FK1RwK0RoU293Vk9ucXhqSFlrbXVKV0pGZkk3YWR6THJFMktKaU1aaEVROS9iUitwY1VlTmxleHQyMjl5ZmF4K3BjVVkyVjdEYWIzSHRJL1V1S0d5bzJrN2oyaStwY1VNS1oyazdrcWEzcmlNS05wRDZNR1FBQUFBQUQ0clZZd2k1U2FqRmJXM3pJeTFxdVhDSGw3MnNUTGw0RkkwM25SdHVuaHRrZTBmUGYrVkUzVFd0RXc2WCtDdFZ0OFhLdGgva3FtS3gxU3JMV3FWSlRsdmJ0NkVzeUZqRXcxTUVGTFVTeXUybnV5cDQ2ejN2aXpaaE94cTIxR3M5NzRzWVFiYWpXZTk4V01JTnBSZnZmRmpDRGJValdlOThXTURhWHVOYnZmRVlHMHZjQXgrQU1EUHdMN3JyN3N4Z3p0TDNKMW52ZkZtY0lOcFNOWjczeFl3ZzJsSjFudmZGakNEYlVnd1l5TC84QXZpRUNDKzcxc0ZUSmxIWTRrNnozdml6T0J0TDNHdTk3NHNZUWJidTQxM3ZmRmpaUWJidTQxM3ZmRmpaVHNOdDNjYTczdi9Vekd5blliYnU1OTBxODR2V2pPU2E1bnJNd3JHcW1GUTlObWUxY3RVc21oczQxS2NsR3YrOGh6T1h6THZJeXB0YlhKbVBncE0wbDZrWXFKTHhUL1pmTURqWVY0YTlPU2xGN2lDbGlkRzdaY25FdE1NN0ptN1RGeWhrR3MyZ0FpVHNydllsemdLdURtdWE5UHZFVGRPRHRSZzdiUG5hK1BnV1NnbzBpYnRPOVMvNktiZExnczcxWTMwcC9zcnhKSVE1Qmt3QUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUNVWVV5aHN0QmFYbmhLcW5GdHdidFVnK1p4LzVPV3BwbVRzd3ZQNE82aHJYMDBpS25MNVE2cGc4VEd0Q05TRHZHYVRSVnBHS3h5dGR6UXZFVXJaV0k5dkpUMlBCc05CblBTRG80WnFMdE9vOVJlRDUvME8rM1FwSk1tZVNjU0x1OVFzTk91T2E4RG1KYUNrWkJqQUpVVzlpMnQ4eVhPTW1VYXFyaERhVTh1NHBxNm95Mm5LdGZUb3VObzcwdGRVcVoyRlByazFpdXhrTi9wOVJueXFxMERrMWl1eGtOL3A5UThxcXRBNU5ZcnNaRGY2ZlVQS3FyUU9UV0s3R1EzK24xRHlxcTBEazFpdXhrTi9wOVE4cXF0QTVOWXJzWkRmNmZVUEtxclFPVFdLN0dRMytuMUR5cXEwRGsxaXV4a04vcDlROHFxdEE1Tllyc1pEZjZmVVBLcXJRT1RXSzdHUTMrbjFEeXFxMERrMWl1eGtOL3A5UThxcXRBNU5ZcnNaRGY2ZlVQS3FyUU9UV0s3R1EzK24xRHlxcTBEazFpdXhrTi9wOVE4cXF0QTVOWXJzWkRmNmZVUEtxclFPVFdLN0dRMytuMUR5cXEwRGsxaXV4a04vcDlROHFxdEE1Tllyc1pEZjZmVVBLcXJRT1RXSzdHUTMrbjFEeXFxMEdManRGVnFDdlZwU2duek8ydzJSVk1jaTRhNURSTlJ6UThYdFZERFp1NW5OeUF3WVJTNS9zKzBrN3l3OG5zdHJ3MzMrS0lXN1FKd2tUN0xMWWFsY3JDdjVRdkpCbG1PZloveGV2VWhUN055SisxUjdMVmQzS3BmcHRweU03RlRKZ3I0QUx2a0xSa1hGNG1TMXBYY0k3bzI1MlFOMW5jamtpVGx6TFJZNlZxdFdaZWZJdWtTR0xHU0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFlTmVpcWtYQ2FVb3kyTlBjWmpjclYyazVuaDdHdmFyWGNqbEduY0dxR0luU2owWXllcjRGdXBaVmxpUjY4eWhWMENRek9hbkxKZ0hRY2hzY3ZWL1o0cWxQZEt6NzAxYis1elZqTnVGeUhiYjVQRHFHTy9jNng3WHVLbmd2ZTBjenpqMXFmbVpacmQ3S0ZMdS9VT05FZDVGZ0E2UGtIcWk4OC9VclYxOS82TGxZK20rMUxLaU5Ka2tBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBZ0E1Ym0vcmxUeExWYituUXBGMzZseHBUdElzOUtEdE9ML0FKby83a2VYK2xUWkY2Mi9sRHJ1dVUvQjlBeWM3emt2NHFYbVpZcmQ3S0ZRdTZmL0FFT05FU0JGQUE2UGtIcWk4OC9VclYxOS93Q2k1V1BwdnRTeW9qU1pKQUl1QVNBUmNBa0FpNEFVZ0JjQWtBQUFBQUVOZ0M0R1JjQVhBSkFBQUFJQU9XNXY2NVU4UzFXL3AwS1JkK3BjYVU3U0xQU2gwNCthUHFlWCtsVDNGNjIvazY3WXFCOUFPZVp6NnpMeFpZYmQ3S0ZTdkhVS2FJa0NKSUFPajVCNm92UFAxSzFkZmY4QW91Vmo2YjdVc3FJMG1TUUNBQ0dBZkZXdEdPMlVsSHhhUjZhMXp1U0hoejBielhCZ1luVDJIcDg5YUQ3b3RObTlsSE0vazA1WkxoVHM1dlExV0l6dGg0OUJUbS9Mc09wbHBsWDFZUTRaTDVUcDZjcWJyUTJrRmlhTWFxV3JyWHV0MjA0cWlGWVpGakpLa3FFcUlrazdtY2pTZEpJQUFBQUFOVG1EVEt3Y0l6Y2RiV2RyTG5PcWxwVm5kaEZPR3RyVXBXbzVVTmZoODU0ZVhQcndmZkhZYjMycVpPV0ZPVmw3cGw0TGxEYVlmVFdIbjBhMEw3bkpKbks2bG1iemFwMnNycWQzSjZmeVowS2lrcnhhZmc3bWxXcW5NNld1UjNGRDdNR2NCQXlTQVFBY3R6ZjF5cDRscXQvVG9VaTc5UzQwcDJrV2ZkRHB4ODBmVTh2OUtudUwxdC9KMTBwNTlBT2U1eTYxTHhaWXJkN0tGU3ZIVUthSWtDSklBT2o1QjZvdlBQMUsxZGZmK2k1V1BwdnRTeWthVEpwTlA1aGpnM0ZTZzVPWE5ibU95a29uVkdjTHlJNnV1Q1V1TXBuSlY4Vm5ldEovdTRScHI0WHRKa3F5MHhKNmx5UWN0OW1YMEpnMWVKekZpYW5TcXY4QXBTajZIV3lpZ1p5YWNFbHlxWkU0dU5mVXhFNWRLY3BlTW16b2JHeHZKRGtkTkk3MU9VOHJIczE1SkJrdm43UE1WZWxPaytlRXJyd0s5ZG84UFI2ZkphN0ZMbUpXbHZSRUlUNUprQUFNQStiZ3huZ1VUOW91SnZPblRYeXFUZjM1aWV0RFAwdWNWaS95WmMxaFQ3RXh3SzdrV01tRDJwWXFwRG8xSnJ3a3p3Nk5pODBRM01ua2J5Y3FHeXcyWnNWVDVxdDF1a2t6bWZRUVAvNG5YSGRhbG5KeHRjSm5tckgvQUJLYW10NmRud09OOXBZdnBYQjN4WDZSUFdtUzJhQzB3c1hCempGeHM5VjMza1RWVXl3UDJWVW42S3NTcFp0SW1EWm5NZGh5M04vWEtuaVdxMzlPaFNMdjFMalNuYVJaNllmcHg4MGZVOHY5S251TDFwK1RyUHRlNHFXd1gzYi9BR0tEbk5meE12Rms5YmZaUXF0NDZoVFFraVJKQUIwZklQVkY1NStwV3JyNy93QkZ5c2ZUZmFsa0kwbVNxZnRDdzdsUWpVWCtYTGI0TkVyYVg0bFZxL0tFRmZZOXFGcnV5bEFaWVVLaVFaQXVBU3R1eGJmRGFGNEdVUXlhT2o2MCtqUm0vd0NsbXA4OGJlYmsvazNzcFpuOG1yL0JiOGw2S3IwS3NwVklhc0pSdHo3YjNJYTVWRU1qRVJxNVZGTERhS09hR1JYT1RDS2hja1F4WWo2QUFBQVBrd1lLSG0zUStJcTRpVlNNTmFGa28yMnZtSiszMU1NY1NOVmVKVjdyUlZFczZ2Uk1wOEZZcTRHckRwVXFrZkdMSlJzc2J2UzVDRWZCSzMxTlZQb3gzd05wb3dBQUFINm1ESjFESjJHOW5oSWZ6L25mM0t0Y1g3VTYvdHdMeGFZOWltYisvRTNoeEVrY3R6ZjF5cDRscXQvVG9VaTc5UzQwcDJrV2VtRzZjZk12VTh2OUtudVAxcCtUcWhWQzlGSHpwMWwrTEp5M2V5aFdieDFDbWdKRWlDQURvK1FlcUx6ejlTdFhYMy9vdVZqNmI3VXNoR2t5cGc2YndudHFFNmFWMjFzOFRkVFNlSElqam1xNGZGaWN6dVVYQzVNeE11bHF3VDc3dmdUejdwQzNseEt2SFpLaGVlRU5waDhpSmY0bGEvY2xZNVgzaGY4QWkwN283QTFPTDNHMXcyVDhORGE0dVQ3NU8zQTVIM09kM3pnN1k3TlN0NDR6OW0wb2FNb3c2TktDL3BUWnl1cUpYYzNLZHphYUZuSnFmd1pVVWx6Skx3MkdyS3J6TjZJaWNqN0JrQUFBQUFBQUVNQStKd1V0a2ttdTlYQ0tyZVNubFdvdk14TVJvaWhVNlZLSDJTUnZaVXl0NU9VNTVLU0IvQldwL0JxOFJrM0RTMnFNb3Z1azdjRHFiYzUwNXFjVWxscG5jc29hckVaRDUzVHJlQ2NmN25TeTc2bW5ESllQbGp6VjFzbjRtTDVveWpkYlU5dHI3ZGgxdHVjS3AyVTQzV1dvYXFmS0hSTUZTOW5UakQ2WXBGZGtmdHVWeGJJV2VHeEc5a1BjOEcwNWJtL3JsVHhMVmIrblFwRjM2bHhwVHRJczlNTjA0K1plcDVmNlZQY2ZyVDhuVkNxRjZLUG5Uckw4V1RsdTlsQ3MzanFGSytTSkVBQTZQa0hxaTg4L1VyVjE5LzZMbFkrbSsxTExZalZKa1dCakFzRElzQUxBQ3dBc0FTQUFBQUFBQUFBQVJZQVdBRmpHQUxHUUxBQ3hnQXlEbHViK3VWUEV0VnY2ZENrWGZxWEdsTzBpejB3M1RqNWw2bmwvcFU5eCt0UHlkVUtxWG9vK2RPc3Z4Wk4yNzJVS3plT29VcjVJa1FBRG8rUWVxTHp6OVN0WFgzL291Vmo2YjdVc3FJMG1TUUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUNBRGx1Yit1VlBFdFZ2NmRDa1hmcVhHbE8waXowdzcvUEh6UjlUeS93QktteUwxcCtVT3QremlWSGFVdjJ3MG9HZE9zdnhaUDI3MlVLcGVPb1VyNUlrUUFEbytRZXFMeno5U3RYWDMvb3VWajZiN1VzcUkwbVNRQUFBQUFRd0NHekNHQ0w5Ly9aNkg1RFo1TWh1MjF1MXVjeW5NeGxPSm85RDVoamlLOVdqemFqL2Qvd0F5WFA4QXFkdFJST2hpYS84QWtqYVM0dG5tZXp0eU41YzRjNUpMNEZ3WlhnRXpKZ201Z0gwWk1nQUFBQUFFQUhMYzM5Y3FlSmFyZjA2Rkl1L1V1TktkcEZuM1I2Y2ZOSDFQTC9TcDdpOWJmeWRkS2VmUURuMmRKZnhNdkZsaXQzc29WSzhkUXBvQ1FJa0FIUjhnOVVYbm42bGF1dnYvQUVYS3g5TjlxV1ZFYVRKSUFBQUFBSVlCaWFTeEVxVktWU01IVWxGWFVVK2MyUk1hOSt5NWNKM05FOGo0NDFjMU1xYzNxNWpyeXJxczViWXU2aDhxWDAyTEkyaGhTTldJblA1S2M2NXp1bThSVjVmSHdYZlIrYU1QVmdtNXFuSzM1b3k1MHlFa29KbU93aVpRc3NGMXA1RzVWY0wyTkhtZk5VWnhkSER1NmF0T2EzYmtkMURibGE3YmtUNkkyNVhaRmFzY1BIUE5Tb1lhdktuT000TnFVV21taVlleHIycTFVNEtWNktWOFRrYzFlSjBQUkdiS05XQ1ZXU3BWRnpwOHplOHJ0UmJaSTNmb1RLRnVwYnZESXo5YTRVK05NWnVwVW90VVg3V3B0U3QwWXZlek5QYlpITCt0TUllYXU4UlJ0eEd1MHY4QVJYTkJaanJ3cldiZGRWWks4ZmltMzh1NUVoVlVNUGg1VGhnaWFHNXpwTGhmMVorRG84WGRjMXRuTnU3aXU0UkY0RnZSVnhrOUVESUFBQUFBQkFCeTNOL1hLbmlXcTM5T2hTTHYxTGpTbmFSWjZVT25IelI5VHkvMHFlNHZXMzhuWFNubjBBNTVuUHJNdkZsaXQzc29WSzc5UXBvU1FJa0FIUjhnOVVYbm42bGF1dnYvQUVYS3g5TjlxV1ZFYVRKSUFBQUFBSVlCRFF3T0NsU3pIbE5WVzZ0QzBaL05ENVplRzVrdFNYSldKc3ljaUJ1Tm9TVC9BQ1JjSGR1NVM4Vm82clRscXpwVFRXNU5yaWlhWlBHOU10Y2hYSmFXYUpkbHpWUGZSK2hhOWQ2c0tja3ZtY2xaSmZjOFMxY1VhWmN2RTl3VUUweTRhMVN5NHpKUDdtUHNwL3ZZcjg5K2FiM0xjUmtkMS95THRwK240L1ltcGJGaUpOaGYxZlA3bFV4V2pLMUtXck9sSk5iazJuOTBTMGRSRzlNdGNRVTFMTkV1eTVxbjNnZEUxcTB0V25TbDN0cHBMdjJtSkttS05NdWNlb2FLYVpjTmFwZk10WmJqaGZ6emFuVmZ4dHNqNEZmcks1MDY0VGtXbTNXeHROK3B5NWQvUllEZ0pWRDdCa0FBQUFBQWdBNWJtL3JsVHhMVmIrblFwRjM2bHhwVHRJczlLSFRqNW8rcDVmNlZQY1hyYitUcnRpb0gwQTUzbkYveFUvTXl3MjcyVUtoZGwvOEFwY2FJa0NMQUIwZklQVkY1NStwV3JyNy9BTkZ5c2ZUZmFsbFJHa3lTQUFBQUFDTEFDd0FzQVE0cnhDREFVZnNBVFlBT0tmd0dUR0VDaWtCZ1dCa1dBSkFBQUFBQUFJQU9XNXY2NVU4UzFXL3AwS1JkK3BjYVU3U0xQdWowbythUHFlSCtsVFpGNjAvSjF5NVVTL1pLSG5laHExOWI2M0prOWJINWp3VmU5UjRtMnU1WFNUSVVnQTZQa0hxaTg4L1VyVjE5L3dDaTVXUHB2dFN5b2pTWkpBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBSUFPVzV2NjVVOFMxVy9wMEtSZCtwY2FVN1NMUGJCdzFxa0Z2bkgxTmNxNFlxL3NiWVV6STFQM090ZllxUmZzb1YzOW9lRGJwUXJMNUpXZjlSSTJtWEVpc1g1SWkvUTVqU1R0L3dDbENMQWhVeUFDNTVFMHRHRjhOTjZyYmJnMzhkNklPNlV6bmY1VzhlNVpiSldOYWl3djRmS0YzVElRc3BOeGdDNHdCY1lBdU1BWEdBTGpBRnhnQzR3QmNZQXVNQVhHQUxqQUZ4Z0M0d0JjWUF1TUFYR0FMakFGeGdIaGk4VkNsQjFKeVVZeFYzdFBUSTNTS2lONXFhNVpXUk1WN2w0SWNvMHhqZnhGYWRXMWxKdHhYY1c2bWk4S05HRkRySi9IbWMvOXpDTjV5bTd5ZmczVnhjSHpxbithWGhhM3FjTnhrUmtLL3Z3SlMwUXJKVW92d25GVHFPcVZZdTJERzBuZ2xYcFNwU3RhUzJYK0QrRE5rVWl4dlJ5R3FvaFNhTldMOG5Jc1hoWlVweXB6VnBSYlQ3Kzh0OGNqWHRSeWNsUG44OFRvbnF4M3dlVmozazE0Q2Y2Zkg0b3hqZ1pSeGx4MHJYU3NxMDB2RTFidEV2TnFIUWxiT2lZUnluMTczcjl2UGlOMWgwb045bjFxUGU5ZnQ1OFJ1c09sQnZzK3RSNzNyOXZQaU4xaDBvTjluMXFQZTlmdDU4UnVzT2xCdnMrdFI3M3I5dlBpTjFoMG9OOW4xcVBlOWZ0NThSdXNPbEJ2cyt0Ujczcjl2UGlOMWgwb045bjFxUGU5ZnQ1OFJ1c09sQnZzK3RSNzNyOXZQaU4xaDBvTjluMXFQZTlmdDU4UnVzT2xCdnMrdFI3M3I5dlBpTjFoMG9OOW4xcVBlOWZ0NThSdXNPbEJ2cyt0Ujczcjl2UGlOMWgwb045bjFxUGU5ZnQ1OFJ1c09sQnZzK3RSNzNyOXZQaU4xaDBvTjluMXFQZTlmdDU4UnVzT2xCdnMrdFI3M3I5dlBpTjFoMG9OOW4xcVBlOWZ0NThSdXNPbEJ2cyt0Ujczcjl2UGlOMWgwb045bjFxZU9JeHRTcGIybFNVcmMxMmVtUXNaNlVROFNWRWtpWWVxcWVCczVHZ0JWTTRPaVpGMFM2TkoxcHEwNnRtdDZoOEVWeTUxUGlTYkNjay9zdUZtby9CaThSM04zOUZvSXdtZ0FWck4yWGZ4TWZhMGxhdEZmNjF1OFNTb0szd1YyWGVuK2lHdWx0U29UeEdKK3BQOW5PcWtIRnRTVGkwN05QWTB5eE5WRjRvVkJ6VmF1eTVENFBaNEFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFCSmhWQ0ZreXZseVZlYXExRTQwVlo3ZjhBTS82SXV0cld4dFZqRjQvMFRkdHRqcG5KSTlNTi9zNlBHTmxaYkV0aUs2cTVMZWlZVENFZ3lBQUFhWFRtVzZXS3ZKclVxZlhHMTNiNFBlZHROWFNRY0U0cDJJNnN0c1ZUeFhnN3VoVE1ibERFVStpbFZXK0hPVE1WemhmejRGYm5zMVJINlUydndZdkp2RmRoSzMydWJkK2d6NmpUNVpWYzloVHlxYUN4TVl1Y3FFMUZiWk5wYkVla3JZVlhDT05icUNvYWl1Vmk0UTF4MUhHQW9ROXNOaHBWWktGT092SjNzbHpzMXZrYXhNdVhDRzJLSjBqdGxpWlV6MWx6RlBtdzgvOEE1WDl6UnYwQ2Mzb2RTV3lxWC9yVWNuY1YyRStDTTc5QnFReDViVmFGSTVPNHJzSjhFWTMrRFVQTEtyUXBLeTVpdXdsK2czK0RVWlMyVldoU2VUZUs3R1JqZjROUm55eXEwS09UZUs3R1EzK0RVUExLclFmU3kxaWV4WTMrRFVQSzZyUU9UT0o3Sm1QTUlOUm55cXEwaFpaeFBaTWVZUWFoNVZWYVQ2NUw0bnNtUE1JTlJueXFwMG5oak5BMTZNSFVuVGFnclhlNDlSMWtVajlscThUWE5iNTRtYmJtOEVOYWRYRTRpREpnek5GNk9uaWFpcDA3WDU3dm1ORlJPMkZtMDQ2YVdtZlVQMkdtOVdSc1I5ZFA5VGg4Mmk3S1Nua00vZENJNUh4RjdPZE5kKzBlYlJkbENXR2RWNW9iM1JPVEtWSnFkVnVySmZCMjFFemdudWtqMHczZ2hKMHRraGo0di9Vditpenhpa3JKV1MrQ0kxVnlUU0lpY0VKTUdRQUFBQUFBQUFENHJVOWFMaS9tVFhGR1dyaFVVOHZidE5WRGora3NETEQxWlVwcDNUMk5xMnN0NkxoQk0yVmlPUStmVk5PNkNSV0tZcHV5YzVjc2hhSms1dkV6amFLVnFUM3Y0c2hMcFV0MmZEYXY1TEpZNlIyMTR6azRmQmV5RExPQUFBQUFBQUFBQUFBQUREMHZnL2IwWjBuODBYYngrSDZtMkNUdzVFY2M5VkQ0MFRtZHprbUt3OHFVM1RtbkdVWFpwK3FMZEhJMlJ1MDFTZ3l4UGpjclhwaFVQRm16SnFMN2tEUmNvUmxYbXJhOWxCTldhU3Z0Kzl5djNXb2E5eU1iOEZyc1ZLNk5xeXUrZVJjQ0lMQUFBQUFBQUFBQUFBQUFBQUFERXgyamFWZFdxMDR6dHZXM2liWXA1SWx5eGNHaWFtaW1URWpjbURTeXZoWXROVVZkTzZ1MnplNnZuY21GY2N6YlhTdFhPeWJlRUZGV1NTUzVrbFpISXFxdk03MFJFVENIMFlNZ0FBQUFBQUFBQUFBQUFBR0ZqOUZVYS84QWkwNHo4VnQ0bTZLZVNMMExnNTVxV0diMXR5WWxETEdGZzlaVVZlOTFlN3NiblY4N2t3cmpuWmE2WnE1UnB0NHhTVmtySmJqak85RVJPUklNZ0FBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBSC85az0KLy8gQG5hbWVzcGFjZSAgICBodHRwczovL3d3dy5iaWxpYmlsaS5jb20vKgovLyBAdmVyc2lvbiAgICAgIDAuMC42Ci8vIEBkZXNjcmlwdGlvbiAgMjAyMCHpnZ7op6PmnpAhQmlsaUJpbGnnoLTop6PmnIDpq5jmuIXmmbDluqYo5Y+q6IO95pyA6auY55qE5riF5pmw5bqm5YOPNEssMTA4MFArLDEwODBQNjDnrYkpLOiHquWKqOWIh+aNouacgOmrmOa4heaZsOW6pgovLyBAYXV0aG9yICAgICAgIEJsdWVhZ2xlCi8vIEBtYXRjaCAgICAgICAgKjovL3d3dy5iaWxpYmlsaS5jb20vKgovLyBAbWF0Y2ggICAgICAgICo6Ly94YmVpYmVpeC5jb20vYXBpL2JpbGliaWxpKgovLyBAcmVxdWlyZSAgICAgIGh0dHA6Ly9jZG4uc3RhdGljZmlsZS5vcmcvanF1ZXJ5LzIuMC4wL2pxdWVyeS5taW4uanMKLy8gPT0vVXNlclNjcmlwdD09CnZhciBjb25maWdfY3JhY2sgPSB7IC8v5YWo5bGA6YWN572uCiAgICBhdXRvX2hpZ2hlc3RfcXVhbGl0eTogdHJ1ZSwgLy/mmK/lkKboh6rliqjliIfmjaLmnIDpq5jmuIXmmbDluqYKICAgIGJlaWJlaV9wYXNzd29yZDogIjIwMjAwNzAyMTMiIC8v6K+35Zyo6L+Z6YeM6L6T5YWl576k5YWs5ZGK55qE5a+G56CBCn07CjsKO2lmKGxvY2F0aW9uLnRvU3RyaW5nKCkuaW5kZXhPZigid3d3LmJpbGliaWxpLmNvbSIpPD0tMSl7aWYoc2VsZiE9dG9wKXtkb2N1bWVudC5jb29raWU9ImJlaWJlaWJpbGlfY29uZmlnX3Bhc3N3b3JkPSIrY29uZmlnX2NyYWNrLmJlaWJlaV9wYXNzd29yZCsiOyBleHBpcmVzPVRodSwgMTggRGVjIDI5OTkgMTI6MDA6MDAgR01UOyBwYXRoPS9hcGkvYmlsaWJpbGkifTt3aW5kb3cub25sb2FkPWZ1bmN0aW9uKCl7aWYoc2VsZiE9dG9wKXt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigibWVzc2FnZSIsZnVuY3Rpb24oYSl7d2luZG93LmdldF91cmw9YS5kYXRhfSxmYWxzZSk7aWYoJCgiaW5wdXRbbmFtZT0nYmlsaWJpbGl1cmwnXSIpLnZhbCgpLmxlbmd0aD4wKXtmdW5jdGlvbiBnZXRfcXVhbGl0eSgpe2lmKCQoIiNsaXN0aGQiKS5jaGlsZHJlbigib3B0aW9uW3NlbGVjdGVkXSIpLnRleHQoKT09PSQoIiNsaXN0aGQiKS5jaGlsZHJlbigib3B0aW9uIikuZmlyc3QoKS50ZXh0KCkpe3N3aXRjaCgkKCIjbGlzdGhkIikuY2hpbGRyZW4oIm9wdGlvbltzZWxlY3RlZF0iKS50ZXh0KCkpe2Nhc2UiIOi2hea4hSA0SyDil4AgIjpyZXR1cm4iNEsiO2JyZWFrO2Nhc2UiIOmrmOa4hSAxMDgwUCsg4peAICI6cmV0dXJuIjEwODBQKyI7YnJlYWs7Y2FzZSIg6auY5riFIDcyMFA2MCDil4AgIjpyZXR1cm4iNzIwUDYwIjticmVhaztjYXNlIiDpq5jmuIUgMTA4MFA2MCDil4AgIjpyZXR1cm4iMTA4MFA2MCI7YnJlYWs7Y2FzZSIg6auY5riFIDEwODBQIOKXgCAiOnJldHVybiIxMDgwUCI7YnJlYWs7Y2FzZSIg6auY5riFIDcyMFAg4peAICI6cmV0dXJuIjcyMFAiO2JyZWFrfX1lbHNle3JldHVybiJwYXNzd29yZF9lcnJvciJ9fTtpZihnZXRfcXVhbGl0eSgpPT09InBhc3N3b3JkX2Vycm9yIil7cGFyZW50LnBvc3RNZXNzYWdlKGdldF9xdWFsaXR5KCksIioiKX1lbHNle2lmKCQoIiNsaXN0IikuY2hpbGRyZW4oIm9wdGlvbjpjb250YWlucygnTTRTJykiKS5uZXh0KCkudGV4dCgpLmluZGV4T2YoIumfs+mikSIpIT0tMSl7cGFyZW50LnBvc3RNZXNzYWdlKCLliIbmrrXop4bpopEiLCIqIil9ZWxzZXt2YXIgYj17InF1YWxpdHkiOmdldF9xdWFsaXR5KCksIm00c192aWRlbyI6JCgiI2xpc3QiKS5jaGlsZHJlbigib3B0aW9uOmNvbnRhaW5zKCdNNFMnKSIpLm5leHQoKS52YWwoKSwibTRzX2F1ZGlvIjokKCIjbGlzdCIpLmNoaWxkcmVuKCJvcHRpb246Y29udGFpbnMoJ+mfs+mikScpIikubmV4dCgpLnZhbCgpfTtwYXJlbnQucG9zdE1lc3NhZ2UoSlNPTi5zdHJpbmdpZnkoYiksIioiKX19fWVsc2V7dmFyIGM9c2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXtpZigkKCJpbnB1dFtuYW1lPSdiaWxpYmlsaXVybCddIikubGVuZ3RoPjAmJiQoIiNidXR0b24tMSIpLmxlbmd0aD4wKXskKCJpbnB1dFtuYW1lPSdiaWxpYmlsaXVybCddIikudmFsKHdpbmRvdy5nZXRfdXJsKTskKCIjYnV0dG9uLTEiKS5jbGljaygpO3BhcmVudC5wb3N0TWVzc2FnZSgicmVmcmVzaCIsIioiKTtjbGVhckludGVydmFsKGMpfX0sMTApfTskKCJ2aWRlbyIpLmJpbmQoJ3BsYXknLGZ1bmN0aW9uKCl7JCgidmlkZW8iKS5wYXVzZSgpfSl9fX1lbHNle3dpbmRvdy5nZXRfdmlwX2NvdXJzZT1mdW5jdGlvbigpeyQoIi5idWktc2VsZWN0LWxpc3QiKS5wcmVwZW5kKCI8bGkgY2xhc3M9J2J1aS1zZWxlY3QtaXRlbScgaWQ9J2NyYWNrX3N0YXR1ZSc+PHNwYW4gY2xhc3M9J2JpbGliaWxpLXBsYXllci12aWRlby1xdWFsaXR5LXRleHQnPuegtOino+eKtuaAgTwvc3Bhbj48c3Bhbj7or7fnrYnlvoU8L3NwYW4+PC9saT4iKTskKCJib2R5IikuYXBwZW5kKCI8aWZyYW1lIGlkPSdiZWliZWknIHNyYz0naHR0cHM6Ly94YmVpYmVpeC5jb20vYXBpL2JpbGliaWxpLycgc3R5bGU9J2Rpc3BsYXk6bm9uZSc+PC9pZnJhbWU+Iik7ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImJlaWJlaSIpLm9ubG9hZD1mdW5jdGlvbigpe2lmKHdpbmRvdy5sb2NhdGlvbi5ocmVmLmluZGV4T2YoInZpZGVvIikhPS0xfHx3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKCJiYW5ndW1pIikhPS0xKXt3aW5kb3cucW1qPXdpbmRvdy5sb2NhdGlvbi5ocmVmfWVsc2V7aWYodHlwZW9mIF9fSU5JVElBTF9TVEFURV9fLmJ2aWQ9PT0idW5kZWZpbmVkIil7d2luZG93LnFtaj1fX0lOSVRJQUxfU1RBVEVfXy5lcEluZm8uYnZpZH1lbHNle3dpbmRvdy5xbWo9X19JTklUSUFMX1NUQVRFX18uYnZpZH19O2RvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJiZWliZWkiKS5jb250ZW50V2luZG93LnBvc3RNZXNzYWdlKHdpbmRvdy5xbWosImh0dHBzOi8veGJlaWJlaXguY29tL2FwaS9iaWxpYmlsaS8iKTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigibWVzc2FnZSIsZnVuY3Rpb24oZCl7aWYoZC5kYXRhPT09InJlZnJlc2gifHxkLmRhdGE9PT0icGFzc3dvcmRfZXJyb3IifHxkLmRhdGE9PT0i5YiG5q616KeG6aKRIil7c3dpdGNoKGQuZGF0YSl7Y2FzZSJyZWZyZXNoIjpkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiYmVpYmVpIikub25sb2FkPWZ1bmN0aW9uKCl7ZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImJlaWJlaSIpLmNvbnRlbnRXaW5kb3cucG9zdE1lc3NhZ2Uod2luZG93LnFtaiwiaHR0cHM6Ly94YmVpYmVpeC5jb20vYXBpL2JpbGliaWxpLyIpfTticmVhaztjYXNlInBhc3N3b3JkX2Vycm9yIjokKCIjY3JhY2tfc3RhdHVlIikucmVtb3ZlKCk7JCgiLmJ1aS1zZWxlY3QtbGlzdCIpLnByZXBlbmQoIjxhIGhyZWY9J2h0dHBzOi8vYmJzLmJsdWVhZ2xlLnRvcC9kLzMnIHN0eWxlPSdjb2xvcjpyZWQnIGNsYXNzPSdidWktc2VsZWN0LWl0ZW0nPuWvhueggemUmeivr+WJjeW+gOiuuuWdmzwvYT4iKTskKCIjYmVpYmVpIikucmVtb3ZlKCk7YnJlYWs7Y2FzZSLliIbmrrXop4bpopEiOiQoIiNjcmFja19zdGF0dWUiKS5jaGlsZHJlbigpLmVxKDEpLnRleHQoIuaaguS4jeaUr+aMgeWIhuauteinhumikeS4jei/h+S9oOWPr+S7peeZu+W9leingueciyIpOyQoIiNiZWliZWkiKS5yZW1vdmUoKTticmVha319ZWxzZXt2YXIgZT1KU09OLnBhcnNlKGQuZGF0YSk7d2luZG93LmJlaWJlaV91cmxfcXVhbGl0eT1lLnF1YWxpdHk7d2luZG93LmJlaWJlaV91cmxfdmlkZW89ZS5tNHNfdmlkZW87d2luZG93LmJlaWJlaV91cmxfYXVkaW89ZS5tNHNfYXVkaW87JCgiI2JlaWJlaSIpLnJlbW92ZSgpOyQoIi5idWktc2VsZWN0LWxpc3QiKS5maW5kKCJzcGFuOmNvbnRhaW5zKCIrd2luZG93LmJlaWJlaV91cmxfcXVhbGl0eSsiKSIpLnBhcmVudHMoImxpIikucmVtb3ZlQXR0cigiZGF0YS12YWx1ZSIpLmF0dHIoImNyYWNrX29wdGlvbiIsInRydWUiKTtpZigkKCIuYnVpLXNlbGVjdC1saXN0IikuZmluZCgic3Bhbjpjb250YWlucygiK3dpbmRvdy5iZWliZWlfdXJsX3F1YWxpdHkrIikiKS5zaWJsaW5ncygiLmJpbGliaWxpLXBsYXllci1iaWd2aXAiKS5sZW5ndGg+MCl7JCgiLmJ1aS1zZWxlY3QtbGlzdCIpLmZpbmQoInNwYW46Y29udGFpbnMoIit3aW5kb3cuYmVpYmVpX3VybF9xdWFsaXR5KyIpIikuc2libGluZ3MoIi5iaWxpYmlsaS1wbGF5ZXItYmlndmlwIikudGV4dCgi5bey56C06KejIil9ZWxzZXskKCIuYnVpLXNlbGVjdC1saXN0IikuZmluZCgic3Bhbjpjb250YWlucygiK3dpbmRvdy5iZWliZWlfdXJsX3F1YWxpdHkrIikiKS5zaWJsaW5ncygiLmJpbGliaWxpLXBsYXllci1uZWVkbG9naW4iKS50ZXh0KCLlt7LnoLTop6MiKX07dmFyIGY9c2V0VGltZW91dChmdW5jdGlvbigpeyQoIiNjcmFja19zdGF0dWUiKS5jaGlsZHJlbigpLmVxKDEpLnRleHQoIuivpeinhumikeaXoOazleegtOinoyIpO2NsZWFySW50ZXJ2YWwoZyl9LDEwMDApO3ZhciBnPXNldEludGVydmFsKGZ1bmN0aW9uKCl7aWYoJCgibGlbY3JhY2tfb3B0aW9uPSd0cnVlJ10iKS5sZW5ndGg+MCl7JCgiI2NyYWNrX3N0YXR1ZSIpLmNoaWxkcmVuKCkuZXEoMSkudGV4dCgi5bey56C06KejIik7Y2xlYXJUaW1lb3V0KGYpO2NsZWFySW50ZXJ2YWwoZyl9fSwxMDApO3dpbmRvdy5vcmlnaW5fdmlkZW89Im5vbmUiOyQoImxpW2NyYWNrX29wdGlvbj0ndHJ1ZSddIikuY2xpY2soZnVuY3Rpb24oKXtpZih3aW5kb3cub3JpZ2luX3ZpZGVvPT09Im5vbmUiKXskKCIuYnVpLXNlbGVjdC1yZXN1bHQiKS5odG1sKCI8c3BhbiBjbGFzcz0nYnVpLXNlbGVjdC1yZXN1bHQnPiIrJCgiLmJ1aS1zZWxlY3QtbGlzdCIpLmNoaWxkcmVuKCJsaVtjcmFja19vcHRpb249J3RydWUnXSIpLmNoaWxkcmVuKCIuYmlsaWJpbGktcGxheWVyLXZpZGVvLXF1YWxpdHktdGV4dCIpLnRleHQoKSsiPHNwYW4gY2xhc3M9J2JpbGliaWxpLXBsYXllci1hdXRvLWhpZGRlbic+KCIrJCgiLmJ1aS1zZWxlY3QtbGlzdCIpLmNoaWxkcmVuKCJsaVtjcmFja19vcHRpb249J3RydWUnXSIpLmNoaWxkcmVuKCIuYmlsaWJpbGktcGxheWVyLXZpZGVvLXF1YWxpdHktdGV4dCIpLnRleHQoKSsiKTwvc3Bhbj48L3NwYW4+Iik7JCgiLmJ1aS1zZWxlY3QtaXRlbS1hY3RpdmUiKS5yZW1vdmVDbGFzcygiYnVpLXNlbGVjdC1pdGVtLWFjdGl2ZSIpOyQoIi5idWktc2VsZWN0LWxpc3QiKS5maW5kKCJzcGFuOmNvbnRhaW5zKCIrd2luZG93LmJlaWJlaV91cmxfcXVhbGl0eSsiKSIpLnBhcmVudHMoImxpIikuYWRkQ2xhc3MoImJ1aS1zZWxlY3QtaXRlbS1hY3RpdmUiKTt3aW5kb3cub3JpZ2luX3ZpZGVvPSQoIi5iaWxpYmlsaS1wbGF5ZXItdmlkZW8iKS5jaGlsZHJlbigidmlkZW8iKS5hdHRyKCJzcmMiKTt2YXIgYT0kKCIuYmlsaWJpbGktcGxheWVyLXZpZGVvIikuY2hpbGRyZW4oInZpZGVvIilbMF0uY3VycmVudFRpbWU7dmFyIGI9JCgiLmJpbGliaWxpLXBsYXllci12aWRlbyIpLmNoaWxkcmVuKCJ2aWRlbyIpWzBdLnZvbHVtZTt2YXIgYz0kKCIuYmlsaWJpbGktcGxheWVyLXZpZGVvIikuY2hpbGRyZW4oInZpZGVvIilbMF0ucGxheWJhY2tSYXRlOyQoIi5iaWxpYmlsaS1wbGF5ZXItdmlkZW8iKS5jaGlsZHJlbigidmlkZW8iKS5hdHRyKCJzcmMiLHdpbmRvdy5iZWliZWlfdXJsX3ZpZGVvKTskKCIuYmlsaWJpbGktcGxheWVyLXZpZGVvIikuY2hpbGRyZW4oInZpZGVvIilbMF0uY3VycmVudFRpbWU9YTskKCIuYmlsaWJpbGktcGxheWVyLXZpZGVvIikuY2hpbGRyZW4oInZpZGVvIilbMF0udm9sdW1lPWI7JCgiLmJpbGliaWxpLXBsYXllci12aWRlbyIpLmNoaWxkcmVuKCJ2aWRlbyIpWzBdLnBsYXliYWNrUmF0ZT1jOyQoImJvZHkiKS5hcHBlbmQoIjx2aWRlbyBpZD0nY3JhY2tfYXVkaW8nIHNyYz0nIit3aW5kb3cuYmVpYmVpX3VybF9hdWRpbysiJyBzdHlsZT0nZGlzcGxheTpub25lJz48L3ZpZGVvPiIpOyQoIi5iaWxpYmlsaS1wbGF5ZXItdmlkZW8iKS5jaGlsZHJlbigidmlkZW8iKS5iaW5kKCJwbGF5aW5nIixmdW5jdGlvbigpeyQoIiNjcmFja19hdWRpbyIpLnRyaWdnZXIoInBsYXkiKTskKCIjY3JhY2tfYXVkaW8iKVswXS5jdXJyZW50VGltZT0kKHRoaXMpWzBdLmN1cnJlbnRUaW1lfSk7JCgiLmJpbGliaWxpLXBsYXllci12aWRlbyIpLmNoaWxkcmVuKCJ2aWRlbyIpLmJpbmQoInBhdXNlIixmdW5jdGlvbigpeyQoIiNjcmFja19hdWRpbyIpLnRyaWdnZXIoInBhdXNlIil9KTskKCIuYmlsaWJpbGktcGxheWVyLXZpZGVvIikuY2hpbGRyZW4oInZpZGVvIikuYmluZCgibG9hZCIsZnVuY3Rpb24oKXskKCIjY3JhY2tfYXVkaW8iKS50cmlnZ2VyKCJsb2FkIil9KTskKCIuYmlsaWJpbGktcGxheWVyLXZpZGVvIikuY2hpbGRyZW4oInZpZGVvIikuYmluZCgic2Vla2luZyIsZnVuY3Rpb24oKXskKCIjY3JhY2tfYXVkaW8iKVswXS5jdXJyZW50VGltZT0kKHRoaXMpWzBdLmN1cnJlbnRUaW1lfSk7JCgiLmJpbGliaWxpLXBsYXllci12aWRlbyIpLmNoaWxkcmVuKCJ2aWRlbyIpLmJpbmQoInZvbHVtZWNoYW5nZSIsZnVuY3Rpb24oKXskKCIjY3JhY2tfYXVkaW8iKVswXS52b2x1bWU9JCh0aGlzKVswXS52b2x1bWV9KTskKCIuYmlsaWJpbGktcGxheWVyLXZpZGVvIikuY2hpbGRyZW4oInZpZGVvIikuYmluZCgicmF0ZWNoYW5nZSIsZnVuY3Rpb24oKXskKCIjY3JhY2tfYXVkaW8iKVswXS5wbGF5YmFja1JhdGU9JCh0aGlzKVswXS5wbGF5YmFja1JhdGV9KTskKCIuYmlsaWJpbGktcGxheWVyLXZpZGVvIikuY2hpbGRyZW4oInZpZGVvIikuYmluZCgid2FpdGluZyIsZnVuY3Rpb24oKXskKCIjY3JhY2tfYXVkaW8iKS50cmlnZ2VyKCJwYXVzZSIpfSk7JCgiLmJpbGliaWxpLXBsYXllci12aWRlbyIpLmNoaWxkcmVuKCJ2aWRlbyIpLnRyaWdnZXIoInBsYXkiKX19KTskKCIuYnVpLXNlbGVjdC1saXN0IikuY2hpbGRyZW4oImxpW2NyYWNrX29wdGlvbiE9J3RydWUnXSIpLmNsaWNrKGZ1bmN0aW9uKCl7aWYod2luZG93Lm9yaWdpbl92aWRlbyE9PSJub25lIil7JCgiLmJpbGliaWxpLXBsYXllci12aWRlbyIpLmNoaWxkcmVuKCJ2aWRlbyIpLmF0dHIoInNyYyIsd2luZG93Lm9yaWdpbl92aWRlbyk7JCgiI2NyYWNrX2F1ZGlvIikucmVtb3ZlKCk7dmFyIGE9JCgiLmJ1aS1zZWxlY3QtbGlzdCIpLmNoaWxkcmVuKCkubGVuZ3RoO3ZhciBiPXNldEludGVydmFsKGZ1bmN0aW9uKCl7aWYoYSE9JCgiLmJ1aS1zZWxlY3QtbGlzdCIpLmNoaWxkcmVuKCkubGVuZ3RoKXskKCIuYnVpLXNlbGVjdC1saXN0IikucHJlcGVuZCgiPGxpIGNsYXNzPSdidWktc2VsZWN0LWl0ZW0nIGlkPSdjcmFja19zdGF0dWUnIG9uY2xpY2s9J2xvY2F0aW9uLnJlbG9hZCgpJz48c3BhbiBjbGFzcz0nYmlsaWJpbGktcGxheWVyLXZpZGVvLXF1YWxpdHktdGV4dCc+5aaC6ZyA6YeN5paw56C06KejPC9zcGFuPjxzcGFuPuivt+WIt+aWsDwvc3Bhbj48L2xpPiIpO2NsZWFySW50ZXJ2YWwoYil9fSwxMCl9fSk7aWYoY29uZmlnX2NyYWNrLmF1dG9faGlnaGVzdF9xdWFsaXR5PT09dHJ1ZSl7JCgibGlbY3JhY2tfb3B0aW9uPSd0cnVlJ10iKS5jbGljaygpfX19LGZhbHNlKX19O3dpbmRvdy5vbmxvYWQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiBmdW5jVXJsRGVsKGEpe3ZhciBiPXdpbmRvdy5sb2NhdGlvbjt2YXIgYz1iLm9yaWdpbitiLnBhdGhuYW1lKyI/Ijt2YXIgZD1iLnNlYXJjaC5zdWJzdHIoMSk7aWYoZC5pbmRleE9mKGEpPi0xKXt2YXIgZT17fTt2YXIgZj1kLnNwbGl0KCImIik7Zm9yKHZhciBpPTA7aTxmLmxlbmd0aDtpKyspe2ZbaV09ZltpXS5zcGxpdCgiPSIpO2VbZltpXVswXV09ZltpXVsxXX07ZGVsZXRlIGVbYV07dmFyIGc9YytKU09OLnN0cmluZ2lmeShlKS5yZXBsYWNlKC9bXCJce1x9XS9nLCIiKS5yZXBsYWNlKC9cOi9nLCI9IikucmVwbGFjZSgvXCwvZywiJiIpO3JldHVybiBnfX07d2luZG93LmFweD1mdW5jVXJsRGVsKCJzcG1faWRfZnJvbSIpO3N3aXRjaCh3aW5kb3cuYXB4KXtjYXNlImh0dHBzOi8vd3d3LmJpbGliaWxpLmNvbS8iOmJyZWFrO2RlZmF1bHQ6aWYod2luZG93LmxvY2F0aW9uLmhyZWYuc2VhcmNoKCJwbGF5IikhPS0xfHx3aW5kb3cubG9jYXRpb24uaHJlZi5zZWFyY2goInZpZGVvIikhPS0xfHx3aW5kb3cubG9jYXRpb24uaHJlZi5zZWFyY2goImVwIikhPS0xKXt2YXIgaD1zZXRJbnRlcnZhbChmdW5jdGlvbigpe2lmKCQoIi5idWktc2VsZWN0LWxpc3QiKS5maW5kKCIuYmlsaWJpbGktcGxheWVyLWJpZ3ZpcCIpLmxlbmd0aD4wKXt3aW5kb3cuZ2V0X3ZpcF9jb3Vyc2UoKTtjbGVhckludGVydmFsKGgpfTtpZigkKCIuYnVpLXNlbGVjdC1saXN0IikuZmluZCgiLmJpbGliaWxpLXBsYXllci1uZWVkbG9naW4iKS5sZW5ndGg+MCl7aWYoX19JTklUSUFMX1NUQVRFX18udXNlci5pc0xvZ2luPT09ZmFsc2Upe3dpbmRvdy5nZXRfdmlwX2NvdXJzZSgpfTtjbGVhckludGVydmFsKGgpfX0sMTApOyQoIi5saXN0LWJveCwucm91dGVyLWxpbmstYWN0aXZlLC52aWRlby1wYWdlLWNhcmQiKS5jbGljayhmdW5jdGlvbigpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXtsb2NhdGlvbi5yZWxvYWQoKX0sMTApfSk7JCgiLnJlYy1mb290ZXIiKS5jbGljayhmdW5jdGlvbigpe3ZhciBhPSQoIi52aWRlby1wYWdlLWNhcmQiKS5sZW5ndGg7dmFyIGI9c2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXtpZigkKCIudmlkZW8tcGFnZS1jYXJkIikubGVuZ3RoPmEpeyQoIi52aWRlby1wYWdlLWNhcmQiKS5jbGljayhmdW5jdGlvbigpe3NldFRpbWVvdXQoZnVuY3Rpb24oKXtsb2NhdGlvbi5yZWxvYWQoKX0sMTApfSk7Y2xlYXJJbnRlcnZhbChiKX19LDEwKX0pOyQoIi5iaWxpYmlsaS1wbGF5ZXItdmlkZW8iKS5jaGlsZHJlbigidmlkZW8iKS5iaW5kKCJlbmRlZCIsZnVuY3Rpb24oKXt2YXIgYT1zZXRJbnRlcnZhbChmdW5jdGlvbigpe2lmKCQoIi5iaWxpYmlsaS1wbGF5ZXItZW5kaW5nLXBhbmVsLWJveC1yZWNvbW1lbmQiKS5sZW5ndGg+MCl7JCgiLmJpbGliaWxpLXBsYXllci1lbmRpbmctcGFuZWwtYm94LXJlY29tbWVuZCIpLmNsaWNrKGZ1bmN0aW9uKCl7c2V0VGltZW91dChmdW5jdGlvbigpe2xvY2F0aW9uLnJlbG9hZCgpfSwxMCl9KTtjbGVhckludGVydmFsKGEpfX0sMTApfSl9O2JyZWFrfX19Ozs=","requires":[{"meta":{"name":"jquery.min.js","url":"http://cdn.staticfile.org/jquery/2.0.0/jquery.min.js","ts":1595385278846,"mimetype":"text/javascript"},"source":""}]},{"name":"B站视频解析下载","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["https://www.bilibili.com/video/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1594700697159,"data":{}},"enabled":true,"position":8,"uuid":"983bfc55-9274-49d1-a90a-427b25304d73","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBC56uZ6KeG6aKR6Kej5p6Q5LiL6L29Ci8vIEBuYW1lc3BhY2UgICAgaHR0cHM6Ly94YmVpYmVpeC5jb20vYXBpL2JpbGliaWxpCi8vIEB2ZXJzaW9uICAgICAgMS4wCi8vIEBkZXNjcmlwdGlvbiAg5b+r6YCf6Kej5p6QQuermeinhumike+8jOS4i+i9vULnq5nop4bpopHjgIIKLy8gQGF1dGhvciAgICAgICB4YmVpYmVpeC5jb20KLy8gQG1hdGNoICAgICAgICBodHRwczovL3d3dy5iaWxpYmlsaS5jb20vdmlkZW8vKgovLyBAZ3JhbnQgICAgICAgIG5vbmUKLy8gQHJlcXVpcmUgICAgICBodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL2pxdWVyeUAzLjUuMS9kaXN0L2pxdWVyeS5taW4uanMKLy8gPT0vVXNlclNjcmlwdD09CgooZnVuY3Rpb24oKXskKCJib2R5IikuYXBwZW5kKCIgPGRpdiBpZD0nbG9hZGluZycgc3R5bGU9J2xlZnQ6IDEwcHg7Ym90dG9tOiAxMHB4O2JhY2tncm91bmQ6ICMwMEExRDY7Y29sb3I6I2ZmZmZmZjtvdmVyZmxvdzogaGlkZGVuO3otaW5kZXg6IDk5OTk7cG9zaXRpb246IGZpeGVkO3BhZGRpbmc6NXB4O3RleHQtYWxpZ246Y2VudGVyO3dpZHRoOiAxNzVweDtoZWlnaHQ6IDE1cHg7Ym9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czogNHB4O2JvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOiA0cHg7Ym9yZGVyLXRvcC1sZWZ0LXJhZGl1czogNHB4O2JvcmRlci10b3AtcmlnaHQtcmFkaXVzOiA0cHg7Jz7ohJrmnKzliqDovb3kuK0uLi48L2Rpdj4iKTtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7JCgiI2xvYWRpbmciKS5yZW1vdmUoKTskKCIjYXJjX3Rvb2xiYXJfcmVwb3J0IikuYXBwZW5kKCc8ZGl2IGNsYXNzPSJib3R0b20tcGFnZSBwYWdpbmctYm94LWJpZyI+PHNwYW4gY2xhc3M9ImN1cnJlbnQiIHN0eWxlPSJiYWNrZ3JvdW5kOiAjMDBBMUQ2O2hlaWdodDogMjVweDsiIGlkPSJnbyI+6Kej5p6Q5pys6KeG6aKRPC9zcGFuPjwvZGl2PicpOyQoIiNnbyIpLmNsaWNrKGZ1bmN0aW9uKCl7dmFyIHBhdHQxPW5ldyBSZWdFeHAoIihCVnxhdilbYS16QS1aMC05XSoiKTt2YXIgYnZpZD1wYXR0MS5leGVjKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTt2YXIgdGVtcHdpbmRvdz13aW5kb3cub3BlbigiX2JsYW5rIik7dGVtcHdpbmRvdy5sb2NhdGlvbj0iaHR0cHM6Ly94YmVpYmVpeC5jb20vYXBpL2JpbGliaWxpLz9tb25rZXk9IitidmlkWzBdfSl9LDQwMDApfSkoKTs=","requires":[{"meta":{"name":"jquery.min.js","url":"https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js","ts":1598437800442,"mimetype":"text/javascript"},"source":""}]},{"name":"哔哩哔哩大会员视频替换","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["bilivideo.com"],"orig_excludes":[],"orig_includes":["https://www.bilibili.com/bangumi/play/*","https://www.bilibili.com/video/BV*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1595653182825,"data":{}},"enabled":false,"position":9,"file_url":"https://greasyfork.org/scripts/402898-%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9%E5%A4%A7%E4%BC%9A%E5%91%98%E8%A7%86%E9%A2%91%E6%9B%BF%E6%8D%A2/code/%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9%E5%A4%A7%E4%BC%9A%E5%91%98%E8%A7%86%E9%A2%91%E6%9B%BF%E6%8D%A2.user.js","uuid":"1e6d3770-ed16-4b5b-915e-cd9f849ac64f","source":"","requires":[{"meta":{"name":"bilibili%20ASS%20Danmaku%20Downloader%20by%20%E7%94%B0%E7%94%9F.js","url":"https://greasyfork.org/scripts/402897-bilibili-ass-danmaku-downloader-by-%E7%94%B0%E7%94%9F/code/bilibili%20ASS%20Danmaku%20Downloader%20by%20%E7%94%B0%E7%94%9F.js?version=802822","ts":1595861109413,"mimetype":"text/javascript"},"source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgIGJpbGliaWxpIEFTUyBEYW5tYWt1IERvd25sb2FkZXIgYnkg55Sw55SfCi8vIEBuYW1lc3BhY2UgICBodHRwczovL2dpdGh1Yi5jb20vdGlhbnNoCi8vIEBkZXNjcmlwdGlvbiDku6UgQVNTIOagvOW8j+S4i+i9vSBiaWxpYmlsaSDnmoTlvLnluZUKLy8gQGluY2x1ZGUgICAgIGh0dHA6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL2F2KgovLyBAaW5jbHVkZSAgICAgaHR0cDovL2Jhbmd1bWkuYmlsaWJpbGkuY29tL21vdmllLyoKLy8gQHVwZGF0ZVVSTCAgIGh0dHBzOi8vdGlhbnNoLmdpdGh1Yi5pby91cy1kYW5tYWt1L2JpbGliaWxpL2JpbGliaWxpX0FTU19EYW5tYWt1X0Rvd25sb2FkZXIubWV0YS5qcwovLyBAZG93bmxvYWRVUkwgaHR0cHM6Ly90aWFuc2guZ2l0aHViLmlvL3VzLWRhbm1ha3UvYmlsaWJpbGkvYmlsaWJpbGlfQVNTX0Rhbm1ha3VfRG93bmxvYWRlci51c2VyLmpzCi8vIEB2ZXJzaW9uICAgICAxLjExCi8vIEBncmFudCAgICAgICBHTV9hZGRTdHlsZQovLyBAZ3JhbnQgICAgICAgR01feG1saHR0cFJlcXVlc3QKLy8gQHJ1bi1hdCAgICAgIGRvY3VtZW50LXN0YXJ0Ci8vIEBhdXRob3IgICAgICDnlLDnlJ8KLy8gQGNvcHlyaWdodCAgIDIwMTQrLCDnlLDnlJ8KLy8gQGxpY2Vuc2UgICAgIE1vemlsbGEgUHVibGljIExpY2Vuc2UgMi4wOyBodHRwOi8vd3d3Lm1vemlsbGEub3JnL01QTC8yLjAvCi8vIEBsaWNlbnNlICAgICBDQyBBdHRyaWJ1dGlvbi1TaGFyZUFsaWtlIDQuMCBJbnRlcm5hdGlvbmFsOyBodHRwOi8vY3JlYXRpdmVjb21tb25zLm9yZy9saWNlbnNlcy9ieS1zYS80LjAvCi8vIEBjb25uZWN0LXNyYyBjb21tZW50LmJpbGliaWxpLmNvbQovLyBAY29ubmVjdC1zcmMgaW50ZXJmYWNlLmJpbGliaWxpLmNvbQovLyA9PS9Vc2VyU2NyaXB0PT0KCi8qCiAqIENvbW1vbgogKi8KCi8vIOiuvue9rumhuQp2YXIgY29uZmlnID0gewogICdwbGF5UmVzWCc6IDU2MCwgICAgICAgICAgIC8vIOWxj+W5leWIhui+qOeOh+Wuve+8iOWDj+e0oO+8iQogICdwbGF5UmVzWSc6IDQyMCwgICAgICAgICAgIC8vIOWxj+W5leWIhui+qOeOh+mrmO+8iOWDj+e0oO+8iQogICdmb250bGlzdCc6IFsgICAgICAgICAgICAgIC8vIOWtl+W9ou+8iOS8muiHquWKqOmAieaLqeacgOWJjemdouS4gOS4quWPr+eUqOeahO+8iQogICAgJ01pY3Jvc29mdCBZYUhlaSBVSScsCiAgICAnTWljcm9zb2Z0IFlhSGVpJywKICAgICfmlofms4npqb/mraPpu5EnLAogICAgJ1NUSGVpdGlTQycsCiAgICAn6buR5L2TJywKICBdLAogICdmb250X3NpemUnOiAxLjAsICAgICAgICAgIC8vIOWtl+WPt++8iOavlOS+i++8iQogICdyMmx0aW1lJzogOCwgICAgICAgICAgICAgIC8vIOWPs+WIsOW3puW8ueW5leaMgee7reaXtumXtO+8iOenku+8iQogICdmaXh0aW1lJzogNCwgICAgICAgICAgICAgIC8vIOWbuuWumuW8ueW5leaMgee7reaXtumXtO+8iOenku+8iQogICdvcGFjaXR5JzogMC42LCAgICAgICAgICAgIC8vIOS4jemAj+aYjuW6pu+8iOavlOS+i++8iQogICdzcGFjZSc6IDAsICAgICAgICAgICAgICAgIC8vIOW8ueW5lemXtOmalOeahOacgOWwj+awtOW5s+i3neemu++8iOWDj+e0oO+8iQogICdtYXhfZGVsYXknOiA2LCAgICAgICAgICAgIC8vIOacgOWkmuWFgeiuuOW7tui/n+WHoOenkuWHuueOsOW8ueW5lQogICdib3R0b20nOiA1MCwgICAgICAgICAgICAgIC8vIOW6leerr+e7meWtl+W5leS/neeVmeeahOepuumXtO+8iOWDj+e0oO+8iQogICd1c2VfY2FudmFzJzogbnVsbCwgICAgICAgIC8vIOaYr+WQpuS9v+eUqGNhbnZhc+iuoeeul+aWh+acrOWuveW6pu+8iOW4g+WwlOWAvO+8jExpbnV45LiL55qE54Gr54uQ6buY6K6k5ZCm77yM5YW25LuW6buY6K6k5piv77yMRmlyZWZveCBidWcgIzU2MTM2Me+8iQogICdkZWJ1Zyc6IGZhbHNlLCAgICAgICAgICAgIC8vIOaJk+WNsOiwg+ivleS/oeaBrwp9OwoKdmFyIGRlYnVnID0gY29uZmlnLmRlYnVnID8gY29uc29sZS5sb2cuYmluZChjb25zb2xlKSA6IGZ1bmN0aW9uICgpIHsgfTsKCi8vIOWwhuWtl+WFuOS4reeahOWAvOWhq+WFpeWtl+espuS4sgp2YXIgZmlsbFN0ciA9IGZ1bmN0aW9uIChzdHIpIHsKICB2YXIgZGljdCA9IEFycmF5LmFwcGx5KEFycmF5LCBhcmd1bWVudHMpOwogIHJldHVybiBzdHIucmVwbGFjZSgve3soW159XSspfX0vZywgZnVuY3Rpb24gKHIsIG8pIHsKICAgIHZhciByZXQ7CiAgICBkaWN0LnNvbWUoZnVuY3Rpb24gKGkpIHsgcmV0dXJuIHJldCA9IGlbb107IH0pOwogICAgcmV0dXJuIHJldCB8fCAnJzsKICB9KTsKfTsKCi8vIOWwhuminOiJsueahOaVsOWAvOWMluS4uuWNgeWFrei/m+WItuWtl+espuS4suihqOekugp2YXIgUlJHR0JCID0gZnVuY3Rpb24gKGNvbG9yKSB7CiAgdmFyIHQgPSBOdW1iZXIoY29sb3IpLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpOwogIHJldHVybiAoQXJyYXkoNykuam9pbignMCcpICsgdCkuc2xpY2UoLTYpOwp9OwoKLy8g5bCG5Y+v6KeB5bqm6L2s5o2i5Li66YCP5piO5bqmCnZhciBoZXhBbHBoYSA9IGZ1bmN0aW9uIChvcGFjaXR5KSB7CiAgdmFyIGFscGhhID0gTWF0aC5yb3VuZCgweEZGICogKDEgLSBvcGFjaXR5KSkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7CiAgcmV0dXJuIEFycmF5KDMgLSBhbHBoYS5sZW5ndGgpLmpvaW4oJzAnKSArIGFscGhhOwp9OwoKLy8g5a2X56ym5LiyCnZhciBmdW5TdHIgPSBmdW5jdGlvbiAoZnVuKSB7CiAgcmV0dXJuIGZ1bi50b1N0cmluZygpLnNwbGl0KC9cclxufFxufFxyLykuc2xpY2UoMSwgLTEpLmpvaW4oJ1xuJyk7Cn07CgovLyDlubPmlrnlkozlvIDmoLkKdmFyIGh5cG90ID0gTWF0aC5oeXBvdCA/IE1hdGguaHlwb3QuYmluZChNYXRoKSA6IGZ1bmN0aW9uICgpIHsKICByZXR1cm4gTWF0aC5zcXJ0KFswXS5jb25jYXQoQXJyYXkuYXBwbHkoQXJyYXksIGFyZ3VtZW50cykpCiAgICAucmVkdWNlKGZ1bmN0aW9uICh4LCB5KSB7IHJldHVybiB4ICsgeSAqIHk7IH0pKTsKfTsKCi8vIOWIm+W7uuS4i+i9vQp2YXIgc3RhcnREb3dubG9hZCA9IGZ1bmN0aW9uIChkYXRhLCBmaWxlbmFtZSkgewogIHZhciBibG9iID0gbmV3IEJsb2IoW2RhdGFdLCB7IHR5cGU6ICdhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW0nIH0pOwogIHZhciB1cmwgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKTsKICB2YXIgc2F2ZWFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpOwogIHNhdmVhcy5ocmVmID0gdXJsOwogIHNhdmVhcy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2F2ZWFzKTsKICBzYXZlYXMuZG93bmxvYWQgPSBmaWxlbmFtZTsKICBzYXZlYXMuY2xpY2soKTsKICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgc2F2ZWFzLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2F2ZWFzKTsgfSwgMTAwMCkKICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCd1bmxvYWQnLCBmdW5jdGlvbiAoKSB7IHdpbmRvdy5VUkwucmV2b2tlT2JqZWN0VVJMKHVybCk7IH0pOwp9OwoKLy8g6K6h566X5paH5a2X5a695bqmCnZhciBjYWxjV2lkdGggPSAoZnVuY3Rpb24gKCkgewoKICAvLyDkvb/nlKhDYW52YXPorqHnrpcKICB2YXIgY2FsY1dpZHRoQ2FudmFzID0gZnVuY3Rpb24gKCkgewogICAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImNhbnZhcyIpOwogICAgdmFyIGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgiMmQiKTsKICAgIHJldHVybiBmdW5jdGlvbiAoZm9udG5hbWUsIHRleHQsIGZvbnRzaXplKSB7CiAgICAgIGNvbnRleHQuZm9udCA9ICdib2xkICcgKyBmb250c2l6ZSArICdweCAnICsgZm9udG5hbWU7CiAgICAgIHJldHVybiBNYXRoLmNlaWwoY29udGV4dC5tZWFzdXJlVGV4dCh0ZXh0KS53aWR0aCArIGNvbmZpZy5zcGFjZSk7CiAgICB9OwogIH0KCiAgLy8g5L2/55SoRGl26K6h566XCiAgdmFyIGNhbGNXaWR0aERpdiA9IGZ1bmN0aW9uICgpIHsKICAgIHZhciBkID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICBkLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBbCiAgICAgICdhbGw6IHVuc2V0JywgJ3RvcDogLTEwMDAwcHgnLCAnbGVmdDogLTEwMDAwcHgnLAogICAgICAnd2lkdGg6IGF1dG8nLCAnaGVpZ2h0OiBhdXRvJywgJ3Bvc2l0aW9uOiBhYnNvbHV0ZScsCiAgICAnJyxdLmpvaW4oJyAhaW1wb3J0YW50OyAnKSk7CiAgICB2YXIgbGQgPSBmdW5jdGlvbiAoKSB7IGRvY3VtZW50LmJvZHkucGFyZW50Tm9kZS5hcHBlbmRDaGlsZChkKTsgfQogICAgaWYgKCFkb2N1bWVudC5ib2R5KSBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgbGQpOwogICAgZWxzZSBsZCgpOwogICAgcmV0dXJuIGZ1bmN0aW9uIChmb250bmFtZSwgdGV4dCwgZm9udHNpemUpIHsKICAgICAgZC50ZXh0Q29udGVudCA9IHRleHQ7CiAgICAgIGQuc3R5bGUuZm9udCA9ICdib2xkICcgKyBmb250c2l6ZSArICdweCAnICsgZm9udG5hbWU7CiAgICAgIHJldHVybiBkLmNsaWVudFdpZHRoICsgY29uZmlnLnNwYWNlOwogICAgfTsKICB9OwoKICAvLyDmo4Dmn6Xkvb/nlKjlk6rkuKrmtYvph4/mloflrZflrr3luqbnmoTmlrnms5UKICBpZiAoY29uZmlnLnVzZV9jYW52YXMgPT09IG51bGwpIHsKICAgIGlmIChuYXZpZ2F0b3IucGxhdGZvcm0ubWF0Y2goL2xpbnV4L2kpICYmCiAgICAhbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvY2hyb21lL2kpKSBjb25maWcudXNlX2NhbnZhcyA9IGZhbHNlOwogIH0KICBkZWJ1ZygndXNlIGNhbnZhczogJW8nLCBjb25maWcudXNlX2NhbnZhcyAhPT0gZmFsc2UpOwogIGlmIChjb25maWcudXNlX2NhbnZhcyA9PT0gZmFsc2UpIHJldHVybiBjYWxjV2lkdGhEaXYoKTsKICByZXR1cm4gY2FsY1dpZHRoQ2FudmFzKCk7Cgp9KCkpOwoKLy8g6YCJ5oup5ZCI6YCC55qE5a2X5L2TCnZhciBjaG9zZUZvbnQgPSBmdW5jdGlvbiAoZm9udGxpc3QpIHsKICAvLyDmo4Dmn6Xov5nkuKrlrZfkuLLnmoTlrr3luqbmnaXmo4Dmn6XlrZfkvZPmmK/lkKblrZjlnKgKICB2YXIgc2FtcGxlVGV4dCA9CiAgICAnVGhlIHF1aWNrIGJyb3duIGZveCBqdW1wcyBvdmVyIHRoZSBsYXp5IGRvZycgKwogICAgJzc1MzE5MDI0NjgnICsgJywuIS0nICsgJ++8jOOAgu+8mu+8gScgKwogICAgJ+WkqeWcsOeOhOm7hCcgKyAn5YmH6L+R6YGT55+jJzsKICAvLyDlkozov5nkupvlrZfkvZPov5vooYzmr5TovoMKICB2YXIgc2FtcGxlRm9udCA9IFsKICAgICdtb25vc3BhY2UnLCAnc2Fucy1zZXJpZicsICdzYW5zJywKICAgICdTeW1ib2wnLCAnQXJpYWwnLCAnQ29taWMgU2FucyBNUycsICdGaXhlZCcsICdUZXJtaW5hbCcsCiAgICAnVGltZXMnLCAnVGltZXMgTmV3IFJvbWFuJywKICAgICflrovkvZMnLCAn6buR5L2TJywgJ+aWh+aziempv+ato+m7kScsICdNaWNyb3NvZnQgWWFIZWknCiAgXTsKICAvLyDlpoLmnpzooqvmo4Dmn6XnmoTlrZfkvZPlkozln7rlh4blrZfkvZPlj6/ku6XmuLLmn5Plh7rkuI3lkIznmoTlrr3luqYKICAvLyDpgqPkuYjor7TmmI7ooqvmo4Dmn6XnmoTlrZfkvZPmgLvmmK/lrZjlnKjnmoQKICB2YXIgZGlmZkZvbnQgPSBmdW5jdGlvbiAoYmFzZSwgdGVzdCkgewogICAgdmFyIGJhc2VTaXplID0gY2FsY1dpZHRoKGJhc2UsIHNhbXBsZVRleHQsIDcyKTsKICAgIHZhciB0ZXN0U2l6ZSA9IGNhbGNXaWR0aCh0ZXN0ICsgJywnICsgYmFzZSwgc2FtcGxlVGV4dCwgNzIpOwogICAgcmV0dXJuIGJhc2VTaXplICE9PSB0ZXN0U2l6ZTsKICB9OwogIHZhciB2YWxpZEZvbnQgPSBmdW5jdGlvbiAodGVzdCkgewogICAgdmFyIHZhbGlkID0gc2FtcGxlRm9udC5zb21lKGZ1bmN0aW9uIChiYXNlKSB7CiAgICAgIHJldHVybiBkaWZmRm9udChiYXNlLCB0ZXN0KTsKICAgIH0pOwogICAgZGVidWcoJ2ZvbnQgJXM6ICVvJywgdGVzdCwgdmFsaWQpOwogICAgcmV0dXJuIHZhbGlkOwogIH07CiAgLy8g5om+5LiA5Liq6IO955So55qE5a2X5L2TCiAgdmFyIGYgPSBmb250bGlzdFtmb250bGlzdC5sZW5ndGggLSAxXTsKICBmb250bGlzdCA9IGZvbnRsaXN0LmZpbHRlcih2YWxpZEZvbnQpOwogIGRlYnVnKCdmb250bGlzdDogJW8nLCBmb250bGlzdCk7CiAgcmV0dXJuIGZvbnRsaXN0WzBdIHx8IGY7Cn07CgovLyDku47lpIfpgInnmoTlrZfkvZPkuK3pgInmi6nkuIDkuKrmnLrlmajkuIrmj5DkvpvkuobnmoTlrZfkvZMKdmFyIGluaXRGb250ID0gKGZ1bmN0aW9uICgpIHsKICB2YXIgZG9uZSA9IGZhbHNlOwogIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICBpZiAoZG9uZSkgcmV0dXJuOyBkb25lID0gdHJ1ZTsKICAgIGNhbGNXaWR0aCA9IGNhbGNXaWR0aC5iaW5kKHdpbmRvdywKICAgICAgY29uZmlnLmZvbnQgPSBjaG9zZUZvbnQoY29uZmlnLmZvbnRsaXN0KQogICAgKTsKICB9Owp9KCkpOwoKdmFyIGdlbmVyYXRlQVNTID0gZnVuY3Rpb24gKGRhbm1ha3UsIGluZm8pIHsKICB2YXIgYXNzSGVhZGVyID0gZmlsbFN0cihmdW5TdHIoZnVuY3Rpb24gKCkgey8qISBBU1PlvLnluZXmlofku7bmlofku7blpLQKW1NjcmlwdCBJbmZvXQpUaXRsZToge3t0aXRsZX19Ck9yaWdpbmFsIFNjcmlwdDog5qC55o2uIHt7b3JpfX0g55qE5by55bmV5L+h5oGv77yM55SxIGh0dHBzOi8vZ2l0aHViLmNvbS90aWFuc2gvdXMtZGFubWFrdSDnlJ/miJAKU2NyaXB0VHlwZTogdjQuMDArCkNvbGxpc2lvbnM6IE5vcm1hbApQbGF5UmVzWDoge3twbGF5UmVzWH19ClBsYXlSZXNZOiB7e3BsYXlSZXNZfX0KVGltZXI6IDEwLjAwMDAKCltWNCsgU3R5bGVzXQpGb3JtYXQ6IE5hbWUsIEZvbnRuYW1lLCBGb250c2l6ZSwgUHJpbWFyeUNvbG91ciwgU2Vjb25kYXJ5Q29sb3VyLCBPdXRsaW5lQ29sb3VyLCBCYWNrQ29sb3VyLCBCb2xkLCBJdGFsaWMsIFVuZGVybGluZSwgU3RyaWtlT3V0LCBTY2FsZVgsIFNjYWxlWSwgU3BhY2luZywgQW5nbGUsIEJvcmRlclN0eWxlLCBPdXRsaW5lLCBTaGFkb3csIEFsaWdubWVudCwgTWFyZ2luTCwgTWFyZ2luUiwgTWFyZ2luViwgRW5jb2RpbmcKU3R5bGU6IEZpeCx7e2ZvbnR9fSwyNSwmSHt7YWxwaGF9fUZGRkZGRiwmSHt7YWxwaGF9fUZGRkZGRiwmSHt7YWxwaGF9fTAwMDAwMCwmSHt7YWxwaGF9fTAwMDAwMCwxLDAsMCwwLDEwMCwxMDAsMCwwLDEsMiwwLDIsMjAsMjAsMiwwClN0eWxlOiBSMkwse3tmb250fX0sMjUsJkh7e2FscGhhfX1GRkZGRkYsJkh7e2FscGhhfX1GRkZGRkYsJkh7e2FscGhhfX0wMDAwMDAsJkh7e2FscGhhfX0wMDAwMDAsMSwwLDAsMCwxMDAsMTAwLDAsMCwxLDIsMCwyLDIwLDIwLDIsMAoKW0V2ZW50c10KRm9ybWF0OiBMYXllciwgU3RhcnQsIEVuZCwgU3R5bGUsIE5hbWUsIE1hcmdpbkwsIE1hcmdpblIsIE1hcmdpblYsIEVmZmVjdCwgVGV4dAoKICAqL30pLCBjb25maWcsIGluZm8sIHsnYWxwaGEnOiBoZXhBbHBoYShjb25maWcub3BhY2l0eSkgfSk7CiAgLy8g6KGl6b2Q5pWw5a2X5byA5aS055qEMAogIHZhciBwYWRkaW5nTnVtID0gZnVuY3Rpb24gKG51bSwgbGVuKSB7CiAgICBudW0gPSAnJyArIG51bTsKICAgIHdoaWxlIChudW0ubGVuZ3RoIDwgbGVuKSBudW0gPSAnMCcgKyBudW07CiAgICByZXR1cm4gbnVtOwogIH07CiAgLy8g5qC85byP5YyW5pe26Ze0CiAgdmFyIGZvcm1hdFRpbWUgPSBmdW5jdGlvbiAodGltZSkgewogICAgdGltZSA9IDEwMCAqIHRpbWUgXiAwOwogICAgdmFyIGwgPSBbWzEwMCwgMl0sIFs2MCwgMl0sIFs2MCwgMl0sIFtJbmZpbml0eSwgMF1dLm1hcChmdW5jdGlvbiAoYykgewogICAgICB2YXIgciA9IHRpbWUgJSBjWzBdOwogICAgICB0aW1lID0gKHRpbWUgLSByKSAvIGNbMF07CiAgICAgIHJldHVybiBwYWRkaW5nTnVtKHIsIGNbMV0pOwogICAgfSkucmV2ZXJzZSgpOwogICAgcmV0dXJuIGwuc2xpY2UoMCwgLTEpLmpvaW4oJzonKSArICcuJyArIGxbM107CiAgfTsKICAvLyDmoLzlvI/ljJbnibnmlYgKICB2YXIgZm9ybWF0ID0gKGZ1bmN0aW9uICgpIHsKICAgIC8vIOmAgueUqOS6juaJgOacieW8ueW5lQogICAgdmFyIGNvbW1vbiA9IGZ1bmN0aW9uIChsaW5lKSB7CiAgICAgIHZhciBzID0gJyc7CiAgICAgIHZhciByZ2IgPSBsaW5lLmNvbG9yLnNwbGl0KC8oLi4pLykuZmlsdGVyKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4OyB9KQogICAgICAgIC5tYXAoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHBhcnNlSW50KHgsIDE2KTsgfSk7CiAgICAgIC8vIOWmguaenOS4jeaYr+eZveiJsu+8jOimgeaMh+WumuW8ueW5leeJueauiueahOminOiJsgogICAgICBpZiAobGluZS5jb2xvciAhPT0gJ0ZGRkZGRicpIC8vIGxpbmUuY29sb3Ig5pivIFJSR0dCQiDmoLzlvI8KICAgICAgICBzICs9ICdcXGMmSCcgKyBsaW5lLmNvbG9yLnNwbGl0KC8oLi4pLykucmV2ZXJzZSgpLmpvaW4oJycpOwogICAgICAvLyDlpoLmnpzlvLnluZXpopzoibLmr5TovoPmt7HvvIznlKjnmb3oibLnmoTlpJbovrnmoYYKICAgICAgdmFyIGRhcmsgPSByZ2JbMF0gKiAwLjI5OSArIHJnYlsxXSAqIDAuNTg3ICsgcmdiWzJdICogMC4xMTQgPCAweDMwOwogICAgICBpZiAoZGFyaykgcyArPSAnXFwzYyZIRkZGRkZGJzsKICAgICAgaWYgKGxpbmUuc2l6ZSAhPT0gMjUpIHMgKz0gJ1xcZnMnICsgbGluZS5zaXplOwogICAgICByZXR1cm4gczsKICAgIH07CiAgICAvLyDpgILnlKjkuo7ku47lj7PliLDlt6blvLnluZUKICAgIHZhciByMmwgPSBmdW5jdGlvbiAobGluZSkgewogICAgICByZXR1cm4gJ1xcbW92ZSgnICsgWwogICAgICAgIGxpbmUucG9zcy54LCBsaW5lLnBvc3MueSwgbGluZS5wb3NkLngsIGxpbmUucG9zZC55CiAgICAgIF0uam9pbignLCcpICsgJyknOwogICAgfTsKICAgIC8vIOmAgueUqOS6juWbuuWumuS9jee9ruW8ueW5lQogICAgdmFyIGZpeCA9IGZ1bmN0aW9uIChsaW5lKSB7CiAgICAgIHJldHVybiAnXFxwb3MoJyArIFsKICAgICAgICBsaW5lLnBvc3MueCwgbGluZS5wb3NzLnkKICAgICAgXS5qb2luKCcsJykgKyAnKSc7CiAgICB9OwogICAgdmFyIHdpdGhDb21tb24gPSBmdW5jdGlvbiAoZikgewogICAgICByZXR1cm4gZnVuY3Rpb24gKGxpbmUpIHsgcmV0dXJuIGYobGluZSkgKyBjb21tb24obGluZSk7IH07CiAgICB9OwogICAgcmV0dXJuIHsKICAgICAgJ1IyTCc6IHdpdGhDb21tb24ocjJsKSwKICAgICAgJ0ZpeCc6IHdpdGhDb21tb24oZml4KSwKICAgIH07CiAgfSgpKTsKICAvLyDovazkuYnkuIDkupvlrZfnrKYKICB2YXIgZXNjYXBlQXNzVGV4dCA9IGZ1bmN0aW9uIChzKSB7CiAgICAvLyAieyLjgIEifSLlrZfnrKZsaWJhc3Plj6/ku6XovazkuYnvvIzkvYbmmK9WU0ZpbHRlcuS4jeWPr+S7pe+8jOaJgOS7peebtOaOpeeUqOWFqOinkuihpeS4igogICAgcmV0dXJuIHMucmVwbGFjZSgvey9nLCAn772bJykucmVwbGFjZSgvfS9nLCAn772dJykucmVwbGFjZSgvXHJ8XG4vZywgJycpOwogIH07CiAgLy8g5bCG5LiA6KGM6L2s5o2i5Li6QVNT55qE5LqL5Lu2CiAgdmFyIGNvbnZlcnQyQXNzID0gZnVuY3Rpb24gKGxpbmUpIHsKICAgIHJldHVybiAnRGlhbG9ndWU6ICcgKyBbCiAgICAgIDAsCiAgICAgIGZvcm1hdFRpbWUobGluZS5zdGltZSksCiAgICAgIGZvcm1hdFRpbWUobGluZS5kdGltZSksCiAgICAgIGxpbmUudHlwZSwKICAgICAgJywyMCwyMCwyLCwnLAogICAgXS5qb2luKCcsJykKICAgICAgKyAneycgKyBmb3JtYXRbbGluZS50eXBlXShsaW5lKSArICd9JwogICAgICArIGVzY2FwZUFzc1RleHQobGluZS50ZXh0KTsKICB9OwogIHJldHVybiBhc3NIZWFkZXIgKwogICAgZGFubWFrdS5tYXAoY29udmVydDJBc3MpCiAgICAuZmlsdGVyKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4OyB9KQogICAgLmpvaW4oJ1xuJyk7Cn07CgovKgoK5LiL5paH5a2X5q+N5ZCr5LmJ77yaCjAgICAgICAgfHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0teC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0+CiAgICAgICAgICAgX19fX19fX19fX19fX19fX19fX19fY19fX19fX19fX19fX19fX19fX19fXwo9ICAgICAgICAvICAgICAgICAgICAgICAgICAgICAgd2MgICAgICAgICAgICAgICAgICAgICAgXCAgICAgIDAKfCAgICAgICB8ICAgICAgICAgICAgICAgICAgIHwtLXYtLXwgICAgICAgICAgICAgICAgIHd2ICB8ICB8LS12LS18CnwgICAgZCAgfC0tdi0tfCAgICAgICAgICAgICAgIGQgZiAgICAgICAgICAgICAgICAgfC0tdi0tfAp5IHwtLXYtLXwgIGwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGYgIHwgIHMgICAgXyBwCnwgICAgICAgfCAgICAgICAgICAgICAgVklERU8gICAgICAgICAgIHwtLXYtLXwgICAgICAgICAgfC0tdi0tfCBfIG0KdiAgICAgICB8ICAgICAgICAgICAgICBBUkVBICAgICAgICAgICAgKHggXiB5KSAgICAgICAgICB8Cgp2OiDlvLnluZUKYzog5bGP5bmVCgowOiDlvLnluZXlj5HpgIEKYTog5Y+v6KGM5pa55qGICgpzOiDlvIDlp4vlh7rnjrAKZjog5Ye6546w5a6M5YWoCmw6IOW8gOWni+a2iOWksQpkOiDmtojlpLHlrozlhagKCnA6IOS4iui+uee8mO+8iOWQq++8iQptOiDkuIvovrnnvJjvvIjkuI3lkKvvvIkKCnc6IOWuveW6pgpoOiDpq5jluqYKYjog5bqV56uv5L+d55WZCgp0OiDml7bpl7TngrkKdTog5pe26Ze05q61CnI6IOW7tui/nwoK5bm26KeE5a6aCnRzIDo9IHQwcyArIHIKdGYgOj0gd3YgLyAod2MgKyB3cykgKiBwICsgdHMKdGwgOj0gd3MgLyAod2MgKyB3cykgKiBwICsgdHMKdGQgOj0gcCArIHRzCgoqLwoKLy8g5rua5Yqo5by55bmVCnZhciBub3JtYWxEYW5tYWt1ID0gKGZ1bmN0aW9uICh3YywgaGMsIGIsIHUsIG1heHIpIHsKICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgLy8g5Yid5aeL5YyW5bGP5bmV5aSW6Z2i5piv5LiN5Y+v55So55qECiAgICB2YXIgdXNlZCA9IFsKICAgICAgeyAncCc6IC1JbmZpbml0eSwgJ20nOiAwLCAndGYnOiBJbmZpbml0eSwgJ3RkJzogSW5maW5pdHksICdiJzogZmFsc2UgfSwKICAgICAgeyAncCc6IGhjLCAnbSc6IEluZmluaXR5LCAndGYnOiBJbmZpbml0eSwgJ3RkJzogSW5maW5pdHksICdiJzogZmFsc2UgfSwKICAgICAgeyAncCc6IGhjIC0gYiwgJ20nOiBoYywgJ3RmJzogSW5maW5pdHksICd0ZCc6IEluZmluaXR5LCAnYic6IHRydWUgfSwKICAgIF07CiAgICAvLyDmo4Dmn6XkuIDkupvlj6/nlKjnmoTkvY3nva4KICAgIHZhciBhdmFpbGFibGUgPSBmdW5jdGlvbiAoaHYsIHQwcywgdDBsLCBiKSB7CiAgICAgIHZhciBzdWdnZXN0aW9uID0gW107CiAgICAgIC8vIOi/meS6m+S4iui+uee8mOaAu+S5i+WIq+eahOWdl+eahOS4i+i+uee8mAogICAgICB1c2VkLmZvckVhY2goZnVuY3Rpb24gKGkpIHsKICAgICAgICBpZiAoaS5tID4gaGMpIHJldHVybjsKICAgICAgICB2YXIgcCA9IGkubTsKICAgICAgICB2YXIgbSA9IHAgKyBodjsKICAgICAgICB2YXIgdGFzID0gdDBzOwogICAgICAgIHZhciB0YWwgPSB0MGw7CiAgICAgICAgLy8g6L+Z5Lqb5Z2X55qE5bem6L6557yY5oC75piv6L+Z5Liq5Yy65Z+f6YeM6Z2i5pyA5aSn55qE6L6557yYCiAgICAgICAgdXNlZC5mb3JFYWNoKGZ1bmN0aW9uIChqKSB7CiAgICAgICAgICBpZiAoai5wID49IG0pIHJldHVybjsKICAgICAgICAgIGlmIChqLm0gPD0gcCkgcmV0dXJuOwogICAgICAgICAgaWYgKGouYiAmJiBiKSByZXR1cm47CiAgICAgICAgICB0YXMgPSBNYXRoLm1heCh0YXMsIGoudGYpOwogICAgICAgICAgdGFsID0gTWF0aC5tYXgodGFsLCBqLnRkKTsKICAgICAgICB9KTsKICAgICAgICAvLyDmnIDlkI7kvZzkuLrkuIDnp43lpIfpgInnlZnkuIvmnaUKICAgICAgICBzdWdnZXN0aW9uLnB1c2goewogICAgICAgICAgJ3AnOiBwLAogICAgICAgICAgJ3InOiBNYXRoLm1heCh0YXMgLSB0MHMsIHRhbCAtIHQwbCksCiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgICAvLyDmoLnmja7pq5jluqbmjpLluo8KICAgICAgc3VnZ2VzdGlvbi5zb3J0KGZ1bmN0aW9uICh4LCB5KSB7IHJldHVybiB4LnAgLSB5LnA7IH0pOwogICAgICB2YXIgbXIgPSBtYXhyOwogICAgICAvLyDlj4jpnaDlj7Plj4jpnaDkuIvnmoTpgInmi6nlj6/ku6Xlv73nlaXvvIzliankuIvnmoTov5Tlm54KICAgICAgc3VnZ2VzdGlvbiA9IHN1Z2dlc3Rpb24uZmlsdGVyKGZ1bmN0aW9uIChpKSB7CiAgICAgICAgaWYgKGkuciA+PSBtcikgcmV0dXJuIGZhbHNlOwogICAgICAgIG1yID0gaS5yOwogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9KTsKICAgICAgcmV0dXJuIHN1Z2dlc3Rpb247CiAgICB9OwogICAgLy8g5re75Yqg5LiA5Liq6KKr5L2/55So55qECiAgICB2YXIgdXNlID0gZnVuY3Rpb24gKHAsIG0sIHRmLCB0ZCkgewogICAgICB1c2VkLnB1c2goeyAncCc6IHAsICdtJzogbSwgJ3RmJzogdGYsICd0ZCc6IHRkLCAnYic6IGZhbHNlIH0pOwogICAgfTsKICAgIC8vIOagueaNruaXtumXtOWQjOatpeaOieaXoOeUqOeahAogICAgdmFyIHN5biA9IGZ1bmN0aW9uICh0MHMsIHQwbCkgewogICAgICB1c2VkID0gdXNlZC5maWx0ZXIoZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGkudGYgPiB0MHMgfHwgaS50ZCA+IHQwbDsgfSk7CiAgICB9OwogICAgLy8g57uZ5omA5pyJ5Y+v6IO955qE5L2N572u5omT5YiG77yM5YiG5pWw5pivWzAsIDEp55qECiAgICB2YXIgc2NvcmUgPSBmdW5jdGlvbiAoaSkgewogICAgICBpZiAoaS5yID4gbWF4cikgcmV0dXJuIC1JbmZpbml0eTsKICAgICAgcmV0dXJuIDEgLSBoeXBvdChpLnIgLyBtYXhyLCBpLnAgLyBoYykgKiBNYXRoLlNRUlQxXzI7CiAgICB9OwogICAgLy8g5re75Yqg5LiA5p2hCiAgICByZXR1cm4gZnVuY3Rpb24gKHQwcywgd3YsIGh2LCBiKSB7CiAgICAgIHZhciB0MGwgPSB3YyAvICh3diArIHdjKSAqIHUgKyB0MHM7CiAgICAgIHN5bih0MHMsIHQwbCk7CiAgICAgIHZhciBhbCA9IGF2YWlsYWJsZShodiwgdDBzLCB0MGwsIGIpOwogICAgICBpZiAoIWFsLmxlbmd0aCkgcmV0dXJuIG51bGw7CiAgICAgIHZhciBzY29yZWQgPSBhbC5tYXAoZnVuY3Rpb24gKGkpIHsgcmV0dXJuIFtzY29yZShpKSwgaV07IH0pOwogICAgICB2YXIgYmVzdCA9IHNjb3JlZC5yZWR1Y2UoZnVuY3Rpb24gKHgsIHkpIHsKICAgICAgICByZXR1cm4geFswXSA+IHlbMF0gPyB4IDogeTsKICAgICAgfSlbMV07CiAgICAgIHZhciB0cyA9IHQwcyArIGJlc3QucjsKICAgICAgdmFyIHRmID0gd3YgLyAod3YgKyB3YykgKiB1ICsgdHM7CiAgICAgIHZhciB0ZCA9IHUgKyB0czsKICAgICAgdXNlKGJlc3QucCwgYmVzdC5wICsgaHYsIHRmLCB0ZCk7CiAgICAgIHJldHVybiB7CiAgICAgICAgJ3RvcCc6IGJlc3QucCwKICAgICAgICAndGltZSc6IHRzLAogICAgICB9OwogICAgfTsKICB9Owp9KGNvbmZpZy5wbGF5UmVzWCwgY29uZmlnLnBsYXlSZXNZLCBjb25maWcuYm90dG9tLCBjb25maWcucjJsdGltZSwgY29uZmlnLm1heF9kZWxheSkpOwoKLy8g6aG26YOo44CB5bqV6YOo5by55bmVCnZhciBzaWRlRGFubWFrdSA9IChmdW5jdGlvbiAoaGMsIGIsIHUsIG1heHIpIHsKICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgdmFyIHVzZWQgPSBbCiAgICAgIHsgJ3AnOiAtSW5maW5pdHksICdtJzogMCwgJ3RkJzogSW5maW5pdHksICdiJzogZmFsc2UgfSwKICAgICAgeyAncCc6IGhjLCAnbSc6IEluZmluaXR5LCAndGQnOiBJbmZpbml0eSwgJ2InOiBmYWxzZSB9LAogICAgICB7ICdwJzogaGMgLSBiLCAnbSc6IGhjLCAndGQnOiBJbmZpbml0eSwgJ2InOiB0cnVlIH0sCiAgICBdOwogICAgLy8g5p+l5om+5Y+v55So55qE5L2N572uCiAgICB2YXIgZnIgPSBmdW5jdGlvbiAocCwgbSwgdDBzLCBiKSB7CiAgICAgIHZhciB0YXMgPSB0MHM7CiAgICAgIHVzZWQuZm9yRWFjaChmdW5jdGlvbiAoaikgewogICAgICAgIGlmIChqLnAgPj0gbSkgcmV0dXJuOwogICAgICAgIGlmIChqLm0gPD0gcCkgcmV0dXJuOwogICAgICAgIGlmIChqLmIgJiYgYikgcmV0dXJuOwogICAgICAgIHRhcyA9IE1hdGgubWF4KHRhcywgai50ZCk7CiAgICAgIH0pOwogICAgICByZXR1cm4geyAncic6IHRhcyAtIHQwcywgJ3AnOiBwLCAnbSc6IG0gfTsKICAgIH07CiAgICAvLyDpobbpg6gKICAgIHZhciB0b3AgPSBmdW5jdGlvbiAoaHYsIHQwcywgYikgewogICAgICB2YXIgc3VnZ2VzdGlvbiA9IFtdOwogICAgICB1c2VkLmZvckVhY2goZnVuY3Rpb24gKGkpIHsKICAgICAgICBpZiAoaS5tID4gaGMpIHJldHVybjsKICAgICAgICBzdWdnZXN0aW9uLnB1c2goZnIoaS5tLCBpLm0gKyBodiwgdDBzLCBiKSk7CiAgICAgIH0pOwogICAgICByZXR1cm4gc3VnZ2VzdGlvbjsKICAgIH07CiAgICAvLyDlupXpg6gKICAgIHZhciBib3R0b20gPSBmdW5jdGlvbiAoaHYsIHQwcywgYikgewogICAgICB2YXIgc3VnZ2VzdGlvbiA9IFtdOwogICAgICB1c2VkLmZvckVhY2goZnVuY3Rpb24gKGkpIHsKICAgICAgICBpZiAoaS5wIDwgMCkgcmV0dXJuOwogICAgICAgIHN1Z2dlc3Rpb24ucHVzaChmcihpLnAgLSBodiwgaS5wLCB0MHMsIGIpKTsKICAgICAgfSk7CiAgICAgIHJldHVybiBzdWdnZXN0aW9uOwogICAgfTsKICAgIHZhciB1c2UgPSBmdW5jdGlvbiAocCwgbSwgdGQpIHsKICAgICAgdXNlZC5wdXNoKHsgJ3AnOiBwLCAnbSc6IG0sICd0ZCc6IHRkLCAnYic6IGZhbHNlIH0pOwogICAgfTsKICAgIHZhciBzeW4gPSBmdW5jdGlvbiAodDBzKSB7CiAgICAgIHVzZWQgPSB1c2VkLmZpbHRlcihmdW5jdGlvbiAoaSkgeyByZXR1cm4gaS50ZCA+IHQwczsgfSk7CiAgICB9OwogICAgLy8g5oyR6YCJ5pyA5aW955qE5pa55qGI77ya5bu26L+f5bCP55qE5LyY5YWI77yM5L2N572u5LiN6YeN6KaBCiAgICB2YXIgc2NvcmUgPSBmdW5jdGlvbiAoaSwgaXNfdG9wKSB7CiAgICAgIGlmIChpLnIgPiBtYXhyKSByZXR1cm4gLUluZmluaXR5OwogICAgICB2YXIgZiA9IGZ1bmN0aW9uIChwKSB7IHJldHVybiBpc190b3AgPyBwIDogKGhjIC0gcCk7IH07CiAgICAgIHJldHVybiAxIC0gKGkuciAvIG1heHIgKiAoMzEvMzIpICsgZihpLnApIC8gaGMgKiAoMS8zMikpOwogICAgfTsKICAgIHJldHVybiBmdW5jdGlvbiAodDBzLCBodiwgaXNfdG9wLCBiKSB7CiAgICAgIHN5bih0MHMpOwogICAgICB2YXIgYWwgPSAoaXNfdG9wID8gdG9wIDogYm90dG9tKShodiwgdDBzLCBiKTsKICAgICAgaWYgKCFhbC5sZW5ndGgpIHJldHVybiBudWxsOwogICAgICB2YXIgc2NvcmVkID0gYWwubWFwKGZ1bmN0aW9uIChpKSB7IHJldHVybiBbc2NvcmUoaSwgaXNfdG9wKSwgaV07IH0pOwogICAgICB2YXIgYmVzdCA9IHNjb3JlZC5yZWR1Y2UoZnVuY3Rpb24gKHgsIHkpIHsKICAgICAgICByZXR1cm4geFswXSA+IHlbMF0gPyB4IDogeTsKICAgICAgfSlbMV07CiAgICAgIHVzZShiZXN0LnAsIGJlc3QubSwgYmVzdC5yICsgdDBzICsgdSkKICAgICAgcmV0dXJuIHsgJ3RvcCc6IGJlc3QucCwgJ3RpbWUnOiBiZXN0LnIgKyB0MHMgfTsKICAgIH07CiAgfTsKfShjb25maWcucGxheVJlc1ksIGNvbmZpZy5ib3R0b20sIGNvbmZpZy5maXh0aW1lLCBjb25maWcubWF4X2RlbGF5KSk7CgovLyDkuLrmr4/mnaHlvLnluZXlronnva7kvY3nva4KdmFyIHNldFBvc2l0aW9uID0gZnVuY3Rpb24gKGRhbm1ha3UpIHsKICB2YXIgbm9ybWFsID0gbm9ybWFsRGFubWFrdSgpLCBzaWRlID0gc2lkZURhbm1ha3UoKTsKICByZXR1cm4gZGFubWFrdQogICAgLnNvcnQoZnVuY3Rpb24gKHgsIHkpIHsgcmV0dXJuIHgudGltZSAtIHkudGltZTsgfSkKICAgIC5tYXAoZnVuY3Rpb24gKGxpbmUpIHsKICAgICAgdmFyIGZvbnRfc2l6ZSA9IE1hdGgucm91bmQobGluZS5zaXplICogY29uZmlnLmZvbnRfc2l6ZSk7CiAgICAgIHZhciB3aWR0aCA9IGNhbGNXaWR0aChsaW5lLnRleHQsIGZvbnRfc2l6ZSk7CiAgICAgIHN3aXRjaCAobGluZS5tb2RlKSB7CiAgICAgICAgY2FzZSAnUjJMJzogcmV0dXJuIChmdW5jdGlvbiAoKSB7CiAgICAgICAgICB2YXIgcG9zID0gbm9ybWFsKGxpbmUudGltZSwgd2lkdGgsIGZvbnRfc2l6ZSwgbGluZS5ib3R0b20pOwogICAgICAgICAgaWYgKCFwb3MpIHJldHVybiBudWxsOwogICAgICAgICAgbGluZS50eXBlID0gJ1IyTCc7CiAgICAgICAgICBsaW5lLnN0aW1lID0gcG9zLnRpbWU7CiAgICAgICAgICBsaW5lLnBvc3MgPSB7CiAgICAgICAgICAgICd4JzogY29uZmlnLnBsYXlSZXNYICsgd2lkdGggLyAyLAogICAgICAgICAgICAneSc6IHBvcy50b3AgKyBmb250X3NpemUsCiAgICAgICAgICB9OwogICAgICAgICAgbGluZS5wb3NkID0gewogICAgICAgICAgICAneCc6IC13aWR0aCAvIDIsCiAgICAgICAgICAgICd5JzogcG9zLnRvcCArIGZvbnRfc2l6ZSwKICAgICAgICAgIH07CiAgICAgICAgICBsaW5lLmR0aW1lID0gY29uZmlnLnIybHRpbWUgKyBsaW5lLnN0aW1lOwogICAgICAgICAgcmV0dXJuIGxpbmU7CiAgICAgICAgfSgpKTsKICAgICAgICBjYXNlICdUT1AnOiBjYXNlICdCT1RUT00nOiByZXR1cm4gKGZ1bmN0aW9uIChpc1RvcCkgewogICAgICAgICAgdmFyIHBvcyA9IHNpZGUobGluZS50aW1lLCBmb250X3NpemUsIGlzVG9wLCBsaW5lLmJvdHRvbSk7CiAgICAgICAgICBpZiAoIXBvcykgcmV0dXJuIG51bGw7CiAgICAgICAgICBsaW5lLnR5cGUgPSAnRml4JzsKICAgICAgICAgIGxpbmUuc3RpbWUgPSBwb3MudGltZTsKICAgICAgICAgIGxpbmUucG9zZCA9IGxpbmUucG9zcyA9IHsKICAgICAgICAgICAgJ3gnOiBNYXRoLnJvdW5kKGNvbmZpZy5wbGF5UmVzWCAvIDIpLAogICAgICAgICAgICAneSc6IHBvcy50b3AgKyBmb250X3NpemUsCiAgICAgICAgICB9OwogICAgICAgICAgbGluZS5kdGltZSA9IGNvbmZpZy5maXh0aW1lICsgbGluZS5zdGltZTsKICAgICAgICAgIHJldHVybiBsaW5lOwogICAgICAgIH0obGluZS5tb2RlID09PSAnVE9QJykpOwogICAgICAgIGRlZmF1bHQ6IHJldHVybiBudWxsOwogICAgICB9OwogICAgfSkKICAgIC5maWx0ZXIoZnVuY3Rpb24gKGwpIHsgcmV0dXJuIGw7IH0pCiAgICAuc29ydChmdW5jdGlvbiAoeCwgeSkgeyByZXR1cm4geC5zdGltZSAtIHkuc3RpbWU7IH0pOwp9OwoKLyoKICogYmlsaWJpbGkKICovCgovLyDojrflj5Z4bWwKdmFyIGZldGNoWE1MID0gZnVuY3Rpb24gKGNpZCwgY2FsbGJhY2spIHsKICBHTV94bWxodHRwUmVxdWVzdCh7CiAgICAnbWV0aG9kJzogJ0dFVCcsCiAgICAndXJsJzogJ2h0dHA6Ly9jb21tZW50LmJpbGliaWxpLmNvbS97e2NpZH19LnhtbCcucmVwbGFjZSgne3tjaWR9fScsIGNpZCksCiAgICAnb25sb2FkJzogZnVuY3Rpb24gKHJlc3ApIHsKICAgICAgdmFyIGNvbnRlbnQgPSByZXNwLnJlc3BvbnNlVGV4dC5yZXBsYWNlKC8oPzpbXDAtXHgwOFx4MEJcZlx4MEUtXHgxRlx1RkZGRVx1RkZGRl18W1x1RDgwMC1cdURCRkZdKD8hW1x1REMwMC1cdURGRkZdKXwoPzpbXlx1RDgwMC1cdURCRkZdfF4pW1x1REMwMC1cdURGRkZdKS9nLCAiIik7CiAgICAgIGNhbGxiYWNrKGNvbnRlbnQpOwogICAgfQogIH0pOwp9OwoKdmFyIGZldGNoRGFubWFrdSA9IGZ1bmN0aW9uIChjaWQsIGNhbGxiYWNrKSB7CiAgZmV0Y2hYTUwoY2lkLCBmdW5jdGlvbiAoY29udGVudCkgewogICAgY2FsbGJhY2socGFyc2VYTUwoY29udGVudCkpOwogIH0pOwp9OwoKdmFyIHBhcnNlWE1MID0gZnVuY3Rpb24gKGNvbnRlbnQpIHsKICB2YXIgZGF0YSA9IChuZXcgRE9NUGFyc2VyKCkpLnBhcnNlRnJvbVN0cmluZyhjb250ZW50LCAndGV4dC94bWwnKTsKICByZXR1cm4gQXJyYXkuYXBwbHkoQXJyYXksIGRhdGEucXVlcnlTZWxlY3RvckFsbCgnZCcpKS5tYXAoZnVuY3Rpb24gKGxpbmUpIHsKICAgIHZhciBpbmZvID0gbGluZS5nZXRBdHRyaWJ1dGUoJ3AnKS5zcGxpdCgnLCcpLCB0ZXh0ID0gbGluZS50ZXh0Q29udGVudDsKICAgIHJldHVybiB7CiAgICAgICd0ZXh0JzogdGV4dCwKICAgICAgJ3RpbWUnOiBOdW1iZXIoaW5mb1swXSksCiAgICAgICdtb2RlJzogW3VuZGVmaW5lZCwgJ1IyTCcsICdSMkwnLCAnUjJMJywgJ0JPVFRPTScsICdUT1AnXVtOdW1iZXIoaW5mb1sxXSldLAogICAgICAnc2l6ZSc6IE51bWJlcihpbmZvWzJdKSwKICAgICAgJ2NvbG9yJzogUlJHR0JCKHBhcnNlSW50KGluZm9bM10sIDEwKSAmIDB4ZmZmZmZmKSwKICAgICAgJ2JvdHRvbSc6IE51bWJlcihpbmZvWzVdKSA+IDAsCiAgICAgIC8vICdjcmVhdGUnOiBuZXcgRGF0ZShOdW1iZXIoaW5mb1s0XSkpLAogICAgICAvLyAncG9vbCc6IE51bWJlcihpbmZvWzVdKSwKICAgICAgLy8gJ3NlbmRlcic6IFN0cmluZyhpbmZvWzZdKSwKICAgICAgLy8gJ2RtaWQnOiBOdW1iZXIoaW5mb1s3XSksCiAgICB9OwogIH0pOwp9OwoKLy8g6I635Y+W5b2T5YmNY2lkCnZhciBnZXRDaWQgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHsKICBkZWJ1ZygnZ2V0IGNpZC4uLicpOwogIHZhciBjaWQgPSBudWxsLCBzcmMgPSBudWxsOwogIHRyeSB7CiAgICBzcmMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYm9mcWkgaWZyYW1lLCAjbW92aWVib2ZxaSBpZnJhbWUnKS5zcmMucmVwbGFjZSgvXi4qXD8vLCAnJyk7CiAgICBjaWQgPSBOdW1iZXIoc3JjLm1hdGNoKC9jaWQ9KFxkKykvKVsxXSk7CiAgfSBjYXRjaCAoZSkgeyB9CiAgaWYgKCFjaWQpIHRyeSB7CiAgICBzcmMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYm9mcWkgZW1iZWQsICNtb3ZpZWJvZnFpIGVtYmVkJykuZ2V0QXR0cmlidXRlKCdmbGFzaHZhcnMnKTsKICAgIGNpZCA9IE51bWJlcihzcmMubWF0Y2goL2NpZD0oXGQrKS8pWzFdKTsKICB9IGNhdGNoIChlKSB7IH0KICBpZiAoIWNpZCkgdHJ5IHsKICAgIHNyYyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNib2ZxaSBvYmplY3QgcGFyYW1bbmFtZT0iZmxhc2h2YXJzIl0sICNtb3ZpZWJvZnFpIG9iamVjdCBwYXJhbVtuYW1lPSJmbGFzaHZhcnMiXScpLmdldEF0dHJpYnV0ZSgndmFsdWUnKTsKICAgIGNpZCA9IE51bWJlcihzcmMubWF0Y2goL2NpZD0oXGQrKS8pWzFdKTsKICB9IGNhdGNoIChlKSB7IH0KICBpZiAoY2lkKSBzZXRUaW1lb3V0KGNhbGxiYWNrLCAwLCBjaWQpOwogIGVsc2UgaWYgKHNyYykgR01feG1saHR0cFJlcXVlc3QoewogICAgJ21ldGhvZCc6ICdHRVQnLAogICAgJ3VybCc6ICdodHRwOi8vaW50ZXJmYWNlLmJpbGliaWxpLmNvbS9wbGF5ZXI/JyArIHNyYywKICAgICdvbmxvYWQnOiBmdW5jdGlvbiAocmVzcCkgewogICAgICB0cnkgeyBjaWQgPSBOdW1iZXIocmVzcC5yZXNwb25zZVRleHQubWF0Y2goLzxjaGF0aWQ+KFxkKyk8XC9jaGF0aWQ+LylbMV0pOyB9CiAgICAgIGNhdGNoIChlKSB7IH0KICAgICAgc2V0VGltZW91dChjYWxsYmFjaywgMCwgY2lkIHx8IHVuZGVmaW5lZCk7CiAgICB9LAogICAgJ29uZXJyb3InOiBmdW5jdGlvbiAoKSB7IHNldFRpbWVvdXQoY2FsbGJhY2ssIDApOyB9CiAgfSk7IGVsc2UgewogICAgc2V0VGltZW91dChnZXRDaWQsIDEwMCwgY2FsbGJhY2spOwogIH0KfTsKCi8vIOS4i+i9veeahOS4u+eoi+W6jwp2YXIgbWluYSA9IGZ1bmN0aW9uIChjaWQwKSB7CiAgZ2V0Q2lkKGZ1bmN0aW9uIChjaWQpIHsKICAgIGNpZCA9IGNpZCB8fCBjaWQwOwogICAgZmV0Y2hEYW5tYWt1KGNpZCwgZnVuY3Rpb24gKGRhbm1ha3UpIHsKICAgICAgdmFyIG5hbWU7CiAgICAgIHRyeSB7IG5hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcudmlld2JveCBoMSwgLnZpZXdib3ggaDInKS50ZXh0Q29udGVudDsgfQogICAgICBjYXRjaCAoZSkgeyBuYW1lID0gJycgKyBjaWQ7IH0KICAgICAgZGVidWcoJ2dvdCB4bWwgd2l0aCAlZCBkYW5tYWt1JywgZGFubWFrdS5sZW5ndGgpOwogICAgICB2YXIgYXNzID0gZ2VuZXJhdGVBU1Moc2V0UG9zaXRpb24oZGFubWFrdSksIHsKICAgICAgICAndGl0bGUnOiBkb2N1bWVudC50aXRsZSwKICAgICAgICAnb3JpJzogbG9jYXRpb24uaHJlZiwKICAgICAgfSk7CiAgICAgIHN0YXJ0RG93bmxvYWQoJ1x1ZmVmZicgKyBhc3MsIG5hbWUgKyAnLmFzcycpOwogICAgfSk7CiAgfSk7Cn07CgovLyDmmL7npLrlh7rkuIvovb3lvLnluZXmjInpkq4KdmFyIHNob3dCdXR0b24gPSBmdW5jdGlvbiAoY291bnQpIHsKICBHTV9hZGRTdHlsZSgnLmFyYy10b29sYmFyIC5ibG9jay5mYXYgeyBtYXJnaW4tcmlnaHQ6IDAgfSAuYXJjLXRvb2xiYXIgLmJsb2NrIHsgcGFkZGluZzogMCAxOHB4OyB9Jyk7CiAgdmFyIGZhdmJhciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hcmMtdG9vbGJhciAuYmxvY2suZmF2Jyk7CiAgdmFyIGFzc2Rvd24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICBhc3Nkb3duLmlubmVySFRNTCA9ICc8ZGl2IGlkPSJhc3Nkb3duIiBjbGFzcz0iYmxvY2sgYXNzIj48c3BhbiBjbGFzcz0idCBhc3NfYnRuIj48aSBzdHlsZT0iZGlzcGxheTogYmxvY2s7IHdpZHRoOiA4MHB4OyBoZWlnaHQ6IDgwcHg7IGJhY2tncm91bmQtcG9zaXRpb246IDBweCAwcHg7IGJhY2tncm91bmQtaW1hZ2U6IHVybCgmcXVvdDtkYXRhOmltYWdlL3BuZztiYXNlNjQsaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQlZBQUFBQlFDQU1BQUFESW1LN2RBQUFBQkdkQlRVRUFBTEdQQy94aEJRQUFBQUZ6VWtkQ0FLN09IT2tBQUFKblVFeFVSZi8vLzh6TXpCWVdGZ2NIQndFQkFkSFIwWnljbkthbXBnVUZCZWpvNkJjWEZ4Z1lHS0dob1JVVkZRa0pDY3JLeXZUMDlFeE1UQlFVRlBiMjl2UHo4K3ZyNitmbjV3QUFBS21wcWRiVzFnSUNBaE1URTBkSFIvMzkvYkt5c2h3Y0hPYm01bEJRVUJzYkc3aTR1Q2twS1VaR1JubDVlUzh2TDhURXhBTURBeXdzTENnb0tIRnhjWStQai9yNit1TGk0a2hJU1B6OC9PN3U3bmQzZC83Ky92ZjM5MkZoWWZMeTh0cmEydlgxOWZqNCtIOS9mMWxaV2ZuNStYaDRlTzN0N2Z2NysxSlNVa3RMUzFoWVdEOC9QNnlzckZGUlViR3hzWnVibThYRnhRWUdCbzZPamxkWFYyOXZiNzI5dlRrNU9WTlRVMjV1YnJPenM2ZW5wOURRMElPRGc2aW9xQ29xS3M3T3pwQ1FrRTlQVDF0Ylc2MnRyU2NuSjRLQ2d1L3Y3MEJBUU1qSXlGWldWdHpjM0RJeU1qNCtQdURnNEVORFE2cXFxbloyZGpZMk50VFUxSW1KaWJXMXRXUmtaRjVlWG5wNmVrMU5UYlMwdEdCZ1lIdDdlNHFLaXVQajQwbEpTYVdscFkyTmpVSkNRZ29LQ3QvZjMyVmxaWFIwZEdkblp5c3JLOHZMeTk3ZTNwV1ZsUjBkSFJrWkdYSnljaDhmSHk0dUxpQWdJQTBORGJtNXVaR1JrVDA5UFE4UEQvSHg4YisvdnhFUkVkZlgxd3dNRE9UazVEZzRPSFYxZForZm44REF3RTVPVGxwYVd0bloyWHg4Zk9YbDVXdHJhK3JxNmx4Y1hJYUdob3lNakVwS1NwZVhsNWlZbU1QRHc5alkySVNFaExDd3NFUkVSSE56YzZDZ29HcHFhc2JHeHJ1N3U1U1VsRjlmWDVLU2tteHNiR0ppWWpNek0yWm1aZ3NMQ3pvNk91enM3TWZIeHpRME5LT2pvNTJkbmJlM3Q0R0JnY25KeWNMQ3dyYTJ0dHZiMjVtWm1lSGg0UzB0TFcxdGJTRWhJV2xwYVg1K2ZqczdPNTZlbms2WmoxRUFBQVpKU1VSQlZIamE3WjMzWDFOWEhJWlB4cjNCSkF4SjVHb05DcTRPclJVSUlsU1FJYUtBZ0Z0Y3VOQmFXM2ZkZTlTNjZ1N2VlKys5OS82amVsRVRFQ0hra2lQY0U1N25GMDN5K2tDK3dQczVuTVI3aEFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFCSWNqUlBURFFtMUxmenc0Y1BuN0krVFhlNlVtTGdjdnJwMUQ2Y0h6NTgrTlQxT1p4cFRqMW1RL3ZOaElQaTdLUDU0Y09IVDJHZjE2ZHJQWGE0TDVVMWF0L01EeDgrZk9yNnRGUnZQT1dycCtsMFoxL01EeDgrZk9yNmhNZWx4L2R4azJ1Sm10RU53WEtMSXRuenc0Y1BuN28rNFVueHhKWFRYUjZSTk93c3F4emNOYnZxWjAwTFd5cFV5ZlBEaHcrZnVyNjRoZkhtVkdERkl2ZmdyZDAwYW03cjU1K1czb1pDSlVlT1hQTG5PZ1FIZFlNTkN2WEt0cG9SWGZGMmVtOXNDOXhWMVJuRlhmL0tYMXhTYzZEMmkwSzdGbXArbHZrRnlRcEk4QVZ6b2wvZ25LQXRmSEsrLy9EaDYwOWZlM0NJdXh1RzlIZWhudi8rY09ieGtWMnlmTWNuKzYzcUhxcDlwQ1RXNCtYanZKcGRDM1c2NFhZYnhrd0p2Z0lqK2dVMkN1emdrL1Q5aHc5ZmYvb1VXS0VHcHJvbW5YR2tkOG1xMWFsZnJiT21DNFpDeGJFVHF4NnZtc2dLbFJVcVBud0pyRkR0dW9lYVgrODgwMzIvaFdlZE9HaTFVR2NFWWlmQ3N4L0xZUStWSERseWlleWgyclJRTDV5ZUYvUHhPUmVQV0N6VTNCNEtOZnZSTzdNb1ZITGt5Q1Zob2Y0eTZxZVlqNzk1c2xsMm9VNmdVTW1SSTVkWW9kcDBEM1gwcUx0aVByNXpUQjJGU2k2ZVhQc090SDMyb0NkbWRmcHh5NXFXMTd2UGp6MVBYdVdYVWFqM2piK1hRaVVYVDY3OVBSTDJlWmZFdzBhbkh6Zmp3Zm05K3Z4NFZaNVgrU2xVY3F4UVdhRW01d3BWMWg0Q2hVcU9ITGtCbXFOUUtWUnk1TWhScUJRcU9YTGtiRnVvN0tGU3FPVElzUWZOcS93VUtqbHl0ejNIdXlUNmJZVmFzNkZzWEpTeWd1cEJGQ281Y3F4UUI5QUtWZFllZ2tsZ3poTC9BMFBicWQ2emNoYUZTbzRjdVdUUDNaWXI5amUvMFBtZXVVOEhCbmloY29WemZQaVMzeGZ2bVNvT0syZEtQWGZMNVV6eUtxWW9WS2lXTG80aWVYNzQ4T0ZUMXhmbnFYL3BtVlpPUGIzZjMvbWU4bWRzVktnOVhiNVBXTGw4bit6NTRjT0hUMTFmWE9kU2E3b3pMZFBDVmV4dkxkU0pVeE1vMU5qN3I0TVd2V0t4VUh1NndQUUZLeGVZbGo0L2ZQandxZXN6amM0MHA5L2pHZFpCNExrSnZ4blFyUndpTGJWUWZ6Z1JlNFY2ekxYTW1yQ0hJMURDRFpkSFdUb3hXL2I4OE9IRHA2NnY3ZC83bmE0T2U3TU84MVlIWE9hSHM5UXdjZ3QxemFsSkxUSHE3elZqYWFGRjR3SjMvWGZGd1VEMHRPanNZUHNaZmFVL3o3NTg4cEExbyt6NTRjT0hUMTNmTmNmd3FGRHorM3o2VFExdDJTYTFVTVdSNDJ2UGZoMG96STdjTGdsRUtaMjcyYlc4eHJKeHhiZU5UZlhISXN2VW5FTzdPcHdpdlhmdDFQbWxvbi9uaHc4ZlBwVjlRdWdSb2NQcjgyc2lNZVFXcWtnUG5hdHNXcEZ4NDliQ3l0Q2tDSlY3cHkvb3pmOFptSFpwZldSaFc3cTRjZCtNclpFK2ZUVjNibjU1djg4UEh6NThTdnVpYjhkeWVPTjUwY3R5b2VZdGZUWUJYMG4rajhiS29tdC96ZnBvWDJqVDVCdHNuck94dUpmSzMvK291bGFvaFo4ZG50MVFXQno1bFQ5WWFvZjU0Y09IVDJsZlJDakh0MlYzNTNzS0s0OG1wbHg5dlZDL09iVmtXVENjSGFIM3ZzRFlwclpDTFpuczJwMW51L25odzRkUGFkOTFvYWI3cFBnV1Z1eS8rWTduWjJ4UHNMYitiRzByMUZXWlMxcmtQTitpOVZYbVl2VDh4MTlXMjNCKytQRGhVOXBuQ3U4Ulk1MXBUam0rMTFlL082THR6NmVlYUx0R1N0bU9semE4bUtEeDcvVUJVZDdnelMyUzlIeUxRcTNoWDM4N2QzcVpMZWVIRHg4K2xYMm1jUGdZbjAvWEpPa0M3MjhYSXUvbFRVKzJYU05sM3JhTWhJVVRVby8rRjBwcnlwRDFmSXNxakxxMVJ1TkNtODRQSHo1OEN2dUU1NDY3WGZMcVdZZ1BENHFTQTF1eXBma0tqS3NYeDgvTWwrWXpDOVdvcld1eDdmenc0Y09ucnM4VXBtU21TL1NOcnZDLzg1WkVYNWxoWEYwbjBXY1dxcnZaeHZQRGh3K2Z1ajZodStUNlBqQVd2U0hUOTQvUktMTlB4WkNRKzJ6WXh2UERodytmdWo3Tm15clZKOTViUGtXbTd0SmYvMTZSNlF2cnpqbzd6dzhmUG56cStzU3dvWnBVbjJoWUkxVzNlSTljWDk3R3hlVjJuaDgrZlBqVTlRRUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQWdFMzVINlRJdktwaWh0eGhBQUFBQUVsRlRrU3VRbUNDJnF1b3Q7KTsiIGNsYXNzPSJiLWljb24gYi1pY29uLWEgYi1pY29uLWFuaW0tYXNzIiB0aXRsZT0i5by55bmV5LiL6L29Ij48L2k+PGRpdiBjbGFzcz0idC1yaWdodCI+PHNwYW4gY2xhc3M9InQtcmlnaHQtdG9wIj7lvLnluZXkuIvovb08L3NwYW4+PHNwYW4gY2xhc3M9InQtcmlnaHQtYm90dG9tIj4nICsgY291bnQgKyAnPC9zcGFuPjwvZGl2Pjwvc3Bhbj48L2Rpdj4nOwogIGFzc2Rvd24gPSBhc3Nkb3duLmZpcnN0Q2hpbGQ7CiAgZmF2YmFyLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGFzc2Rvd24sIGZhdmJhci5uZXh0U2libGluZyk7CiAgdmFyIHRpbWVyID0gbnVsbCwgZnJhbWUgPSAwOwogIGFzc2Rvd24uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIGZ1bmN0aW9uICgpIHsgZnJhbWUgPSAwOyB0aW1lciA9IHNldFRpbWVvdXQoYW5pbSwgMCk7IH0pOwogIGFzc2Rvd24uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIGZ1bmN0aW9uICgpIHsgY2xlYXJUaW1lb3V0KHRpbWVyKTsgdGltZXIgPSBudWxsOyB9KTsKICB2YXIgYW5pbSA9IGZ1bmN0aW9uICgpIHsKICAgIGlmIChmcmFtZSA9PT0gMTYpIHsgdGltZXIgPSBudWxsOyByZXR1cm47IH0KICAgIGZyYW1lKys7CiAgICBhc3Nkb3duLnF1ZXJ5U2VsZWN0b3IoJ2knKS5zdHlsZS5iYWNrZ3JvdW5kUG9zaXRpb24gPSAnLScgKyAoZnJhbWUgKiA4MCkgKyAncHggMCc7CiAgICBzZXRUaW1lb3V0KGFuaW0sIDEwMDAgLyAxNik7CiAgfTsKfTsKCi8vIOWIneWni+WMluaMiemSrgp2YXIgaW5pdEJ1dHRvbiA9IChmdW5jdGlvbiAoKSB7CiAgdmFyIGRvbmUgPSBmYWxzZTsKICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgZGVidWcoJ2luaXQgYnV0dG9uJyk7CiAgICBpZiAoIWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hcmMtdG9vbGJhciAuYmxvY2suZmF2JykpIHJldHVybjsKICAgIGdldENpZChmdW5jdGlvbiAoY2lkKSB7CiAgICAgIGRlYnVnKCdjaWQgPSAlbycsIGNpZCk7CiAgICAgIGlmICghY2lkIHx8IGRvbmUpIHJldHVybjsgZWxzZSBkb25lID0gdHJ1ZTsKICAgICAgZmV0Y2hEYW5tYWt1KGNpZCwgZnVuY3Rpb24gKGRhbm1ha3UpIHsKICAgICAgICBzaG93QnV0dG9uKGRhbm1ha3UubGVuZ3RoKTsKICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjYXNzZG93bicpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgIG1pbmEoY2lkKTsKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9KTsKICB9Owp9KCkpOwoKLyoKICogQ29tbW9uCiAqLwoKIC8vIOWIneWni+WMlgp2YXIgaW5pdCA9IGZ1bmN0aW9uICgpIHsKICBpbml0Rm9udCgpOwogIGluaXRCdXR0b24oKTsKfTsKCmlmIChkb2N1bWVudC5ib2R5KSBpbml0KCk7CmVsc2Ugd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBpbml0KTs="}]},{"name":"百度网盘下载管理器","options":{"awareOfChrome":false,"check_for_updates":true,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":["baidu.com","qdall01.baidupcs.com"],"orig_excludes":[],"orig_includes":["https://pan.baidu.com/disk/*","https://yun.baidu.com/disk/*","https://pan.baidu.com/s/*","https://yun.baidu.com/s/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"ITEM_LIST":"o[{\"category\":1,\"fsId\":456997620948324,\"isDir\":false,\"localCtime\":1585661990,\"localMtime\":1585662093,\"md5\":\"2e09a95bap906a455cb55353fdaaad75\",\"operId\":2188864136,\"path\":\"/视频/FrozenⅡ.2160P.BD-DIY.DTS-HD MA & TRUEHD 7.1.x265. 72fps - CYK & Lee-7723/Frozen II - Ultra HD™-05.mkv\",\"privacy\":0,\"serverAtime\":0,\"serverCtime\":1585666358,\"serverFilename\":\"Frozen II - Ultra HD™-05.mkv\",\"serverMtime\":1585912300,\"share\":0,\"size\":3916094420,\"unList\":0,\"url\":\"https://qdall01.baidupcs.com/file/2e09a95bap906a455cb55353fdaaad75?bkt=en-82d2bca2fdceac3f596294259d9482c96aea91e947b8bfc42ed3daa2734cf301ad8e9130590cec3a&fid=2188864136-778750-456997620948324&time=1596675267&sign=FDTAXUGERQlBHSKfWa-DCb740ccc5511e5e8fedcff06b081203-cIEO7ik2m8yfyC2DWTyCQW%2F9FJI%3D&to=92&size=3916094420&sta_dx=3916094420&sta_cs=0&sta_ft=mkv&sta_ct=5&sta_mt=5&fm2=MH%2CXian%2CAnywhere%2C%2Cbeijing%2Ccnc&ctime=1585666358&mtime=1585912300&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=3916094420&vuk=2188864136&iv=-2&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-fe699bbb9d2017ddd5efd4d486fa14a4aed481e3364a8142956fc7956dfc36efe36536716722e4bf&expires=8h&rt=pr&r=346920387&mlogid=5064643399529841516&vbdid=1541388608&fin=Frozen+II+-+Ultra+HD%E2%84%A2-05.mkv&bflag=92,34-92&rtype=1&dp-logid=5064643399529841516&dp-callid=0.1.1&hps=1&tsl=0&csl=0&fsl=-1&csign=n1SwGOR9pMZtKB7nl3xZQhXh3Hs%3D&so=0&ut=8&uter=0&serv=1&uc=1458616558&ti=cdac69781712398077b233629596f64d2e04e729fc4efbaf305a5e1275657320&hflag=30&adg=c_085e327e7319a99bd7ed6f825d0134c6&reqlabel=778750_l_d692651a96d79035e732ef7d2d3a6a62_-1_0cf00041acff140ba1435eb7a2d3b18b&ibp=1&by=themis&filename=Frozen%20II%20-%20Ultra%20HD%E2%84%A2-05.mkv\",\"progress\":{\"intervalId\":1198,\"request\":{},\"_speedOverlay\":0,\"_status\":\"COMPLETED\",\"_percentCount\":100,\"fsId\":456997620948324}},{\"category\":6,\"fsId\":913210560122375,\"isDir\":false,\"localCtime\":1597196330,\"localMtime\":1597196347,\"md5\":\"432ca9f75p36fa72b0b95a6d60f84686\",\"operId\":0,\"path\":\"/我的资源/Adobe_Audition_2020_13.0.9.41_SP_20200812.rar\",\"privacy\":1,\"serverAtime\":0,\"serverCtime\":1597197274,\"serverFilename\":\"Adobe_Audition_2020_13.0.9.41_SP_20200812.rar\",\"serverMtime\":1597234202,\"share\":0,\"size\":435027980,\"unList\":0,\"url\":\"https://qdall01.baidupcs.com/file/432ca9f75p36fa72b0b95a6d60f84686?bkt=en-cf7b18a7c51d90781937a6b91160f82b335fbfab9c18e59cb7587b2a6d5fca091f69875b557b29d3&fid=2188864136-778750-913210560122375&time=1597234427&sign=FDTAXUGERQlBHSKfWa-DCb740ccc5511e5e8fedcff06b081203-huGzIoHAAb2SV%2BtF3k4YQThEBGg%3D&to=92&size=435027980&sta_dx=435027980&sta_cs=22&sta_ft=rar&sta_ct=0&sta_mt=0&fm2=MH%2CXian%2CAnywhere%2C%2Cbeijing%2Ccnc&ctime=1597197274&mtime=1597234202&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=435027980&vuk=2188864136&iv=-2&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-8f4147657f0d70e664d6ddf5ffc01d44e5d77e180ab7749b173b67be1c55d86bc5baec7785eb66e9&expires=8h&rt=pr&r=158415041&mlogid=5214741714834823752&vbdid=1541388608&fin=Adobe_Audition_2020_13.0.9.41_SP_20200812.rar&bflag=92,34-92&rtype=1&dp-logid=5214741714834823752&dp-callid=0.1.1&hps=1&tsl=0&csl=0&fsl=-1&csign=n1SwGOR9pMZtKB7nl3xZQhXh3Hs%3D&so=0&ut=8&uter=0&serv=0&uc=1458616558&ti=9cf67ec2c4eb6cc0401d129deb5f682eb5bcc6b2016b0e56&hflag=30&adg=c_085e327e7319a99bd7ed6f825d0134c6&reqlabel=778750_l_db828d217d35b98eeaeda28edf79e37b_-1_1c44bc0eca6153f8c7af0e0e83a67307&ibp=1&by=themis&filename=Adobe_Audition_2020_13.0.9.41_SP_20200812.rar\",\"progress\":{\"intervalId\":7405,\"request\":{},\"_speedOverlay\":0,\"_status\":\"COMPLETED\",\"_percentCount\":100,\"fsId\":913210560122375}},{\"category\":6,\"fsId\":229229886175616,\"isDir\":false,\"localCtime\":1594967896,\"localMtime\":1594967969,\"md5\":\"7ff7c60a0n69f037778cf88cdcd9a647\",\"operId\":0,\"path\":\"/我的资源/Adobe_Photoshop_2020_21.2.1.265_ACR12.3_SP_20200717.rar\",\"privacy\":1,\"serverAtime\":0,\"serverCtime\":1594968747,\"serverFilename\":\"Adobe_Photoshop_2020_21.2.1.265_ACR12.3_SP_20200717.rar\",\"serverMtime\":1597234202,\"share\":0,\"size\":1886754879,\"unList\":0,\"url\":\"https://qdall01.baidupcs.com/file/7ff7c60a0n69f037778cf88cdcd9a647?bkt=en-2bd419aa17f4904ffc6911d174526abfb7ecbbf5e00dae40d928e8cd9bd7ebffac748f42d8181766&fid=2188864136-778750-229229886175616&time=1597234952&sign=FDTAXUGERQlBHSKfWa-DCb740ccc5511e5e8fedcff06b081203-jkuwNvcnWnwMpZrYOAdqjql57qg%3D&to=92&size=1886754879&sta_dx=1886754879&sta_cs=15960&sta_ft=rar&sta_ct=4&sta_mt=0&fm2=MH%2CXian%2CAnywhere%2C%2Cbeijing%2Ccnc&ctime=1594968747&mtime=1597234202&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=1886754879&vuk=2188864136&iv=-2&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-e4e68753489de3c757df16923dd6dc2b8ac24ae722100e26d4a5cbb0bbfe3248ff555bf68994deec&expires=8h&rt=pr&r=839572576&mlogid=5214882733057434088&vbdid=1541388608&fin=Adobe_Photoshop_2020_21.2.1.265_ACR12.3_SP_20200717.rar&bflag=92,34-92&rtype=1&dp-logid=5214882733057434088&dp-callid=0.1.1&hps=1&tsl=0&csl=0&fsl=-1&csign=n1SwGOR9pMZtKB7nl3xZQhXh3Hs%3D&so=0&ut=8&uter=0&serv=0&uc=1458616558&ti=6271d6a92c89ad8ba1a445f94d8e7494ca3a57e47cada1a1&hflag=30&adg=c_085e327e7319a99bd7ed6f825d0134c6&reqlabel=778750_l_db828d217d35b98eeaeda28edf79e37b_-1_1c44bc0eca6153f8c7af0e0e83a67307&ibp=1&by=themis&filename=Adobe_Photoshop_2020_21.2.1.265_ACR12.3_SP_20200717.rar\",\"progress\":{\"intervalId\":22857,\"request\":{},\"_speedOverlay\":0,\"_status\":\"COMPLETED\",\"_percentCount\":100,\"fsId\":229229886175616}},{\"category\":6,\"fsId\":686394314532275,\"isDir\":false,\"localCtime\":1597196594,\"localMtime\":1597196634,\"md5\":\"6aa940121i9f8b9bd62c8404b6abc95f\",\"operId\":0,\"path\":\"/我的资源/Adobe_Media_Encoder_2020_14.3.2.37_SP_20200812.rar\",\"privacy\":1,\"serverAtime\":0,\"serverCtime\":1597197560,\"serverFilename\":\"Adobe_Media_Encoder_2020_14.3.2.37_SP_20200812.rar\",\"serverMtime\":1597234202,\"share\":0,\"size\":1000666093,\"unList\":0,\"url\":\"https://qdall01.baidupcs.com/file/6aa940121i9f8b9bd62c8404b6abc95f?bkt=en-038bee77e919b76a95c485bf893d72a822b33fc9b582221e9485fa4b4b6ca75a362351cb43c5692f&fid=2188864136-778750-686394314532275&time=1597234394&sign=FDTAXUGERQlBHSKfWa-DCb740ccc5511e5e8fedcff06b081203-AQAHp5V8uSicOUAx89%2FB2y%2B4Vww%3D&to=92&size=1000666093&sta_dx=1000666093&sta_cs=19&sta_ft=rar&sta_ct=0&sta_mt=0&fm2=MH%2CXian%2CAnywhere%2C%2Cbeijing%2Ccnc&ctime=1597197560&mtime=1597234202&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=1000666093&vuk=2188864136&iv=-2&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-cc65705a04322e7c41bc8bb981f01fe1350d24ed4cefa828a4cf09eddecd40a9e38817ef3a3db2bf&expires=8h&rt=pr&r=211599042&mlogid=5214733027719974131&vbdid=1541388608&fin=Adobe_Media_Encoder_2020_14.3.2.37_SP_20200812.rar&bflag=92,34-92&rtype=1&dp-logid=5214733027719974131&dp-callid=0.1.1&hps=1&tsl=0&csl=0&fsl=-1&csign=n1SwGOR9pMZtKB7nl3xZQhXh3Hs%3D&so=0&ut=8&uter=0&serv=0&uc=1458616558&ti=51702cd94a4865eea2a49a514fe295eec0b6b75e2236f162&hflag=30&adg=c_085e327e7319a99bd7ed6f825d0134c6&reqlabel=778750_l_db828d217d35b98eeaeda28edf79e37b_-1_1c44bc0eca6153f8c7af0e0e83a67307&ibp=1&by=themis&filename=Adobe_Media_Encoder_2020_14.3.2.37_SP_20200812.rar\",\"progress\":{\"intervalId\":6221,\"request\":{},\"_speedOverlay\":0,\"_status\":\"COMPLETED\",\"_percentCount\":100,\"fsId\":686394314532275}},{\"category\":6,\"fsId\":227413788915165,\"isDir\":false,\"localCtime\":1597196901,\"localMtime\":1597196973,\"md5\":\"6926f0935nd6558c5f39916b699a6cf3\",\"operId\":0,\"path\":\"/我的资源/Adobe_Premiere_Pro_2020_14.3.2.42_SP_20200812.rar\",\"privacy\":1,\"serverAtime\":0,\"serverCtime\":1597197804,\"serverFilename\":\"Adobe_Premiere_Pro_2020_14.3.2.42_SP_20200812.rar\",\"serverMtime\":1597234202,\"share\":0,\"size\":1623182290,\"unList\":0,\"url\":\"https://qdall01.baidupcs.com/file/6926f0935nd6558c5f39916b699a6cf3?bkt=en-2e2b5030dd6ff0377d553a6672c3b7e8e1bedacf8058367150b2550dde5463b59e6bacc845c071c6&fid=2188864136-778750-227413788915165&time=1597235363&sign=FDTAXUGERQlBHSKfWa-DCb740ccc5511e5e8fedcff06b081203-HcBMaceDBdCaj26NresA3qMYxHE%3D&to=92&size=1623182290&sta_dx=1623182290&sta_cs=38&sta_ft=rar&sta_ct=0&sta_mt=0&fm2=MH%2CXian%2CAnywhere%2C%2Cbeijing%2Ccnc&ctime=1597197804&mtime=1597234202&resv0=-1&resv1=0&resv2=rlim&resv3=2&resv4=1623182290&vuk=2188864136&iv=-2&htype=&randtype=em&newver=1&newfm=1&secfm=1&flow_ver=3&pkey=en-b10ff2a4103dd04d7a82f4142dad51e21e93820e603101cf231d1f1c02f64cdf7e9057a933389d1b&expires=8h&rt=pr&r=561985270&mlogid=5214993012820749837&vbdid=1541388608&fin=Adobe_Premiere_Pro_2020_14.3.2.42_SP_20200812.rar&bflag=92,34-92&rtype=1&dp-logid=5214993012820749837&dp-callid=0.1.1&hps=1&tsl=0&csl=0&fsl=-1&csign=n1SwGOR9pMZtKB7nl3xZQhXh3Hs%3D&so=0&ut=8&uter=0&serv=0&uc=1458616558&ti=12146e4ffd7df3c92b808f1a71c84b8cd90c42fc7a0636bf&hflag=30&adg=c_085e327e7319a99bd7ed6f825d0134c6&reqlabel=778750_l_db828d217d35b98eeaeda28edf79e37b_-1_1c44bc0eca6153f8c7af0e0e83a67307&ibp=1&by=themis&filename=Adobe_Premiere_Pro_2020_14.3.2.42_SP_20200812.rar\",\"progress\":{\"intervalId\":38131,\"request\":{},\"_speedOverlay\":0,\"_status\":\"COMPLETED\",\"_percentCount\":100,\"fsId\":227413788915165}}]"},"ts":1598065116402},"enabled":true,"position":10,"file_url":"https://greasyfork.org/scripts/405782-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E4%B8%8B%E8%BD%BD%E7%AE%A1%E7%90%86%E5%99%A8/code/%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E4%B8%8B%E8%BD%BD%E7%AE%A1%E7%90%86%E5%99%A8.user.js","uuid":"f8b9e9b5-ed00-4dd9-bae2-223f1a28233f","source":""}],"settings":{"script_blacklist_server":[{"rules":["/https?:\\/\\/userscripts\\.org\\/scripts\\/(source|version)/(102614).*\\.user\\.js/"],"severity":"2"},{"name":"SaveFrom.net helper","reason":"Shows advertisements","rules":["/https?:\\/\\/sf-addon\\.com\\/.*\\/.*\\.user\\.js/","/https?:\\/\\/.*\\.sf-helper\\.com\\/.*\\.user\\.js/"],"severity":"3"},{"reasons":{"en":"Used for a phishing compain to compromise users of baon-nutrition.com"},"rules":["/https?:\\/\\/files\\.ulysse\\.travel\\/.*\\.user\\.js/"],"severity":"8"}]}}